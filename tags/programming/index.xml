<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Lambda Land</title>
    <link>https://lambdaland.org/tags/programming/</link>
    <description>Recent content in programming on Lambda Land</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lambdaland.org/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A New Font</title>
      <link>https://lambdaland.org/posts/2022-08-01_a_new_font/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-08-01_a_new_font/</guid>
      <description>This week I created a custom build of the Iosevka font. I&amp;#39;ve used Input Mono for a long time now, and was very happy with it. However, it was missing a few glyphs that I wanted to use. Moreover, I didn&amp;#39;t have a license for the Input font to use on e.g. my blog. Iosevka is stupendously customizable, so I thought I&amp;#39;d see if I could get something close to Input&amp;#39;s styles.</description>
    </item>
    
    <item>
      <title>Programs and Intent</title>
      <link>https://lambdaland.org/posts/2021-11-09_programs_and_intent/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-11-09_programs_and_intent/</guid>
      <description>What does this program do? At the most reduced level, one could say that a program&amp;rsquo;s behavior is defined by the effect it has on the hardware running it. That&amp;rsquo;s not very useful however; when we&amp;rsquo;re programming, we often have to deal with legacy code and tease out the original intent of the code.
Saying that the meaning of a program is entirely encapsulated by the code is saying that the intent and the implementation are the same.</description>
    </item>
    
    <item>
      <title>Models of Programming</title>
      <link>https://lambdaland.org/posts/2021-09-25_models_of_programming_draft2/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-09-25_models_of_programming_draft2/</guid>
      <description>&lt;p&gt;&lt;em&gt;Last week I was studying outside of a lecture hall where someone was teaching an introductory course on computer programming. There was a lot that I overheard that I disagreed with; this essay is an attempt to help me crystallize what exactly I disagreed with.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Control-Flow Analysis</title>
      <link>https://lambdaland.org/posts/2021-05-20_cfa/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-05-20_cfa/</guid>
      <description>&lt;p&gt;Control-Flow Analysis is a popular technique for performing static analysis of many different kinds of programming languages.
It&amp;rsquo;s most often needed in cases where you have some kind of dynamic dispatch: either where you have first-class functions or when you have objects and you call one of their methods.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Macros with Elixir</title>
      <link>https://lambdaland.org/posts/2019-02-27-macros-with-elixir/</link>
      <pubDate>Wed, 27 Feb 2019 16:36:53 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2019-02-27-macros-with-elixir/</guid>
      <description>I gave a presentation at the Utah Elixir Meetup this February. Here&amp;rsquo;s the recording of my presentation:
Watch on YouTube I&amp;rsquo;ve posted the slides as an HTML file, along with some materials to follow along with, on my GitHub account. Check it out!</description>
    </item>
    
    <item>
      <title>Marked Man</title>
      <link>https://lambdaland.org/posts/2019-01-24-marked-man/</link>
      <pubDate>Thu, 24 Jan 2019 03:54:51 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2019-01-24-marked-man/</guid>
      <description>Marked Man (mm) is a little program I wrote to view Markdown files like UNIX man pages. (Because who wants to leave their terminal just to open a file?)
It uses Pandoc to convert between Markdown and the groff format. As a happy side-effect, this program can read basically anything as a man page: HTML, LaTeX, Word files (seriously), ePub, etc. Anything that Pandoc can read, Marked Man can handle.</description>
    </item>
    
    <item>
      <title>Editors, or The Tools of my Trade</title>
      <link>https://lambdaland.org/posts/2018-12-06-editor-apology/</link>
      <pubDate>Thu, 06 Dec 2018 06:02:09 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2018-12-06-editor-apology/</guid>
      <description>I spend a fair portion of every day writing programs. As with all professions, using the right tools makes a huge difference in my productivity and general happiness. Having good tools helps me keep my gumption up.
One of my favorite books is Zen and the Art of Motorcycle Maintenance. Contrary to what the title suggests, this book is actually not about motorcycles. It’s about a lot of things; one topic is about tools and caring about your trade.</description>
    </item>
    
    <item>
      <title>Induction and Side-Effects</title>
      <link>https://lambdaland.org/posts/2018-10-08-induction-and-side-effects/</link>
      <pubDate>Mon, 08 Oct 2018 18:23:28 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2018-10-08-induction-and-side-effects/</guid>
      <description>Today in my proofs class (MATH 290 at BYU) we talked about the concept induction. I like this, because it sounds a lot like recursion.
On the Wikipedia article, there&amp;rsquo;s an excerpt from a book that illustrates the principle with an analogy using a ladder:
Mathematical induction proves that we can climb as high as we like on a ladder, by proving that we can climb onto the bottom rung (the basis) and that from each rung we can climb up to the next one (the step).</description>
    </item>
    
    <item>
      <title>Rapid Website Development with Mojolicious and Polymer</title>
      <link>https://lambdaland.org/posts/2017-11-09-quick-website-programming-with-mojolicious-and-polymer/</link>
      <pubDate>Thu, 09 Nov 2017 06:19:12 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2017-11-09-quick-website-programming-with-mojolicious-and-polymer/</guid>
      <description>My girlfriend works for BYU SA—it&amp;rsquo;s the division of BYU that&amp;rsquo;s responsible for planning and running events. As part of her job, she has to review song lyrics and make sure that the song is okay to play at BYU functions.
This can get rather irksome. Imagine reading text looking for vulgar words or phrases. Yuck. I took some time this evening to write a little website that checks MetroLyrics for any vulgar words or phrases.</description>
    </item>
    
    <item>
      <title>Emacs Tips and Tricks</title>
      <link>https://lambdaland.org/posts/2017-09-23-emacs-tips-and-tricks/</link>
      <pubDate>Sat, 23 Sep 2017 22:09:43 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2017-09-23-emacs-tips-and-tricks/</guid>
      <description>Emacs Tips and Tricks # To Learn About # ☒ Company-mode (completion framework for lots of stuff) ☒ YASnippets (templates) ☒ Auto-YASnippets (something like that—I installed it for temporary templates) ☒ Alchemist mode (integrates with company mode—tooling for Elixir) ☐ What do M-. and M-, do? ☐ font-lock-add-keywords would let me add new keywords to a language ☐ hi-lock ☐ highlight-phrase, unhighlight-regex ☒ Registers ☐ Auto-loading packages to make startup time shorter Things that make me happy # Undo in region (just highlight something and hit undo) Generate Backus-Nauer Forms with a slightly modified syntax with ebnf-eps-buffer Helm # You can filter buffers by pattern with Helm.</description>
    </item>
    
  </channel>
</rss>
