<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer-science on Lambda Land</title>
    <link>https://lambdaland.org/tags/computer-science/</link>
    <description>Recent content in computer-science on Lambda Land</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lambdaland.org/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reflections one year into a PhD program</title>
      <link>https://lambdaland.org/posts/2023-08-05_one_year_into_phd/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-08-05_one_year_into_phd/</guid>
      <description>I started my PhD program about a year ago. In my first year I have:
Taken 4 &amp;ldquo;normal&amp;rdquo; 3-credit-hour classes Participated in 3 seminars Switched advisors Attended 2 conferences (PLDI @ FCRC, JuliaCon) Presented my work at JuliaCon It&amp;rsquo;s been a lot of work, and there&amp;rsquo;s been a lot of stress. I&amp;rsquo;m in a much better place now than when I started, and over all I&amp;rsquo;m happy where I&amp;rsquo;m at and where I&amp;rsquo;m headed.</description>
    </item>
    
    <item>
      <title>Writing Racket Macros: define-syntax and phases</title>
      <link>https://lambdaland.org/posts/2023-05-19_racket_macros/</link>
      <pubDate>Fri, 19 May 2023 00:00:00 -0600</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-19_racket_macros/</guid>
      <description>There are a bunch of different ways of writing a macro in Racket. There are also some tricky things around phases to keep in mind. This is to help me keep them all straight.
3+1 ways to make a macro # This form:
(define-syntax-rule (foo args ...) (use args ...)) is equivalent to:
(define-syntax foo (syntax-rules () ([foo args ...] (use args ...)))) Which, is in turn equivalent to:
(define-syntax foo (λ (stx) (syntax-case stx () [(gensymed-foo args .</description>
    </item>
    
    <item>
      <title>The kind of thinking computer science enables</title>
      <link>https://lambdaland.org/posts/2023-05-11_thinking_cs/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-11_thinking_cs/</guid>
      <description>I believe computer science plays as integral of a part to a well-rounded liberal arts education as does mathematics and linguistics. Why? A liberal arts education is designed to help you think in new and better ways. Computer science teaches novel ways of thinking, reasoning, and approaching problems that are hard to get anywhere else.
I took a class on pedagogy when I encountered this puzzle. I answered the question easily, and I caught myself using reasoning patterns from work in programming coming to the forefront.</description>
    </item>
    
    <item>
      <title>What is a type system, really?</title>
      <link>https://lambdaland.org/posts/2023-01-17_what_is_a_type_system_really/</link>
      <pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-01-17_what_is_a_type_system_really/</guid>
      <description>Background # This is a question I&amp;rsquo;ve been wrestling with for a little bit. My first experience with a type system was with Java, and I didn&amp;rsquo;t like it. It just felt like an annoying constraint on the kinds of programs I could write. I was coming from Perl, which sports weak dynamic typing, so Java&amp;rsquo;s rigidity came as a bit of a shock.
After Java I learned some C, which too has types.</description>
    </item>
    
    <item>
      <title>How to write a type checker/type inferrer with good error messages</title>
      <link>https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/</guid>
      <description>All the source for this may be found on my SourceHut repository.
Synopsis # Experimental type checker/inferer for a simple lambda calculus
Description # This is a type inference system for a little language. (Described below.) It uses a fusion of type inference algorithms from PLAI, ESP, and μKanren. (See Resources)
Broadly speaking, our type inference engine works by:
generating typing constraints from the program solving those constraints We&amp;rsquo;ll describe each of those in more detail.</description>
    </item>
    
    <item>
      <title>Complete and Liveness, Safe and Sound</title>
      <link>https://lambdaland.org/posts/2022-03-02_sound_complete_and_duals/</link>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-03-02_sound_complete_and_duals/</guid>
      <description>I have a hard time keeping these terms straight:
liveness vs. safety soundness vs. completeness This is intended as a short guide for myself; maybe someone else will find it useful too! Note that this is all to the best of my knowledge and understanding at the present time; if there be faults, they be the faults of myself. I welcome correction and clarification if I am wrong.
Liveness vs. Safety # Liveness and safety deal with properties of a system.</description>
    </item>
    
    <item>
      <title>Control-Flow Analysis</title>
      <link>https://lambdaland.org/posts/2021-05-20_cfa/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-05-20_cfa/</guid>
      <description>&lt;p&gt;Control-Flow Analysis is a popular technique for performing static analysis of many different kinds of programming languages.
It&amp;rsquo;s most often needed in cases where you have some kind of dynamic dispatch: either where you have first-class functions or when you have objects and you call one of their methods.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
