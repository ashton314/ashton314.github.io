<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer-Science on Lambda Land</title>
    <link>https://lambdaland.org/tags/computer-science/</link>
    <description>Recent content in Computer-Science on Lambda Land</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lambdaland.org/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chorex: Guaranteeing Deadlock Freedom in Elixir</title>
      <link>https://lambdaland.org/posts/2024-06-03_chorex_0_1/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-06-03_chorex_0_1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/utahplt/chorex&#34;&gt;Chorex&lt;/a&gt; is a brand-new Elixir library for &lt;em&gt;choreographic programming&lt;/em&gt; [&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;3&lt;/a&gt;]: Chorex provides a macro-based DSL that lets you describe how processes communicate to perform a computation. This top-down description of interacting processes is called a &lt;em&gt;choreography&lt;/em&gt;. From this choreography, Chorex creates modules for each process that handle all the message-passing in the system. The interactions performed by the generated code will never deadlock &lt;em&gt;by construction&lt;/em&gt; because the choreographic DSL ensures that no processes will be waiting on each other at the same time.&lt;/p&gt;
&lt;p&gt;This is a research project; if you like experimenting with new things, please try this out! The best way to leave feedback is by &lt;a href=&#34;https://github.com/utahplt/chorex/issues&#34;&gt;opening an issue&lt;/a&gt; on the Chorex repository. Chorex is still in active development, and we would love to see whatever you make with Chorex.&lt;/p&gt;
&lt;p&gt;Chorex is available on &lt;a href=&#34;https://hex.pm/packages/chorex&#34;&gt;hex.pm&lt;/a&gt;. Development is on &lt;a href=&#34;https://github.com/utahplt/chorex&#34;&gt;GitHub&lt;/a&gt;. Try it out!&lt;/p&gt;
&lt;h2 id=&#34;what-does-chorex-do&#34;&gt;
  What does Chorex do?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-does-chorex-do&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Chorex enables &lt;em&gt;choreographic programming&lt;/em&gt; in Elixir. A &lt;em&gt;choreography&lt;/em&gt; is a birds-eye view of communicating parties in a concurrent system: you describe the different actors and how they send messages to each other. From this choreography you can create an &lt;em&gt;endpoint projection&lt;/em&gt;, which just means you create some code for each of the concurrent actors that handles all the communication.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/chorex_announcement/figures/EPP.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;Choreographic programming ensures &lt;em&gt;deadlock freedom by construction&lt;/em&gt;. That means you will not be able to accidentally create a system of actors that accidentally deadlock. It&amp;rsquo;s still possible to have other kinds of bugs that freeze the system (e.g. one of the actors hangs on an infinite loop) but it eliminates an entire class of bug that is difficult to track down in real applications.&lt;/p&gt;
&lt;p&gt;Additionally, Chorex implements &lt;em&gt;higher-order choreographies&lt;/em&gt; [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] which let you treat choreographies as first-class citizens in your language. This improves the modularity of code built with choreographies.&lt;/p&gt;
&lt;p&gt;Chorex does all this by leveraging Elixir&amp;rsquo;s macro system: you write down a choreography using the &lt;code&gt;defchor&lt;/code&gt; macro provided by Chorex. The macro expands into several modules: one for each actor in your system. You then create another module for each actor in the system which &lt;code&gt;use&lt;/code&gt;​s the respective macro-generated module; the macro-generated module handles the communication between the different parties in the choreography, and your hand-written module handles all the internal bits to that node. Let&amp;rsquo;s look at an example.&lt;/p&gt;
&lt;h2 id=&#34;example-of-a-choreography&#34;&gt;
  Example of a choreography
  &lt;a class=&#34;anchor&#34; href=&#34;#example-of-a-choreography&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a simple, classic example: someone wants to buy a book, so they ask the seller for the price. The seller responds with the price. Here&amp;rsquo;s a diagram of that communication:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/chorex_announcement/figures/booksell_flow.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;And here is the corresponding choreography describing that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  defchor &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;get_book_title&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;get_price&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;defchor&lt;/code&gt; macro will create (roughly) the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Chorex&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8fbcbb&#34;&gt;@callback&lt;/span&gt; get_book_title&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8fbcbb&#34;&gt;@callback&lt;/span&gt; get_price&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;along with a &lt;code&gt;__using__&lt;/code&gt; macro. Now we create modules for each of our actors (&lt;code&gt;Buyer&lt;/code&gt;, &lt;code&gt;Seller&lt;/code&gt;) and we use the generated &lt;code&gt;Chorex&lt;/code&gt; module to handle the communication:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;MyBuyer&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor.Chorex&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:buyer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; get_book_title&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Zen and the Art of Motorcycle Maintenance&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;MySeller&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor.Chorex&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:seller&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; get_price&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;book_title&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To kick off the choreography, start up a process for each actor and send them everyone&amp;rsquo;s PID:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buyer_process  &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; spawn&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;MyBuyer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;:init&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seller_process &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; spawn&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;MySeller&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:init&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;%{&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&amp;gt;&lt;/span&gt; buyer_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&amp;gt;&lt;/span&gt; seller_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:super&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&amp;gt;&lt;/span&gt; self&lt;span style=&#34;color:#eceff4&#34;&gt;()}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;buyer_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;seller_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can wait for the processes to send you (the parent that started the choreography) their return values. From the choreography, we expect the &lt;code&gt;Buyer&lt;/code&gt; actor to finish with the price &lt;code&gt;p&lt;/code&gt;. We can get that like so after sending the actors the config for the network:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:choreography_return&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; the_price&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;puts&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Got price at buyer: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;#{&lt;/span&gt;the_price&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In sum, this is how you use Chorex:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a choreography to describe your system&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;defchor&lt;/code&gt; macro will create modules for each endpoint&lt;/li&gt;
&lt;li&gt;Implement each endpoint&amp;rsquo;s derived behaviour&lt;/li&gt;
&lt;li&gt;Fire of the choreography&lt;/li&gt;
&lt;li&gt;Await replies&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/chorex_announcement/figures/using_chorex.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;Choreographies can get a &lt;em&gt;lot&lt;/em&gt; more complicated than this puny example here. See the &lt;a href=&#34;https://hexdocs.pm/chorex/readme.html&#34;&gt;Chorex README&lt;/a&gt; and &lt;a href=&#34;https://hexdocs.pm/chorex/Chorex.html&#34;&gt;module documentation&lt;/a&gt; for more extensive examples with Chorex. Lugović and Montesi built an IRC client and server in Java with a choreography [&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;2&lt;/a&gt;]—I&amp;rsquo;m excited to see what&amp;rsquo;s possible in Elixir!&lt;/p&gt;
&lt;h2 id=&#34;chorex-goals-non-goals-and-roadmap&#34;&gt;
  Chorex goals, non-goals, and roadmap
  &lt;a class=&#34;anchor&#34; href=&#34;#chorex-goals-non-goals-and-roadmap&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Chorex is a &lt;em&gt;research project&lt;/em&gt;, meaning that its primary function is to prove out new ideas. Development speed takes priority over stability of features and API. This is a scout and a trailblazer, not a surveyor and road-laying machine.&lt;/p&gt;
&lt;p&gt;We would like to make Chorex as useful as possible; historically choreographic programming libraries have been cutting-edge research projects. Chorex &lt;em&gt;is&lt;/em&gt; still research-oriented, but if we can make it useful to people other than ourselves, then that&amp;rsquo;s a big win. :) Moreover, no one has done choreographic programming with Elixir-style concurrency, where processes have mailboxes and where there are existing idioms around processes and communication.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; intended to be a production-grade system. Maybe some day, but not today. Please don&amp;rsquo;t use this to build a production system then blame us when your system goes down. Please &lt;em&gt;do&lt;/em&gt; use this in hobby projects and let us know what you manage to build!&lt;/p&gt;
&lt;h2 id=&#34;feedback&#34;&gt;
  Feedback
  &lt;a class=&#34;anchor&#34; href=&#34;#feedback&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Please send us any feedback you have! You can &lt;a href=&#34;https://lambdaland.org/#contact&#34;&gt;contact me directly&lt;/a&gt; or &lt;a href=&#34;https://github.com/utahplt/chorex/issues&#34;&gt;open an issue&lt;/a&gt; on the Chorex repository. We would &lt;em&gt;love&lt;/em&gt; to see anything you make with Chorex.&lt;/p&gt;
&lt;h2 id=&#34;fun-details-on-the-implementation&#34;&gt;
  Fun details on the implementation
  &lt;a class=&#34;anchor&#34; href=&#34;#fun-details-on-the-implementation&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;While building the &lt;code&gt;defchor&lt;/code&gt; macro, I realized I needed to walk an AST and gather up a list of functions an an endpoint would need to define. This inspired me to create a writer monad; I documented how I stumbled upon a pattern that a monad solved quite elegantly &lt;a href=&#34;https://lambdaland.org/posts/2024-05-01_definitely_not_about_monads/&#34;&gt;earlier on my blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;style&gt;.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[1]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Hirsch, A.K. and Garg, D. 2022. Pirouette: Higher-order typed functional choreographies. &lt;i&gt;Proceedings of the acm on programming languages&lt;/i&gt;. 6, (Jan. 2022), 1–27. DOI:&lt;a href=&#34;https://doi.org/10.1145/3498684&#34;&gt;https://doi.org/10.1145/3498684&lt;/a&gt;.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[2]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Lugović, L. and Montesi, F. 2023. Real-World Choreographic Programming: Full-Duplex Asynchrony and Interoperability. &lt;i&gt;The art, science, and engineering of programming&lt;/i&gt;. 8, 2 (Oct. 2023), 8. DOI:&lt;a href=&#34;https://doi.org/10.22152/programming-journal.org/2024/8/8&#34;&gt;https://doi.org/10.22152/programming-journal.org/2024/8/8&lt;/a&gt;.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[3]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Montesi, F. 2023. &lt;i&gt;&lt;a href=&#34;https://doi.org/10.1017/9781108981491&#34;&gt;Introduction to Choreographies&lt;/a&gt;&lt;/i&gt;. Cambridge University Press.&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Why Don&#39;t More Languages Have a call/cc Operator?</title>
      <link>https://lambdaland.org/posts/2023-10-30_why_no_callcc/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-10-30_why_no_callcc/</guid>
      <description>&lt;p&gt;Something I&amp;rsquo;ve wondered about for a little while: why don&amp;rsquo;t more languages have a &lt;a href=&#34;https://en.wikipedia.org/wiki/Call-with-current-continuation&#34;&gt;&lt;code&gt;call/cc&lt;/code&gt;&lt;/a&gt; operator? Having &lt;a href=&#34;https://lambdaland.org/posts/2022-11-17_continutations/&#34;&gt;first-class continuations&lt;/a&gt; in your programming language gives your programmers a powerful construct. So why do only a handful of languages have it?&lt;/p&gt;
&lt;p&gt;The short answer is: it&amp;rsquo;s tricky to implement efficiently. One way to get &lt;code&gt;call/cc&lt;/code&gt; is to convert your code into continuation-passing style. Then, &lt;code&gt;call/cc&lt;/code&gt; simply takes the continuation in that representation and binds it to a variable. Most languages don&amp;rsquo;t seem to go through a continuation-passing style conversion pass though, so there&amp;rsquo;s no continuation to grab.&lt;/p&gt;
&lt;p&gt;I asked &lt;a href=&#34;https://users.cs.utah.edu/~mflatt/&#34;&gt;Matthew Flatt&lt;/a&gt; about this today, and his answer was that most languages use the C model of functions: when you call a function, you push the arguments to the function onto a stack along with the return address. Then, when you return, you pop those element back off the stack. To get &lt;code&gt;call/cc&lt;/code&gt;, you&amp;rsquo;ve have to copy the entire stack and pass that around.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deriving Recursion from First Principles</title>
      <link>https://lambdaland.org/posts/2023-10-03_recursion_from_first_principles/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-10-03_recursion_from_first_principles/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Or: Approaching the Y Combinator&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;These are some of my class notes. Learning to derive the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator&#34;&gt;Y Combinator&lt;/a&gt; from first principles is something I&amp;rsquo;ve always wanted to do. This isn&amp;rsquo;t &lt;em&gt;quite&lt;/em&gt; the Y Combinator, but it&amp;rsquo;s very close and it still gets you recursion without relying on recursive structures to begin with.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the beginning, we write a recursive function to compute the length of a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://docs.racket-lang.org/reference/let.html&#34;&gt;&lt;code&gt;let*&lt;/code&gt;&lt;/a&gt; syntax allows us to create local variable bindings that can reference themselves. But let&amp;rsquo;s suppose we don&amp;rsquo;t have &lt;code&gt;let*&lt;/code&gt;&amp;mdash;what do we do?&lt;/p&gt;
&lt;p&gt;We can make a function that we give to itself. That then returns the function we want, with the outer function in scope. So, the outer function &lt;code&gt;len&lt;/code&gt; in this example has &amp;ldquo;type&amp;rdquo;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;$self → Int → Int&lt;/code&gt;. That makes it clear that to get the &lt;code&gt;Int → Int&lt;/code&gt; function we want, we have to pass the function to itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;))))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it&amp;rsquo;d be nice if we could pull out that &lt;code&gt;(len len)&lt;/code&gt; in the body of the function. Let&amp;rsquo;s call that &lt;code&gt;len1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; l&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that what we &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; do is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; problem here!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because this is an &lt;em&gt;eager&lt;/em&gt; language, so that&amp;rsquo;d loop forever.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do that same trick for the outer &lt;code&gt;len len&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; l&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;               &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; type of len1 is Int → Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the &lt;code&gt;(len len)&lt;/code&gt; at the end of that is OK because we&amp;rsquo;re not doing another self application.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s change that inner &lt;code&gt;let&lt;/code&gt; to a &lt;code&gt;λ&lt;/code&gt; just for fun.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; l&lt;span style=&#34;color:#eceff4&#34;&gt;))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rename &lt;code&gt;len&lt;/code&gt; → &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;len1&lt;/code&gt; → &lt;code&gt;rec&lt;/code&gt;, and just return the function without calling it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;self &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, we are ready… let&amp;rsquo;s go ahead an extract that part &lt;code&gt;(λ (lst) ...)&lt;/code&gt;: that&amp;rsquo;s the only part of this that knows anything about computing the length of lists. We&amp;rsquo;ll wrap the whole thing in a function called &lt;code&gt;mk_rec&lt;/code&gt; which takes a function of two arguments: the first argument we will pass &lt;code&gt;rec&lt;/code&gt; to, and the second is the actual argument to the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mk_rec fn_x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; takes two args: the recursive thingy and the argument&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;self &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fn_x rec x&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mk_rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                          &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; returns 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; fact &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mk_rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fact &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; returns 120&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that that isn&amp;rsquo;t actually the the Y combinator exactly. But hey we have recursion without using recursion!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Just for fun:&lt;/p&gt;
&lt;p&gt;Note that we &lt;strong&gt;could&lt;/strong&gt; have defined &lt;code&gt;let&lt;/code&gt; as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Source: FreeBSD &lt;code&gt;fortune&lt;/code&gt; files; this is probably my favorite quine ever.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Scare quotes intentional: you can&amp;rsquo;t have self-referential types in the simply-typed lambda calculus like you see here. The STLC is called &lt;em&gt;strongly normalizing&lt;/em&gt;, which means every well-typed term reduces to a value of that type. Thus, you can&amp;rsquo;t have something like the Y Combinator or Omega (&lt;code&gt;((λ (x) (x x)) (λ (y) (y y)))&lt;/code&gt;) because these could loop forever (diverge).&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Type Systems as Macros</title>
      <link>https://lambdaland.org/posts/2023-08-14_types_with_macros/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-08-14_types_with_macros/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a neat paper &lt;em&gt;Type Systems as Macros&lt;/em&gt; by Chang, Knauth, and Greenman [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] that describes how to implement a typed language using an untyped host language and macro expansion. The paper is neat, but I found the code hard to follow—the paper uses a compact notation that&amp;rsquo;s convenient for print, but not so much for reproducing on one&amp;rsquo;s own. This post is my attempt to implement and explain in more accessible terms what&amp;rsquo;s presented in the paper.&lt;/p&gt;
&lt;p&gt;The working source for the paper is available on &lt;a href=&#34;https://bitbucket.org/stchang/macrotypes/src/b2e4fc3033f6bd5cbbe738fa746f87dfe074e0ab/macrotypes/examples/popl2017/stlc-with-racket.rkt?at=popl2017-artifact#lines-60&#34;&gt;the first author&amp;rsquo;s BitBucket&lt;/a&gt;, but that code uses a lot of auxiliary helper files and it can still be pretty hard to follow.&lt;/p&gt;
&lt;p&gt;My implementation consists of a single file implemented in plain Racket. I try to keep as many of the function names the same, so hopefully it&amp;rsquo;s not too hard to follow if you&amp;rsquo;re coming from reading the paper. If you&amp;rsquo;re impatient to try running the code, the full example can be found at the bottom in &lt;a href=&#34;#full-solution&#34;&gt;§ Full solution&lt;/a&gt; or &lt;a href=&#34;https://codeberg.org/ashton314/understanding-turnstile&#34;&gt;on my Codeberg account&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;&lt;em&gt;If you haven&amp;rsquo;t read the paper, you can just skip this box: it&amp;rsquo;s meant to signpost to people who&amp;rsquo;ve read the paper what I&amp;rsquo;m going to be attempting to do different.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few specific things that tripped me up most were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;local-expand&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;In the paper, this function is only ever given one argument. The &lt;a href=&#34;https://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._local-expand%29%29&#34;&gt;real function in Racket&lt;/a&gt; takes 3 arguments. Moreover, this function can only be called &lt;em&gt;during&lt;/em&gt; macro-expansion, so you can&amp;rsquo;t play with it at the top level to understand it better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;General elision of &lt;code&gt;syntax-parse&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;The code makes &lt;em&gt;heavy&lt;/em&gt; use of &lt;a href=&#34;https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29&#34;&gt;&lt;code&gt;syntax-parse&lt;/code&gt;&lt;/a&gt;. However, the paper never shows it. It&amp;rsquo;s mentioned in a few footnotes, but for one who&amp;rsquo;s new to Racket&amp;rsquo;s macro-writing ecosystem, it&amp;rsquo;s hard to spot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding how to implement type environments:&lt;/p&gt;
&lt;p&gt;I got lost with the 
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://lambdaland.org/katex/katex.min.css&#34; /&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/katex.min.js&#34;&gt;&lt;/script&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;
  \(\bar{\lambda}\)
&lt;/span&gt;
 and the different highlighting patterns in the &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making sure the right functions are available at the right phases:&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m still new to Racket&amp;rsquo;s macro system, and phase-separation can be tricky to grok.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;a-few-terms&#34;&gt;
  A few terms
  &lt;a class=&#34;anchor&#34; href=&#34;#a-few-terms&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;A few terms that will crop up in this post:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Source language&lt;/dt&gt;
&lt;dd&gt;Generally, this refers to the input to a compiler or interpreter—it&amp;rsquo;s the language of the &lt;em&gt;source&lt;/em&gt; code that we want to eventually be able to write. In our specific case, this will be the simply typed lambda calculus.&lt;/dd&gt;
&lt;dt&gt;Target language&lt;/dt&gt;
&lt;dd&gt;Generally, the output of a compiler. For example, the target language of a compiler might be x86 assembly or WASM. In our case, we want to transform the typed source language (the simply typed lambda calculus) into the untyped target language of &lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;Procedural macro&lt;/dt&gt;
&lt;dd&gt;Procedural macros are ones that let you use the entire power of the language to operate on the AST you are transforming: you can write conditionals, loops, and even call functions on the AST under expansion. Contrast with pattern macros, like &lt;a href=&#34;https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming&#34;&gt;Rust&amp;rsquo;s macros made with &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/a&gt;, which match a pattern of syntax and transform that into new syntax just by filling holes in a pattern. Pattern macros are immensely useful, but their power is a strict subset of procedural macros.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;essentials-of-building-a-typed-language-with-macros&#34;&gt;
  Essentials of building a typed language with macros
  &lt;a class=&#34;anchor&#34; href=&#34;#essentials-of-building-a-typed-language-with-macros&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick look at the language we &lt;em&gt;want&lt;/em&gt; to write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Identify function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; λx :: a → a; in Racket notation, (→ a a)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Function call&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; λx :: (b → b) → (b → b) takes an argument of type b → b (which is what λy is)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ b b&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;y : b&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; More complicated function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; λfx :: (a → b) → a → b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;f : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ a b&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our macros should expand, check, and rewrite this into something that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Identify function again&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Function call&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; More complicated function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the types have been erased. The trick is: we want to do this so that we catch any type errors. That way, if we mistakenly write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;f : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ a b&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x : c&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; x is the wrong type!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We should get a compile-time type error, and our macros will refuse to expand this into plain Racket.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; play_stlc.rkt:16:27: #%app: play_stlc.rkt: Function expected args with type (a), got type (c) instead&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How are we going to do this? Basically, we want to interpose on every function creation and function call to check that the types at these locations line up. We&amp;rsquo;ll be working with a very simple language, but this kind of work generalizes to the kinds of languages you&amp;rsquo;re used to working with.&lt;/p&gt;
&lt;p&gt;The overall architecture looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/stlc_to_racket.svg&#34;
    alt=&#34;Figure 1: Transforming STLC to Racket via macros&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Transforming STLC to Racket via macros&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The important thing to remember is this: expanding &lt;em&gt;erases types&lt;/em&gt; and &lt;em&gt;attaches type information&lt;/em&gt; to the resulting syntax while &lt;em&gt;checking that the types are consistent&lt;/em&gt; throughout expansion.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;Expanding syntax with type annotations does two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Resulting syntax has all the type annotations erased.&lt;/li&gt;
&lt;li&gt;Resulting syntax has its type stored as a &lt;em&gt;syntax property&lt;/em&gt;&amp;mdash;just some metadata on the AST node.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout this paper, we will use notation like &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;e&lt;/code&gt; to refer to syntax from the source language—type annotations and all—and &lt;code&gt;x-&lt;/code&gt; and &lt;code&gt;e-&lt;/code&gt; to refer to syntax that has had the types &lt;em&gt;erased&lt;/em&gt; from the source, and added as metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at how we would implement that middle block.&lt;/p&gt;
&lt;h2 id=&#34;interposing-on-every-function-definition-and-call-site&#34;&gt;
  Interposing on every function definition and call site
  &lt;a class=&#34;anchor&#34; href=&#34;#interposing-on-every-function-definition-and-call-site&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is to be able to inspect every function definition and call site. In other languages, this might only be possible by writing some kind of wrapping macro that walks down the AST of your entire module and replaces ordinary function calls into a call to a macro you control.&lt;/p&gt;
&lt;p&gt;However, we&amp;rsquo;re using Racket, and Racket is designed to make language construction easy! Racket&amp;rsquo;s reader will expand function calls like &lt;code&gt;(foo bar baz)&lt;/code&gt; into calls to a special function &lt;code&gt;#%app&lt;/code&gt;: &lt;code&gt;(#%app foo bar baz)&lt;/code&gt;. We can override what this symbol refers to when our code gets imported as a &lt;code&gt;#lang&lt;/code&gt; with &lt;code&gt;rename-out&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; syntax/parse/define&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%module-begin&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%top-interaction&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; needed for #lang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#424853&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;rename-out&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-app &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#424853&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-λ &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 1:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;The highlighted portion means to rename &lt;code&gt;checked-app&lt;/code&gt; to &lt;code&gt;#%app&lt;/code&gt; and &lt;code&gt;checked-λ&lt;/code&gt; to &lt;code&gt;λ&lt;/code&gt; in the requiring module&amp;rsquo;s scope. See the &lt;a href=&#34;https://docs.racket-lang.org/guide/hash-languages.html&#34;&gt;docs on #lang creation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;With that in place, we can write some macros &lt;code&gt;checked-app&lt;/code&gt; and &lt;code&gt;checked-λ&lt;/code&gt; which will then be used when we import &lt;code&gt;stlc.rkt&lt;/code&gt; as a &lt;code&gt;#lang&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-app stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; …&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-λ stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; …&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 2:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;s-exp&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stlc.rkt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; This λ referrs to checked-λ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 3:&lt;/span&gt;
  &lt;code&gt;play_stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;h2 id=&#34;implementing-the-checks&#34;&gt;
  Implementing the checks
  &lt;a class=&#34;anchor&#34; href=&#34;#implementing-the-checks&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve seen a few clever tricks that we can exploit in Racket to automatically interpose on every function definition and call. Now we begin the type checking.&lt;/p&gt;
&lt;h3 id=&#34;core-macros&#34;&gt;
  Core macros
  &lt;a class=&#34;anchor&#34; href=&#34;#core-macros&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s first take a look at the stars of the show: &lt;code&gt;checked-λ&lt;/code&gt; and &lt;code&gt;checked-app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember: these are macros that our source language will use under the names &lt;code&gt;λ&lt;/code&gt; and whenever there&amp;rsquo;s a normal function call. These macros need to expand to &lt;em&gt;untyped Racket&lt;/em&gt;, albeit with the type information added as a syntax property.&lt;/p&gt;
&lt;h4 id=&#34;first-macro-checked-λ&#34;&gt;
  First macro: &lt;code&gt;checked-λ&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#first-macro-checked-%ce%bb&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-48&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-48&#34;&gt;48&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-49&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-49&#34;&gt;49&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-50&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-50&#34;&gt;50&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-51&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-51&#34;&gt;51&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-52&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-52&#34;&gt;52&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-53&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-53&#34;&gt;53&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-54&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-54&#34;&gt;54&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-55&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-55&#34;&gt;55&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-56&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-56&#34;&gt;56&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-λ stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;~literal :&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;pat&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-xs -e τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp-erase&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:do&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;derived ~a :: ~a → ~a&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; -xs -e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;))]))&lt;/span&gt;                       &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lam-return&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 4:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;re defining a macro &lt;code&gt;checked-λ&lt;/code&gt;, which is invoked any time a &lt;code&gt;λ&lt;/code&gt; is used in the module requiring this one, thanks to the &lt;code&gt;rename-out&lt;/code&gt; bit.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re using the excellent &lt;a href=&#34;https://docs.racket-lang.org/syntax/Parsing_Syntax.html&#34;&gt;&lt;code&gt;syntax-parse&lt;/code&gt;&lt;/a&gt; macro, introduced in [&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;2&lt;/a&gt;] I believe. &lt;code&gt;syntax-parse&lt;/code&gt; gives us fancy keywords like &lt;code&gt;#:with&lt;/code&gt;, &lt;code&gt;#:when&lt;/code&gt;, and &lt;code&gt;#:fail-unless&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; which gives us a rich language to build macros with.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s step through this line-by-line.&lt;/p&gt;
&lt;p&gt;The line &lt;a href=&#34;#org-coderef--af17f2-50&#34;&gt;pat&lt;/a&gt; describes the pattern we&amp;rsquo;re matching in &lt;code&gt;stx&lt;/code&gt;: &lt;code&gt;_&lt;/code&gt; is a wildcard, and in our case will just match &lt;code&gt;checked-λ&lt;/code&gt;. Next we have a list with elements looking like &lt;code&gt;[var_name : type_name]&lt;/code&gt;. We bind all the variable names to &lt;code&gt;x&lt;/code&gt; and the corresponding types to &lt;code&gt;τ_in&lt;/code&gt;. Finally we bind some expression to the variable &lt;code&gt;e&lt;/code&gt;. Syntax like &lt;code&gt;(checked-λ ([x : a] [y : (→ a b)]) (y x))&lt;/code&gt; should match this.&lt;/p&gt;
&lt;p&gt;The next line &lt;a href=&#34;#org-coderef--af17f2-51&#34;&gt;comp-erase&lt;/a&gt; calls a helper function &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; (yes that&amp;rsquo;s a mouthful) to &lt;em&gt;compute&lt;/em&gt; the type of the body whilst &lt;em&gt;erasing&lt;/em&gt; the type annotations at the same time. Moreover, it should do this type computation in the &lt;em&gt;context&lt;/em&gt; of the variables &lt;code&gt;x ...&lt;/code&gt; and their types &lt;code&gt;τ_in ...&lt;/code&gt;. This just means that when computing the type of the body of &lt;code&gt;(λ ([x : Int]) {lambda body here...})&lt;/code&gt;, it should know that variable &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; returns three things:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;-xs&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;the variables &lt;code&gt;x ...&lt;/code&gt; but with the type annotations erased&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;the body &lt;code&gt;e&lt;/code&gt; but, again, with the type annotations erased from the source&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;τ_out&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;the derived return type of the function&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;We&amp;rsquo;ll dig into how this function works in &lt;a href=&#34;#support-functions-compute-and-erase-types&#34;&gt;Support functions: compute and erase types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;printf&lt;/code&gt; just shows us some pretty information about the work that the macro type checker is doing. It&amp;rsquo;s not necessary and you could delete lines 52–55 with no consequences.&lt;/p&gt;
&lt;p&gt;In the final line &lt;a href=&#34;#org-coderef--af17f2-56&#34;&gt;lam-return&lt;/a&gt; we return some new syntax &lt;code&gt;#&#39;(λ -xs -e)&lt;/code&gt;. Note that this bit of syntax has &lt;em&gt;no type annotations!&lt;/em&gt; We do add the type to this bit of syntax with &lt;code&gt;add-τ&lt;/code&gt;&amp;mdash;we will need this later. The type of a λ is an arrow type with arguments provided by the type annotations on the arguments, and the return type of the function supplied by the derived type of the expression from the &lt;a href=&#34;#org-coderef--af17f2-51&#34;&gt;comp-erase&lt;/a&gt; line.&lt;/p&gt;
&lt;p&gt;Remember: when our macros expand, they &lt;em&gt;check&lt;/em&gt; the types and &lt;em&gt;erase&lt;/em&gt; them. We don&amp;rsquo;t have any checks to do here in &lt;code&gt;checked-λ&lt;/code&gt;, but the type information we&amp;rsquo;ve added will come in handy when we check the arguments to this function in the next macro.&lt;/p&gt;
&lt;h4 id=&#34;second-macro-checked-app&#34;&gt;
  Second macro: &lt;code&gt;checked-app&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#second-macro-checked-app&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-58&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-58&#34;&gt;58&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-59&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-59&#34;&gt;59&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-60&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-60&#34;&gt;60&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-61&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-61&#34;&gt;61&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-62&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-62&#34;&gt;62&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-63&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-63&#34;&gt;63&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-64&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-64&#34;&gt;64&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-65&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-65&#34;&gt;65&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-66&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-66&#34;&gt;66&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-67&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-67&#34;&gt;67&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-68&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-68&#34;&gt;68&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-app stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; e_fn e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;app-pat&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-e_fn &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e_fn&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fn-type&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e_arg τ_arg&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx-map comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arg-types&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:fail-unless&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;typecheck&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;~a: Function expected args with type ~a, got type ~a instead&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-source&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt; -e_fn -e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]))&lt;/span&gt;                               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;app-return&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 5:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;Like before, let&amp;rsquo;s go through this line-by-line.&lt;/p&gt;
&lt;p&gt;The line &lt;a href=&#34;#org-coderef--2e3794-60&#34;&gt;app-pat&lt;/a&gt; describes the pattern for function application: the first thing you see &lt;code&gt;e_fn&lt;/code&gt; is a function, and the rest &lt;code&gt;e_arg ...&lt;/code&gt; are arguments.&lt;/p&gt;
&lt;p&gt;Next, in &lt;a href=&#34;#org-coderef--2e3794-61&#34;&gt;fn-type&lt;/a&gt; we &lt;em&gt;expand&lt;/em&gt; the syntax of the function, which means the syntax we get back (&lt;code&gt;-e_fn&lt;/code&gt;) has &lt;em&gt;passed type checking&lt;/em&gt; and now has the type annotations &lt;em&gt;erased&lt;/em&gt;. The erased syntax does have its type stuck on it, &lt;a href=&#34;#org-coderef--af17f2-56&#34;&gt;lam-return&lt;/a&gt; which we retrieve in &lt;code&gt;comp+erase-τ&lt;/code&gt; with &lt;code&gt;get-τ&lt;/code&gt; and store in &lt;code&gt;τ_in ... τ_out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we compute the types of the arguments using the same function &lt;code&gt;comp+erase-τ&lt;/code&gt;; this time we use &lt;code&gt;stx-map&lt;/code&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to map over the syntax object &lt;code&gt;#&#39;(e_arg …)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once we have the type of the function &lt;code&gt;(→ τ_in ... τ_out)&lt;/code&gt; and the types of the arguments &lt;code&gt;(τ_arg ...)&lt;/code&gt; it becomes a simple matter to check that these types match. &lt;a href=&#34;#org-coderef--2e3794-63&#34;&gt;typecheck&lt;/a&gt; If they don&amp;rsquo;t, the &lt;code&gt;#:fail-unless&lt;/code&gt; keyword will break the macro expansion with a parse error and will display a nicely-formatted message, complete with source information from &lt;code&gt;syntax-source&lt;/code&gt; as well as expected and received types.&lt;/p&gt;
&lt;p&gt;Like with &lt;code&gt;checked-λ&lt;/code&gt;, we return the function application with all the type annotations erased in both the function and the arguments, but we tack on the function&amp;rsquo;s return type &lt;code&gt;τ_out&lt;/code&gt; to the syntax we build and return: &lt;code&gt;#&#39;(#%app -e_fn -e_arg ...)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;You might be wondering why we have to use &lt;code&gt;stx-map&lt;/code&gt;. A short answer is this: the &lt;code&gt;e_arg&lt;/code&gt; variable is a &lt;em&gt;template variable&lt;/em&gt;, which means we can&amp;rsquo;t pass it directly to &lt;code&gt;comp+erase-τ&lt;/code&gt;: we have to use it in a syntax pattern (which we get from &lt;code&gt;#&#39;&lt;/code&gt;) but then we have some syntax, not a list.&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; use &lt;a href=&#34;https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28quote._~23~25kernel%29._syntax-~3elist%29%29&#34;&gt;&lt;code&gt;syntax-&amp;gt;list&lt;/code&gt;&lt;/a&gt; here to map over the list, as this only converts the top-most layer of syntax into a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e_arg τ_arg&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;map&lt;/span&gt; comp+erase-τ &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it&amp;rsquo;s not too much trouble to bring &lt;code&gt;stx-map&lt;/code&gt; into scope with &lt;code&gt;(require syntax/stx)&lt;/code&gt;, so I just went with that.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;support-functions-compute-and-erase-types&#34;&gt;
  Support functions: compute and erase types
  &lt;a class=&#34;anchor&#34; href=&#34;#support-functions-compute-and-erase-types&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve covered the major macros, but now we need to inspect the helper functions &lt;code&gt;comp+erase-τ&lt;/code&gt; and &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;computing-and-erasing-types-comp-plus-erase-τ&#34;&gt;
  Computing and erasing types: &lt;code&gt;comp+erase-τ&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#computing-and-erasing-types-comp-plus-erase-%cf%84&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The first support function that we need is &lt;code&gt;comp+erase-τ&lt;/code&gt;, which we call from the &lt;a href=&#34;#second-macro-checked-app&#34;&gt;&lt;code&gt;checked-app&lt;/code&gt;&lt;/a&gt; macro on lines &lt;a href=&#34;#org-coderef--2e3794-61&#34;&gt;fn-type&lt;/a&gt; and &lt;a href=&#34;#org-coderef--2e3794-62&#34;&gt;arg-types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that we do &lt;strong&gt;not&lt;/strong&gt; &lt;em&gt;expand&lt;/em&gt; to a call to &lt;code&gt;comp+erase-τ&lt;/code&gt; with the &lt;code&gt;checked-app&lt;/code&gt; macro—we &lt;em&gt;call&lt;/em&gt; this function _as part of expansion_​—i.e. this function gets called at compile-time.&lt;/p&gt;
&lt;p&gt;Normally we define functions with &lt;code&gt;define&lt;/code&gt;. But, because we need this function to be available for macros to call, we use &lt;code&gt;define-for-syntax&lt;/code&gt;. This makes the function available at compile time. More about this in &lt;a href=&#34;#putting-the-phases-together&#34;&gt;§ Putting the phases together&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx e&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;τ &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ -e&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;-e &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This function is pretty simple: we take in some syntax &lt;code&gt;e&lt;/code&gt;, expand the macros in &lt;code&gt;e&lt;/code&gt; to get &lt;code&gt;-e&lt;/code&gt;, which is just the same as &lt;code&gt;e&lt;/code&gt;, but with all the type annotations erased and some type information added as a syntax property. Then we use a helper function &lt;code&gt;get-τ&lt;/code&gt; (defined in &lt;a href=&#34;#convenience-functions-working-with-type-information&#34;&gt;§ Convenience functions&lt;/a&gt;) to pull the type off of &lt;code&gt;-e&lt;/code&gt;. Finally we return &lt;code&gt;-e&lt;/code&gt; and its associated type &lt;code&gt;τ&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;again-but-with-context-comp-plus-erase-τ-ctx&#34;&gt;
  Again, but with context: &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#again-but-with-context-comp-plus-erase-%cf%84-ctx&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Now we need to do the same thing, but this time, we&amp;rsquo;ll be adding a &lt;em&gt;context&lt;/em&gt; to the expansion.&lt;/p&gt;
&lt;p&gt;What is a context? Consider the following function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : Int&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;y : Bool&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;… body using variables x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; y …&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside the body of the function, we need to somehow remember that the variable &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; has type &lt;code&gt;Bool&lt;/code&gt;. That way, if we run into something like &lt;code&gt;(+ x y)&lt;/code&gt; we can know that &lt;code&gt;y&lt;/code&gt; isn&amp;rsquo;t the right type for that operation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; does the same thing and &lt;code&gt;comp+erase-τ&lt;/code&gt;, but we add a context, which is just a list of variable ↦ type mappings. Like &lt;code&gt;comp+erase-τ&lt;/code&gt;, we define &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; with &lt;code&gt;define-for-syntax&lt;/code&gt; so it&amp;rsquo;s available for &lt;code&gt;checked-λ&lt;/code&gt; to use at compile time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-1&#34;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-2&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-2&#34;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-3&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-3&#34;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-4&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-4&#34;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-5&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-5&#34;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-6&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-6&#34;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-7&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-7&#34;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-8&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-8&#34;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-9&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-9&#34;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-10&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-10&#34;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-11&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-11&#34;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx e ctx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse ctx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[([&lt;/span&gt;x τ&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                                          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ctx-destruct&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                                       &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;temps&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;generate-temporaries&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; xs- e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;erased-version&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rename-transformer&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#81a1c1&#34;&gt;#,&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; τ_out &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;body-type&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;xs- e- τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We use &lt;code&gt;syntax-parse&lt;/code&gt; here just to destruct the list of variable ↦ type pairs &lt;code&gt;[x τ]&lt;/code&gt; from &lt;code&gt;ctx&lt;/code&gt;. &lt;a href=&#34;#org-coderef--4433b8-3&#34;&gt;ctx-destruct&lt;/a&gt; Then, for each of the variables &lt;code&gt;x ...&lt;/code&gt;, we create a brand new variables &lt;code&gt;y ...&lt;/code&gt; with &lt;a href=&#34;https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._generate-temporaries%29%29&#34;&gt;&lt;code&gt;generate-temporaries&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;#org-coderef--4433b8-4&#34;&gt;temps&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;I&amp;rsquo;ll talk about variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;τ&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; in this next section. Remember that these are all &lt;em&gt;template variables&lt;/em&gt; in a repetition &lt;code&gt;...&lt;/code&gt;. This means that &lt;code&gt;x&lt;/code&gt; has to show up in some expression that has one &lt;code&gt;...&lt;/code&gt; after it, and it will repeat that template fragment for every item that &lt;code&gt;x&lt;/code&gt; matched against. See &lt;a href=&#34;https://docs.racket-lang.org/guide/pattern-macros.html#%28part._.Matching_.Sequences%29&#34;&gt;the guide on matching sequences&lt;/a&gt; if you need a primer or a refresher.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now comes the tricky bit: we&amp;rsquo;d like to expand &lt;code&gt;e&lt;/code&gt;, but remembering that a given variable &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;τ&lt;/code&gt;. To accomplish this, we do something a little sneaky: we create a lexically-scoped macro with &lt;a href=&#34;https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let-syntax%29%29&#34;&gt;&lt;code&gt;let-syntax&lt;/code&gt;&lt;/a&gt; that has the name &lt;code&gt;x&lt;/code&gt;. We bind this to a macro that expands to the brand new variable &lt;code&gt;y&lt;/code&gt; that has the type information for &lt;code&gt;x&lt;/code&gt; attached to it.&lt;/p&gt;
&lt;p&gt;This is what the &lt;code&gt;let-syntax&lt;/code&gt; and &lt;a href=&#34;https://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._make-rename-transformer%29%29&#34;&gt;&lt;code&gt;make-rename-transformer&lt;/code&gt;&lt;/a&gt; bit does: it makes a macro that can expand in places &lt;em&gt;other&lt;/em&gt; than application positions, (i.e. identifier position) along with a host of other convenience functions.&lt;/p&gt;
&lt;p&gt;So, starting with a lambda like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;a : Int&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;b : Bool&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; b &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; creates some new syntax that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y_tmp1 y_tmp2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;a &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y_tmp1 &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;Int&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;b &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y_tmp2 &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;Bool&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; b &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which gets expanded into:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y_tmp1 y_tmp2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#424853&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; y_tmp2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; y_tmp1&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But the symbols &lt;code&gt;y_tmp2&lt;/code&gt; and &lt;code&gt;y_tmp1&lt;/code&gt; on the second line have extra type information attached to them to help with the remainder of the type checking: &lt;code&gt;add-τ&lt;/code&gt; simply returns the syntax you gave it in the first place, but with the second thing attached as type metadata.&lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;ve expanded the body &lt;code&gt;e&lt;/code&gt; of the original &lt;code&gt;λ&lt;/code&gt; that we got but with the variables and the type information added as context. Now we simply pull off the type data for the body—i.e. the function return type—with &lt;code&gt;(get-τ e-)&lt;/code&gt; and return the erased variables, body, and function return type.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;(Ab)using &lt;code&gt;λ&lt;/code&gt; forms this way is a convenient hack for us to get the correct behavior: we don&amp;rsquo;t have to worry about any of the scoping rules of the language because Racket&amp;rsquo;s macro expander will just Do the Right Thing™—we get the proper semantics for free.&lt;/p&gt;
&lt;p&gt;In languages where you &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; use macros outside of function-call position, you&amp;rsquo;ll have to come up with another way to realize type environments. One way you might do this is to start passing around a structure mapping symbols to types. You&amp;rsquo;ll have to be careful as you walk down your AST that you respect scoping rules.&lt;/p&gt;
&lt;p&gt;If you figure something clever out, please let me know what you did—I&amp;rsquo;d be curious to see how other languages solve this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Normally we wouldn&amp;rsquo;t have to worry about details like this, but because of how we&amp;rsquo;re using &lt;code&gt;local-expand&lt;/code&gt; via &lt;code&gt;expand-stx&lt;/code&gt; and the &lt;code&gt;let-syntax&lt;/code&gt; clause inside the macro, the body of the λ gets wrapped in two layers of &lt;code&gt;let-values&lt;/code&gt;, so we end up having to destructure all of that. The &lt;em&gt;real&lt;/em&gt; implementation of &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; ends up looking a little messier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx e ctx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse ctx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[([&lt;/span&gt;x τ&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;generate-temporaries&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Not sure why I need to unwrap the let-values… must be something with how&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Racket automatically wraps the body of λ&amp;#39;s.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; This is consistent with the paper&amp;#39;s implementation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%plain-lambda&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; xs- &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; e-&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#,&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; τ_out &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;xs- e- τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;~literal&lt;/code&gt; just tells the pattern matching that we&amp;rsquo;re looking for the identifier &lt;code&gt;let-values&lt;/code&gt; in the syntax, and we&amp;rsquo;re not trying to have some variable named &lt;code&gt;let-values&lt;/code&gt; that we&amp;rsquo;d like to bind to whatever is there.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;convenience-functions-working-with-type-information&#34;&gt;
  Convenience functions: working with type information
  &lt;a class=&#34;anchor&#34; href=&#34;#convenience-functions-working-with-type-information&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We are going to go from explicitly typed code to untyped code, but with type annotations on the syntax objects (AST nodes). It happens to be a convenient place to put the derived type of the data, but there&amp;rsquo;s nothing intrinsically important about this, as long as you can tie a particular syntax object back to its derived type somehow.&lt;/p&gt;
&lt;p&gt;We define two functions: &lt;code&gt;add-τ&lt;/code&gt; and &lt;code&gt;get-τ&lt;/code&gt; to put and fetch data into the &lt;code&gt;&#39;type&lt;/code&gt; field of a &lt;code&gt;syntax&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Convenience functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ e t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 6:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;We also define type equality here. For this demo, type quality is syntactic equality in the type. E.g. &lt;code&gt;a ≡ a&lt;/code&gt; and &lt;code&gt;a → b ≡ a → b&lt;/code&gt;, but &lt;code&gt;a ≢ b&lt;/code&gt; and &lt;code&gt;a → a ≢ b → b&lt;/code&gt;. This is a choice we&amp;rsquo;re making to keep things simple. It&amp;rsquo;s possible (and the authors in [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] do this) to define alternate type comparison operations to support existential types as well as subtyping.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Dumb equality check: just check for syntactic equality&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= t1s t2s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t1s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t2s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;equal?&lt;/span&gt; t1 t2&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 7:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;We will want one small piece of convenience code in the next part:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax-rule&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;local-expand&lt;/span&gt; stx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;expression&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 8:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;local-expand&lt;/code&gt; is a function that takes some syntax and expands all the macros in it. It&amp;rsquo;s a &lt;em&gt;little&lt;/em&gt; more complicated than that: &lt;code&gt;local-expand&lt;/code&gt; expands the syntax in the lexical context of the currently expanding expression. What that means is that you can only call &lt;code&gt;local-expand&lt;/code&gt; during macro expansion. This makes it hard to play with at the top-level REPL as a Lisp/Scheme is wont to do. If you are wanting to play around in the REPL, &lt;code&gt;expand&lt;/code&gt; and &lt;code&gt;expand-once&lt;/code&gt; are your friends. Inside our use case, expanding in the lexical context of the currently expanding macro makes this macro expansion safer.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expand-stx&lt;/code&gt; simply makes it so we don&amp;rsquo;t have to include so many arguments to &lt;code&gt;local-expand&lt;/code&gt;, as they&amp;rsquo;d be the same every time we call it. See the &lt;a href=&#34;https://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._local-expand%29%29&#34;&gt;documentation for &lt;code&gt;local-expand&lt;/code&gt;&lt;/a&gt; for more details on what these arguments do.&lt;/p&gt;
&lt;h2 id=&#34;putting-the-phases-together&#34;&gt;
  Putting the phases together
  &lt;a class=&#34;anchor&#34; href=&#34;#putting-the-phases-together&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve covered all the essential bits, but we haven&amp;rsquo;t talked about what functions need to be available when: this isn&amp;rsquo;t such a big deal in Lisp or Scheme when you can call pretty much any function from any macro, but Racket takes great pains to ensure that there is a clear dependency graph between macro expansion time and runtime. See Flatt&amp;rsquo;s &lt;span class=&#34;underline&#34;&gt;Composable and Compilable Macros: You want it &lt;em&gt;when?&lt;/em&gt;&lt;/span&gt; paper [&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;3&lt;/a&gt;] for all the details you could ever want on this. That paper does a good job of motivating why you need clear phase separation.&lt;/p&gt;
&lt;p&gt;That said, let&amp;rsquo;s talk about the dependency graph of the functions and macros in our code.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/macro_types_dep_graph.svg&#34;
    alt=&#34;Figure 2: Dependency graph: functions are blue, macros are green.&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 2: &lt;/span&gt;Dependency graph: functions are blue, macros are green.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Normally, functions are defined at phase level 0, which is the &amp;ldquo;runtime&amp;rdquo; phase of the module. Macros are defined at phase level 1, which is the &amp;ldquo;compile time&amp;rdquo; or &amp;ldquo;expand time&amp;rdquo; phase. You can only refer to things defined at the same or higher phase level. So, normally, macros can&amp;rsquo;t call functions in the same module.&lt;/p&gt;
&lt;p&gt;Our two main macros, &lt;code&gt;checked-λ&lt;/code&gt; and &lt;code&gt;checked-app&lt;/code&gt;, both depend on the functions &lt;code&gt;comp+erase-τ&lt;/code&gt; and &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt;, along with a few other auxiliary functions. These functions in turn depend on the &lt;code&gt;expand-stx&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;The purple box is at phase level 1, since &lt;code&gt;checked-λ&lt;/code&gt; and &lt;code&gt;checked-app&lt;/code&gt; are both macros. Normally, the functions in the orange box would be at phase level 0, and would be unavailable for our macros. However, we can &lt;em&gt;raise&lt;/em&gt; the phase level by using &lt;code&gt;define-for-syntax&lt;/code&gt; instead of &lt;code&gt;define&lt;/code&gt;, or wrap the things we need at a higher phase level in &lt;code&gt;begin-for-syntax&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All the functions now at phase level 1 use the &lt;code&gt;expand-stx&lt;/code&gt; macro, so &lt;em&gt;it&lt;/em&gt; has to be defined at phase level 2—we can simply put the &lt;code&gt;define-syntax&lt;/code&gt;&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; inside of &lt;code&gt;define-for-syntax&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! The full solution below puts all the functions together at the right phases.&lt;/p&gt;
&lt;h2 id=&#34;full-solution&#34;&gt;
  Full solution
  &lt;a class=&#34;anchor&#34; href=&#34;#full-solution&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The code can also be cloned from &lt;a href=&#34;https://codeberg.org/ashton314/understanding-turnstile&#34;&gt;my Git repository on Codeberg&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;68
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; The Simply Typed Lambda Calculus&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; syntax/parse/define&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; make this a sensible #lang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%module-begin&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%top-interaction&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;rename-out&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-app &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-λ &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;begin-for-syntax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; syntax/stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; needed for stx-map&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Shorthand to expand macros in syntax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Yes, this is a macro for use inside other macros (or functions at phase level 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax-rule&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;local-expand&lt;/span&gt; stx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;expression&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Convenience functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ e t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Dumb equality check: just check for syntactic equality&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= t1s t2s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t1s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t2s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;equal?&lt;/span&gt; t1 t2&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx e&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;τ &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ -e&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;-e &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx e ctx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse ctx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[([&lt;/span&gt;x τ&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;generate-temporaries&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Not sure why I need to unwrap the let-values… must be something with how&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Racket automatically wraps the body of λ&amp;#39;s.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; This is consistent with the paper&amp;#39;s implementation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%plain-lambda&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; xs- &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; e-&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#,&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; τ_out &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;xs- e- τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-λ stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;~datum :&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-xs -e τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:do&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;derived ~a :: ~a → ~a&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; -xs -e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;))]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-app stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; e_fn e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-e_fn &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e_fn&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e_arg τ_arg&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx-map comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:fail-unless&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;~a: Function expected args with type ~a, got type ~a instead&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-source&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt; -e_fn -e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 9:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;s-exp&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stlc.rkt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Smallest example: function a → a (in Racket notation, (→ a a))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; a bigger example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ b b&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;y : b&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; ;; Functions!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;f : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ a b&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; an example of an ill-typed expression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; ((λ ([x : (→ b b)]) x) (λ ([f : (→ b c)] [y : b]) (f y)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 10:&lt;/span&gt;
  &lt;code&gt;play_stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;h2 id=&#34;acknowledgments&#34;&gt;
  Acknowledgments
  &lt;a class=&#34;anchor&#34; href=&#34;#acknowledgments&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks to Ben Greenman for reading and providing suggestions and improvements on this post.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;style&gt;.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[1]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Chang, S., Knauth, A. and Greenman, B. 2017. &lt;a href=&#34;https://doi.org/10.1145/3009837.3009886&#34;&gt;Type systems as macros&lt;/a&gt;. &lt;i&gt;Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages - POPL 2017&lt;/i&gt; (Paris, France, 2017), 694–705.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[2]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Culpepper, R. 2012. Fortifying macros. &lt;i&gt;Journal of functional programming&lt;/i&gt;. 22, 4-5 (Sep. 2012), 439–476. DOI:&lt;a href=&#34;https://doi.org/10.1017/S0956796812000275&#34;&gt;https://doi.org/10.1017/S0956796812000275&lt;/a&gt;.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[3]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Flatt, M. 2002. &lt;a href=&#34;https://doi.org/10.1145/581478.581486&#34;&gt;Composable and compilable macros: You want it when?&lt;/a&gt; &lt;i&gt;Proceedings of the seventh ACM SIGPLAN international conference on Functional programming&lt;/i&gt; (New York, NY, USA, Sep. 2002), 72–83.&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The full list of pattern directives can be found &lt;a href=&#34;https://docs.racket-lang.org/syntax/stxparse-specifying.html#%28tech._pattern._directive%29&#34;&gt;here&lt;/a&gt; in the documentation.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;You should be using &lt;code&gt;syntax-parse&lt;/code&gt; to write anything more complex than a basic &amp;ldquo;macro-by-example&amp;rdquo;. I have an &lt;a href=&#34;https://lambdaland.org/posts/2023-05-19_racket_macros/&#34;&gt;out-of-date blog post&lt;/a&gt; comparing a few ways to write macros in Racket. In the words of Ben Greenman, &amp;ldquo;syntax-case is old baggage!&amp;rdquo;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Required with &lt;code&gt;(require syntax/stx)&lt;/code&gt;.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;It&amp;rsquo;s a &lt;em&gt;little&lt;/em&gt; more complicated than that: what I said is actually what &lt;code&gt;~datum&lt;/code&gt; does. &lt;code&gt;~literal&lt;/code&gt; considers bindings: it&amp;rsquo;s looking for something that&amp;rsquo;s bound to whatever &lt;code&gt;~let-syntax&lt;/code&gt; is bound to. In the simplest case, it just matches &lt;code&gt;let-syntax&lt;/code&gt; because it&amp;rsquo;s binding hasn&amp;rsquo;t changed. See the &lt;a href=&#34;https://docs.racket-lang.org/syntax/stxparse-patterns.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._~7eliteral%29%29&#34;&gt;docs for &lt;code&gt;~literal&lt;/code&gt;&lt;/a&gt; for more information.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;This macro is simple enough that we&amp;rsquo;ll just use &lt;code&gt;define-syntax-rule&lt;/code&gt;.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reflections one year into a PhD program</title>
      <link>https://lambdaland.org/posts/2023-08-05_one_year_into_phd/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-08-05_one_year_into_phd/</guid>
      <description>&lt;p&gt;I started my PhD program about a year ago. In my first year I have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Taken 4 &amp;ldquo;normal&amp;rdquo; 3-credit-hour classes&lt;/li&gt;
&lt;li&gt;Participated in 3 seminars&lt;/li&gt;
&lt;li&gt;Switched advisors&lt;/li&gt;
&lt;li&gt;Attended 2 conferences (PLDI @ FCRC, JuliaCon)&lt;/li&gt;
&lt;li&gt;Presented my work at JuliaCon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s been a lot of work, and there&amp;rsquo;s been a lot of stress. I&amp;rsquo;m in a much better place now than when I started, and over all I&amp;rsquo;m happy where I&amp;rsquo;m at and where I&amp;rsquo;m headed.&lt;/p&gt;
&lt;h2 id=&#34;changing-advisors&#34;&gt;
  Changing advisors
  &lt;a class=&#34;anchor&#34; href=&#34;#changing-advisors&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Some of the stress has come from finances: it&amp;rsquo;s hard to support a family on a PhD stipend with rising costs of living.&lt;/p&gt;
&lt;p&gt;The most stress I felt was in my first semester. I got hired on as an RA&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with a nice researcher and we hit it off well. But I discovered half way through the semester that I was not enjoying the work. This wasn&amp;rsquo;t anyone&amp;rsquo;s fault—I had to do a little bit of the work to find out that I wasn&amp;rsquo;t that interested in what I was doing.&lt;/p&gt;
&lt;p&gt;At first I thought that I might be able to power through. I didn&amp;rsquo;t want to be the kind of student that hops from advisor to advisor or from project to project just as the going gets tough, boring, or unpleasant. But I talked with &lt;a href=&#34;https://kimball.germane.net/&#34;&gt;my advisor from undergrad&lt;/a&gt;, and he explained that a PhD sets the tone of your research basically until you get tenure. That&amp;rsquo;s a long time—and I didn&amp;rsquo;t want to work in that area for a decade or better. I realized that I either had to change what I was working on, or I needed to quit and go back to industry.&lt;/p&gt;
&lt;p&gt;I started looking around at what my options were. My school assigns every grad student a &amp;ldquo;faculty mentor&amp;rdquo;—a faculty member who is not your advisor that&amp;rsquo;s &amp;ldquo;assigned&amp;rdquo; to you. In my experience, most professors are more than happy to talk to you if you need help—this one just happened to be assigned to me. At some point I discovered that &lt;a href=&#34;https://cs.brown.edu/people/bgreenma/&#34;&gt;Ben Greenman&lt;/a&gt; was coming to the U as a professor. I called him, we talked, and we figured out that our interests were much more closely aligned. Problem was, Ben wasn&amp;rsquo;t starting at the U until the fall. I found a fellowship for one semester, and was able to do work with Ben and another professor through the summer.&lt;/p&gt;
&lt;p&gt;Finding an advisor whose interests aligned with mine was a &lt;em&gt;huge&lt;/em&gt; improvement for my work and my mental health. If you are looking into going to grad school, I would make that your top priority. And it wasn&amp;rsquo;t that my first advisor was &lt;em&gt;bad&lt;/em&gt; in any way—we&amp;rsquo;re still friends, we chat when we run into each other in the hall, and I learned a lot from him—it&amp;rsquo;s just that our interests were less aligned than I originally thought, and it took a little time to discover that. Better sooner rather than later, though.&lt;/p&gt;
&lt;h2 id=&#34;reading-papers&#34;&gt;
  Reading papers
  &lt;a class=&#34;anchor&#34; href=&#34;#reading-papers&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;One thing I noticed this week that made me really happy: reading research papers is a lot easier for me now. When I started getting interested in research back in my undergrad, I found reading papers to be &lt;em&gt;so&lt;/em&gt; arduous. It took me a week or more to get through a single paper, and I never got a lot out of them. I felt like it was difficult for me to even understand the questions that the paper was trying to answer.&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m more familiar with the context and the jargon, and I can grasp the questions the paper is trying to answer better. The format of research papers is familiar to me now, and that familiarity reduces the amount of friction I encounter when reading. It took time and exposure, and I don&amp;rsquo;t think there&amp;rsquo;s a substitute for that. Reading papers and discussing them with my advisors was a big help too.&lt;/p&gt;
&lt;p&gt;The paper &lt;a href=&#34;https://web.stanford.edu/class/ee384m/Handouts/HowtoReadPaper.pdf&#34;&gt;How to Read a Paper&lt;/a&gt; is probably the single most valuable bit of help an aspiring researcher can get. You should read it. (It&amp;rsquo;s short: 2 pages)&lt;/p&gt;
&lt;h2 id=&#34;classes&#34;&gt;
  Classes
  &lt;a class=&#34;anchor&#34; href=&#34;#classes&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Grad classes have a different tone than undergrad classes. As one of my professors put it, you will get an A or a B unless you persuade the professor that you should get a lower grade. This is nice because I have to keep a particular GPA to qualify for tuition benefit.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; That means I can do the minimum to learn the material and spend the majority of my time and energy on research.&lt;/p&gt;
&lt;p&gt;After switching research projects, I noticed a switch in my priorities: my first semester, I would do my class work and then do research if I had time left over. My second semester, I did research first and class work happened when I had nothing else to do. I like the second balance better.&lt;/p&gt;
&lt;h2 id=&#34;conferences-and-speaking&#34;&gt;
  Conferences and speaking
  &lt;a class=&#34;anchor&#34; href=&#34;#conferences-and-speaking&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I got to present my work at JuliaCon 2023. I&amp;rsquo;ll put up a link to the video when it comes out, but if you poke around &lt;a href=&#34;https://juliacon.org/2023/&#34;&gt;the recordings&lt;/a&gt; you should be able to find the talk in the middle of a long recording.&lt;/p&gt;
&lt;p&gt;It was fun to prepare and present our work at a conference. It was also a &lt;em&gt;ton&lt;/em&gt; of effort. I have never put that much time and energy into preparing a talk as I did for that conference. And it turned out pretty well, if I do say so myself. Hopefully subsequent talks will be less stressful, less effort, &lt;em&gt;and&lt;/em&gt; even higher-quality!&lt;/p&gt;
&lt;p&gt;JuliaCon was hosted in Boston; before that I went to PLDI in Orlando. Boston is &lt;em&gt;far&lt;/em&gt; superior to Orlando. Orlando is a wasteland of hotels and conference centers and has nothing walkable anywhere. In contrast, Boston is a vibrant city that is a delight to walk around with plenty of interesting things to see.&lt;/p&gt;
&lt;p&gt;It has been satisfying getting to know people in the PL community. It&amp;rsquo;s also been nice to work more closely with professors in my department. I&amp;rsquo;m lucky I get to hang around with so many curious, intelligent, and friendly people.&lt;/p&gt;
&lt;h2 id=&#34;satisfaction&#34;&gt;
  Satisfaction
  &lt;a class=&#34;anchor&#34; href=&#34;#satisfaction&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m happy with where I am. The PhD program was hard at first—and it&amp;rsquo;s still hard—but it&amp;rsquo;s a different, more interesting kind of hard, and I like that.&lt;/p&gt;
&lt;p&gt;I think I&amp;rsquo;ll like the next few years. I still don&amp;rsquo;t know if I want to go into industry for a few years after or find a post-doc position in academia. Long-term I want to be a professor. We&amp;rsquo;ll see how it pans out though.&lt;/p&gt;
&lt;p&gt;If you are looking for interns to study topics related to static analysis, macro systems, type systems, and language design, please &lt;a href=&#34;https://lambdaland.org/#contact&#34;&gt;drop me a line&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Research Assistant. At least where I attend, there are Research Assistants, Graduate Assistants, and Teaching Assistants. RAs have funding and get paid to do research. GAs either have some kind of fellowship (some kind of grant/fund/pool of money from the school rather than a research grant) or are paying their own way. TAs teach classes in exchange for tuition and stipend money.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Tuition benefit: PhD students at my school in my field (CS) get their tuition paid for by the school. There are some obligations around this, such as taking a certain number of credit-hours each semester and maintaining a decent GPA.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Writing Racket Macros: define-syntax and phases</title>
      <link>https://lambdaland.org/posts/2023-05-19_racket_macros/</link>
      <pubDate>Fri, 19 May 2023 00:00:00 -0600</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-19_racket_macros/</guid>
      <description>&lt;p&gt;There are a bunch of different ways of writing a macro in Racket. There are also some tricky things around phases to keep in mind. This is to help me keep them all straight.&lt;/p&gt;
&lt;h2 id=&#34;3-plus-1-ways-to-make-a-macro&#34;&gt;
  3+1 ways to make a macro
  &lt;a class=&#34;anchor&#34; href=&#34;#3-plus-1-ways-to-make-a-macro&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax-rule&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;syntax-rules&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;foo args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which, is in turn equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;syntax-case&lt;/span&gt; stx &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;gensymed-foo args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)])))&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; gensymed-foo is like foo but doesn&amp;#39;t match in the template&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;because &lt;code&gt;syntax-rules&lt;/code&gt; expands to &lt;code&gt;syntax-case&lt;/code&gt; with some fancy wrapping around it.&lt;/p&gt;
&lt;p&gt;This makes &lt;code&gt;syntax-case&lt;/code&gt; the most powerful of them all, and it&amp;rsquo;s here that we&amp;rsquo;re treating syntax as data comes to the forefront: you can bind the syntax object directly (in our example, &lt;code&gt;with the (λ (stx) ...)&lt;/code&gt; part), pattern match on it, and finally return new syntax with the &lt;code&gt;#&#39;&lt;/code&gt; notation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;define-syntax-rule&lt;/code&gt; is the weakest of the three, but handles a common case: just a single form that you&amp;rsquo;d like to transform a little bit. This version doesn&amp;rsquo;t allow for writing multiple clauses.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;define-syntax&lt;/code&gt; with &lt;code&gt;syntax-rules&lt;/code&gt; is in the middle: the bodies of each of the rule match arms (&lt;code&gt;(use args ...)&lt;/code&gt;) are assumed to be syntax objects. This works well for the majority of cases I think. It&amp;rsquo;s only when you need to do really hairy stuff and manually generate code that can&amp;rsquo;t be put together with repeats (&lt;code&gt;...&lt;/code&gt;) that you need the full power of &lt;code&gt;syntax-case&lt;/code&gt; at your disposal.&lt;/p&gt;
&lt;p&gt;Note that there are two forms of &lt;code&gt;define-syntax&lt;/code&gt;: &lt;code&gt;(define-syntax (id stx) body ...)&lt;/code&gt; is shorthand for &lt;code&gt;(define-syntax id (λ (stx) body ...))&lt;/code&gt; much like the shorthand for building functions with &lt;code&gt;define&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;bonus-more-power&#34;&gt;
  Bonus: more power
  &lt;a class=&#34;anchor&#34; href=&#34;#bonus-more-power&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;A cousin of &lt;code&gt;syntax-case&lt;/code&gt; is &lt;code&gt;syntax-parse&lt;/code&gt;. I was confused about this one for a bit because the names are so close, and they share a lot of similarities. &lt;code&gt;syntax-case&lt;/code&gt;&amp;rsquo;s documentation is in the &lt;a href=&#34;https://docs.racket-lang.org/reference/stx-patterns.html&#34;&gt;Racket Reference proper&lt;/a&gt;, while &lt;code&gt;syntax-parse&lt;/code&gt;&amp;rsquo;s documentation lives with the &lt;a href=&#34;https://docs.racket-lang.org/syntax/Parsing_Syntax.html&#34;&gt;syntax module documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our previous example would be written like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or equivalently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)])))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;syntax-parse&lt;/code&gt; supports keyword arguments like &lt;code&gt;#:with&lt;/code&gt; and &lt;code&gt;#:when&lt;/code&gt; to do some pattern matching and predicate checking. &lt;code&gt;syntax-parse&lt;/code&gt; will backtrack through match arms until it finds a matching and satisfying clause.&lt;/p&gt;
&lt;p&gt;As far as I can tell, &lt;code&gt;syntax-parse&lt;/code&gt; is strictly the most powerful of the syntax manipulating forms that I&amp;rsquo;ve outlined here.&lt;/p&gt;
&lt;h2 id=&#34;phases&#34;&gt;
  Phases
  &lt;a class=&#34;anchor&#34; href=&#34;#phases&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;It doesn&amp;rsquo;t seem like macros can use the functions in their current module by default. However, if you wrap your function definitions in &lt;code&gt;begin-for-syntax&lt;/code&gt;, this shifts the function definitions &amp;ldquo;up&amp;rdquo; a phase, and they can be used at the same level as functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;begin-for-syntax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; foo &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-stx-prop stx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;baz&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; my-macro
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; foo-ed &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;foo-ed&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also &lt;code&gt;require&lt;/code&gt; a module with the &lt;code&gt;for-syntax&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for-syntax&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;util.rkt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more information on phases, see the &lt;a href=&#34;https://docs.racket-lang.org/reference/syntax-model.html#%28tech._phase._level%29&#34;&gt;Racket Docs&lt;/a&gt; on phase levels.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The kind of thinking computer science enables</title>
      <link>https://lambdaland.org/posts/2023-05-11_thinking_cs/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-11_thinking_cs/</guid>
      <description>&lt;p&gt;I believe computer science plays as integral of a part to a well-rounded liberal arts education as does mathematics and linguistics. Why? A liberal arts education is designed to help you think in new and better ways. Computer science teaches novel ways of thinking, reasoning, and approaching problems that are hard to get anywhere else.&lt;/p&gt;
&lt;p&gt;I took a class on pedagogy when I encountered this puzzle. I answered the question easily, and I caught myself using reasoning patterns from work in programming coming to the forefront.&lt;/p&gt;
&lt;p&gt;Consider the following problem: suppose you have four cards, each of which has a letter on one side, and a number on the other. The cards are arranged like so:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;+-------+  +-------+  +-------+  +-------+
|       |  |       |  |       |  |       |
|   A   |  |   2   |  |   B   |  |   3   |
|       |  |       |  |       |  |       |
+-------+  +-------+  +-------+  +-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Suppose the cards follow the rule that, if a card has a vowel on one side, the other side &lt;em&gt;must&lt;/em&gt; be an even number. What is the smallest number of cards you need to turn over to verify that the rule holds for these cards? Which cards?&lt;/p&gt;
&lt;p&gt;Give yourself a second to think about it, and try and figure it out.&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Answer&lt;/summary&gt;
The answer is 2, and the cards are A and 3
&lt;/details&gt;
&lt;p&gt;Did you get that? I translated the rule into the logical implication &lt;em&gt;if vowel → then even number&lt;/em&gt;. It says nothing about the opposite side of a card if the number is even. Thus, we only need to check cards &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The point of the exercise that we were doing was to showcase how difficult reasoning with abstract symbols is. After showing this example with the cards, our instructor gave us another equivalent problem, but this time using familiar terms around conditions on the legal drinking age. The point was that familiar analogies reduce cognitive load, thereby freeing the students&amp;rsquo; minds for grasping bigger and more important ideas.&lt;/p&gt;
&lt;p&gt;Yet &lt;em&gt;I&lt;/em&gt; found it easy to answer the first and more abstract problem. I&amp;rsquo;m not a genius or anything—I&amp;rsquo;ve just practiced this kind of reasoning with computer science. Anyone can do that.&lt;/p&gt;
&lt;p&gt;Computer science teaches abstract reasoning in a way that nothing else can. I suppose once you get far enough into mathematics you get to experience a lot of the same sorts of ideas—but only math majors ever make it that far. Programming forces you to confront abstract reasoning about conditions and rules and how they combine from the outset.&lt;/p&gt;
&lt;p&gt;Moreover, teaching programming can be fun! You don&amp;rsquo;t have to go all out into gamification to elicit delight in seeing a computer follow your instructions. The feedback loop between writing code and getting a response is so tight; I think students have an easier time in computer science pushing themselves to reason through problems because they can get fast immediate and real feedback from the computer.&lt;/p&gt;
&lt;p&gt;I think more people should learn programming to learn how to think like a programmer. We also need to do a better job designing our CS courses in high school and university to focus on this kind of transferable skill, and we need to de-emphasize whatever &lt;code&gt;$hot_new_framework&lt;/code&gt; is being pushed by industry in the classroom.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is a type system, really?</title>
      <link>https://lambdaland.org/posts/2023-01-17_what_is_a_type_system_really/</link>
      <pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-01-17_what_is_a_type_system_really/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;
  Background
  &lt;a class=&#34;anchor&#34; href=&#34;#background&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This is a question I&amp;rsquo;ve been wrestling with for a little bit. My first experience with a type system was with Java, and I didn&amp;rsquo;t like it. It just felt like an annoying constraint on the kinds of programs I could write. I was coming from Perl, which sports weak dynamic typing, so Java&amp;rsquo;s rigidity came as a bit of a shock.&lt;/p&gt;
&lt;p&gt;After Java I learned some C, which too has types. C&amp;rsquo;s types are different from Java&amp;rsquo;s in a big way: in C they&amp;rsquo;re really just directives to the compiler on how to interpret some bytes. &amp;ldquo;Everything is just &lt;code&gt;void *&lt;/code&gt;&amp;rdquo; is kind of true. In C, bytes can be interpreted however you wish.&lt;/p&gt;
&lt;p&gt;As I matured as a developer, I realized that sometimes I &lt;em&gt;wanted&lt;/em&gt; constraints on what I could program. I wanted to have some way to narrow the scope of possibilities of things my program could do. While that may sound bad at first glance, consider if you could narrow the scope of ways your program would go &lt;em&gt;wrong&lt;/em&gt;. That&amp;rsquo;s what types are designed to do.&lt;/p&gt;
&lt;p&gt;Not all type systems are equally powerful: while Java&amp;rsquo;s type system prevents certain classes of errors, a &lt;code&gt;NullPointerException&lt;/code&gt; crops up here and there to blow your (well-typed!) program out of the water. Languages like Rust or Kotlin sport type systems that prevent &lt;code&gt;NullPointerExceptions&lt;/code&gt; or segfaults from ever cropping up. The trade-off is that these type systems often take a little more time to get used to, and might make it harder to write certain kinds of programs.&lt;/p&gt;
&lt;p&gt;New advances in type systems are mitigating those trade-offs, however. Kotlin&amp;rsquo;s type system does away with &lt;code&gt;NullPointerExceptions&lt;/code&gt; without being too much more complex than Java&amp;rsquo;s, and things like &lt;em&gt;gradual typing&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; make the cost curve of adding static types to a dynamically typed codebase much smoother. The more I learn, the more I see that I can do with types.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-type-system&#34;&gt;
  What is a type system?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-a-type-system&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In one sense types are just sets of values that an expression can take on. Suppose I have a variable of type &lt;code&gt;Int&lt;/code&gt;: this implies the values it will be bound to belong to the set ℤ. This view of types is really good for thinking about how algebraic types work: when I take the &lt;em&gt;product&lt;/em&gt; of two types (e.g. &lt;code&gt;Int × Bool&lt;/code&gt;), I&amp;rsquo;m describing values that belong to the set of ordered pairs &lt;code&gt;{(n,b) | n ∈ ℤ, b ∈ 𝔹}&lt;/code&gt; or the &lt;em&gt;cross-product&lt;/em&gt; of the sets &lt;code&gt;ℤ × 𝔹&lt;/code&gt;. Tuples and structs are usually how product types are realized in a programming language.&lt;/p&gt;
&lt;p&gt;The same goes for sum types and set unions. A &lt;em&gt;sum type&lt;/em&gt; is the union of two or more types; if I have a variable of type &lt;code&gt;Nat + Bool&lt;/code&gt;, then it can be a number &lt;em&gt;or&lt;/em&gt; a boolean. Tagged unions and &lt;a href=&#34;https://en.wikipedia.org/wiki/Enumerated_type&#34;&gt;enums&lt;/a&gt; are typically how you see sum types in programming languages.&lt;/p&gt;
&lt;p&gt;If you consider the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cardinality&#34;&gt;cardinality&lt;/a&gt; of a type, the metaphor continues to work.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; For example, if I have a type called a &lt;code&gt;Byte&lt;/code&gt; that holds an integer between 0 and 255, and I pair it with a boolean in a tuple to produce the type &lt;code&gt;Byte × Bool&lt;/code&gt;, then there will be 256 × 2 = 512 different values that inhabit the type &lt;code&gt;Byte × Bool&lt;/code&gt;. Likewise with a sum type, where a value can be either &lt;code&gt;Byte&lt;/code&gt; or &lt;code&gt;Bool&lt;/code&gt;, then there are 256 + 2 = 258 different inhabitants of the type.&lt;/p&gt;
&lt;p&gt;Every type system that I know of has some set of &lt;em&gt;primitive types&lt;/em&gt; along with ways of combining those types into bigger structures. Primitive types typically include numbers, booleans, and strings, while combining structures usually include records (or structs, i.e. product types) and enumerations (i.e. sum types).&lt;/p&gt;
&lt;h3 id=&#34;static-typing-dynamic-typing-and-type-inference&#34;&gt;
  Static typing, dynamic typing, and type inference
  &lt;a class=&#34;anchor&#34; href=&#34;#static-typing-dynamic-typing-and-type-inference&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Languages with a &lt;em&gt;static type system&lt;/em&gt; are ones where the type of an expression—be it a variable, literal, compound expression, function call, etc.—is discernible without running the program. Haskell, Rust, Java, C, C++, Go, etc. are all statically typed languages.&lt;/p&gt;
&lt;p&gt;In contrast, in a &lt;em&gt;dynamic type system&lt;/em&gt;, the types of expressions are not knowable until runtime. The language implementation has to insert checks before e.g. performing an addition to make sure the types line up right. Perl, Python, Ruby, JavaScript, Scheme, Clojure, etc. are dynamically typed languages.&lt;/p&gt;
&lt;p&gt;Some static languages like Java require you to write down the type of every variable, expression, and function. Others, like Rust and Haskell, do something called &lt;em&gt;type inference&lt;/em&gt;: this is where the type checker is able to infer, based off of the types of literal data as well as the operators in use, what the types for a program should be. This is different than a dynamic type system: just because you didn&amp;rsquo;t write down what type a variable was, doesn&amp;rsquo;t mean it is now dynamically typed. In Rust, Haskell, etc., every expression still has a type—it&amp;rsquo;s just inferred rather than explicitly given by you, the programmer.&lt;/p&gt;
&lt;h3 id=&#34;nominal-vs-dot-structural&#34;&gt;
  Nominal vs. Structural
  &lt;a class=&#34;anchor&#34; href=&#34;#nominal-vs-dot-structural&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Some types are &lt;em&gt;nominal&lt;/em&gt; and others are &lt;em&gt;structural&lt;/em&gt;. These notions describe how two types are considered equal. Nominal types are what you get all over in Java: for two objects to be of the same type, they must both be of the same class. It doesn&amp;rsquo;t matter if you have two classes like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; thing_1&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;boolean&lt;/span&gt; thing_2&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Bar&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; thing_1&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;boolean&lt;/span&gt; thing_2&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though the members of &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; have the same interface and even the same names, a value of type &lt;code&gt;Foo&lt;/code&gt; will never be the same as type &lt;code&gt;Bar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Structural types determine equivalence based off of their algebraic structure. Most types in Haskell, ML, Typed Racket, and others work this way. This is kind of like a generalization of interfaces: if two types &amp;ldquo;implement&amp;rdquo; the &amp;ldquo;same interface&amp;rdquo; of having the same structure, they can be considered equivalent and interchangeable. However, some types in Typed Racket, like those based off of structures, are nominal—you don&amp;rsquo;t have to be all structural or all nominal in your language.&lt;/p&gt;
&lt;p&gt;Most of the time I find it easier to think in terms of structural types. There are times when nominal types make more sense, though. It&amp;rsquo;s nice when your language gives you the flexibility to choose.&lt;/p&gt;
&lt;h2 id=&#34;why-do-we-care-about-type-systems&#34;&gt;
  Why do we care about type systems?
  &lt;a class=&#34;anchor&#34; href=&#34;#why-do-we-care-about-type-systems&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I think most computer scientists are familiar with &lt;a href=&#34;https://en.wikipedia.org/wiki/Halting_problem&#34;&gt;the Halting Problem&lt;/a&gt;, but &lt;a href=&#34;https://en.wikipedia.org/wiki/Rice%27s_theorem&#34;&gt;Rice&amp;rsquo;s Theorem&lt;/a&gt; is &lt;em&gt;slightly&lt;/em&gt; less well-known.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; Rice&amp;rsquo;s theorem states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All non-trivial semantic properties of programs are undecidable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Rice%27s_theorem&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is a semantic property? In contrast with a &lt;em&gt;syntactic property&lt;/em&gt;, which is aspect apparent in the text of the program, a &lt;em&gt;semantic property&lt;/em&gt; deals with what happens when the program runs. For example, &amp;ldquo;does this program halt?&amp;rdquo; is a semantic property, and the same semantic property covered by Turing&amp;rsquo;s Halting Problem. &amp;ldquo;Does this program contain any &lt;code&gt;if&lt;/code&gt; statements?&amp;rdquo; is a syntactic property. &amp;ldquo;Does control reach this point in the program?&amp;rdquo; or &amp;ldquo;What values flow here?&amp;rdquo; are both semantic questions.&lt;/p&gt;
&lt;p&gt;Type systems can turn certain semantic properties into syntactic ones: we can turn questions about the program&amp;rsquo;s runtime behavior (e.g. &amp;ldquo;Does a function taking integers get applied to a boolean causing a type error?&amp;rdquo;) into questions we can answer by examining the syntax of our program—if we have a statically typed language, we can tell—without running the program itself—whether or not no type errors ever occur.&lt;/p&gt;
&lt;p&gt;There will still be programs when it&amp;rsquo;s impossible to decide whether or not the program has a type error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;goldbach-conjecture-true?&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;not a number&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but in these cases we can restrict ourselves to programs that &lt;em&gt;definitely&lt;/em&gt; do not have any type errors.&lt;/p&gt;
&lt;h2 id=&#34;beyond-sets-types-as-a-meta-language&#34;&gt;
  Beyond sets: types as a meta language
  &lt;a class=&#34;anchor&#34; href=&#34;#beyond-sets-types-as-a-meta-language&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Something I&amp;rsquo;ve learned recently is that &amp;ldquo;type system&amp;rdquo; is just what we call meta-languages for our programming languages. The language of types describes the behavior of a program written in another language.&lt;/p&gt;
&lt;p&gt;Consider the following program in Typed Racket:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;: &lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Number Number&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The annotation &lt;code&gt;(: add1 (-&amp;gt; Number Number))&lt;/code&gt; is a proposition that &lt;code&gt;add1&lt;/code&gt; is a function that takes some value belonging to the set ℕ and gives back another thing in the set ℕ.&lt;/p&gt;
&lt;p&gt;Now if we call that function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;seven : Number &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; seven&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the &lt;code&gt;: Number&lt;/code&gt; bit on the first line is a proposition that the variable &lt;code&gt;seven&lt;/code&gt; will take on a value in the set ℕ.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Now, in the meta-language of types, we can check that the type of the argument &lt;code&gt;seven&lt;/code&gt; matches with the type of the parameter &lt;code&gt;n&lt;/code&gt; in &lt;code&gt;add1&lt;/code&gt;. In this case, the types match, so we proceed. If the declared or inferred type of the argument did &lt;em&gt;not&lt;/em&gt; line up, our type checker would complain that we had violated the rules of the meta-language. These rules in the meta-language, of course, correspond to the actual runtime properties of Racket. More on that later in &lt;a href=&#34;#erasure&#34;&gt;§ Erasure&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;types-other-than-values&#34;&gt;
  Types other than values
  &lt;a class=&#34;anchor&#34; href=&#34;#types-other-than-values&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Many object-oriented (OO) languages have a notion of &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; variables. Visibility is another thing type systems enforce. Annotating a variable as being &lt;code&gt;private&lt;/code&gt; is a proposition that it is only accessed in certain parts of the program, which is something the type checker can then ensure is enforced.&lt;/p&gt;
&lt;p&gt;Tainting is another thing you might want from a type system: &lt;em&gt;tainting&lt;/em&gt; refers to marking user-supplied data as &amp;ldquo;tainted&amp;rdquo;, and any attempt to e.g. modify this data or branch off of the value is prohibited, unless the data has been &amp;ldquo;sanitized&amp;rdquo; by e.g. explicitly parsing well-formed data with regular expressions or the like. This is supposed to help protect against injection attacks.&lt;/p&gt;
&lt;p&gt;A type system could have a wrapper type &lt;code&gt;Tainted&amp;lt;A&amp;gt;&lt;/code&gt; that takes some data of any type and protects it from dangerous operations. Then you&amp;rsquo;d have functions like &lt;code&gt;regex_sanitize :: Tainted&amp;lt;String&amp;gt;, Regex → String&lt;/code&gt; for when you want to parse a tainted string to get some data out of it.&lt;/p&gt;
&lt;h2 id=&#34;erasure&#34;&gt;
  Erasure
  &lt;a class=&#34;anchor&#34; href=&#34;#erasure&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;There is usually some kind of check to make sure that the propositions in the meta-language correspond to the program we&amp;rsquo;re describing. Without this check, there wouldn&amp;rsquo;t be anything stopping me from writing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;seven : Number &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;definitely not a number!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; seven&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and the program would still type check if it just blindly trusted the type annotations. Of course, as soon as the program &lt;em&gt;runs&lt;/em&gt;, the runtime would explode at the &lt;code&gt;add1&lt;/code&gt; exception. Removing the types after checking is called &amp;ldquo;type erasure&amp;rdquo;, as the types are erased after type checking and the program gets run as if they had never been there.&lt;/p&gt;
&lt;p&gt;Some languages like Haskell and Java do this. This is safe to do because we&amp;rsquo;re only running programs that we&amp;rsquo;ve proven are well-typed. The upside to this is that we can save a lot of overhead by removing type checks. The downside is that certain kinds of runtime introspection might not be possible. Java, for example, doesn&amp;rsquo;t keep type parameters around on generics. &lt;a href=&#34;https://en.wikipedia.org/wiki/Generics_in_Java#Problems_with_type_erasure&#34;&gt;Wikipedia has a good example&lt;/a&gt; of where &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt; and &lt;code&gt;ArrayList&amp;lt;Float&amp;gt;&lt;/code&gt; both report the same thing under &lt;code&gt;.getClass()&lt;/code&gt; at runtime.&lt;/p&gt;
&lt;p&gt;One place to be careful is when typed and untyped code mix. This is where &lt;em&gt;gradual typing&lt;/em&gt; comes in. Most languages are either statically typed or dynamically typed, but a growing number of languages are either being adapted to support or are being developed out of the box with support for gradual types. In these languages, like Typed Racket, you have to insert runtime checks to make sure code coming from an untyped module into a typed module agrees with the type guarantees.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a lot of hidden complexity around gradual typing. &lt;a href=&#34;https://cs.brown.edu/people/bgreenma/publications/publications.html&#34;&gt;Ben Greenman&lt;/a&gt; has many papers outlining some of the intricacies around the semantics of gradual typing.&lt;/p&gt;
&lt;h3 id=&#34;wat-can-go-wrong&#34;&gt;
  Wat can go wrong
  &lt;a class=&#34;anchor&#34; href=&#34;#wat-can-go-wrong&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;TypeScript is a bit of an odd language. The main page proclaims &amp;ldquo;TypeScript becomes JavaScript via the delete key&amp;rdquo; and just erases all types after type checking. You can call TypeScript modules from JavaScript, and TypeScript doesn&amp;rsquo;t put in any runtime checks. For example, you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; add2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; number&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; b number&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; number &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and get the result:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;9
foobar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TypeScript&amp;rsquo;s type guarantees are only locally sound. As soon as your typed and untyped parts mix, your program will fall back on the very &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;wat-worthy&lt;/a&gt; typing rules of JavaScript.&lt;/p&gt;
&lt;h2 id=&#34;when-layers-mix&#34;&gt;
  When layers mix
  &lt;a class=&#34;anchor&#34; href=&#34;#when-layers-mix&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;How much can you program in this meta language of types? I&amp;rsquo;m still trying to understand this. &lt;em&gt;Dependent types&lt;/em&gt; allow types to depend on values; i.e. you can have a type for &amp;ldquo;list with three integers&amp;rdquo;. Dependent typing, as I understand it, opens up complete programmability of the type system, at the cost of type checking becoming undecidable. These type systems allow you describe the behavior of your programs with incredible precision.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve done a little work with &lt;a href=&#34;https://en.wikipedia.org/wiki/Coq&#34;&gt;Coq&lt;/a&gt;, which supports dependent types. I haven&amp;rsquo;t done enough yet to really understand it well though!&lt;/p&gt;
&lt;h2 id=&#34;types-as-a-design-tool&#34;&gt;
  Types as a design tool
  &lt;a class=&#34;anchor&#34; href=&#34;#types-as-a-design-tool&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Beyond the neat safety properties that type systems give me, I really like using types as a design tool. So often I&amp;rsquo;ll be working on transforming some data or pulling together information from multiple different sources to decide something, and it&amp;rsquo;s easy to get lost in the lines of code. What helps is for me to think of a function in terms of the shape of its inputs and the shape of the needed output. (This is part of the reason why I like &lt;a href=&#34;#nominal-vs-dot-structural&#34;&gt;structural type systems&lt;/a&gt; so much.) With the types in hand, the program almost writes itself.&lt;/p&gt;
&lt;p&gt;Indeed, there are times when the program &lt;em&gt;can&lt;/em&gt; write itself! If you write down the type of a function, it&amp;rsquo;s not hard for an editor to suggest programs that satisfy that type. With more expressive types, the better the suggestions will be. To see an example of this in action, check out &lt;a href=&#34;https://git.sr.ht/~ashton314/microKanren&#34;&gt;the type checker I made with μKanren&lt;/a&gt;, which can accept a type and generate expressions that satisfy it.&lt;/p&gt;
&lt;p&gt;One thing that I like about this kind of program generation is the programs will definitely be &lt;em&gt;correct&lt;/em&gt;, in the sense they&amp;rsquo;ll be well-typed. ML systems like GitHub Copilot are very impressive, but there&amp;rsquo;s always some chance that they&amp;rsquo;ll go completely wrong. Type-driven code suggestions can always be safe!&lt;/p&gt;
&lt;p&gt;Despite how cool type-driven code generation is, and how valuable the safety guarantees that types provide are, I find types to be of greatest aid as a tool for thinking and reasoning about my programs.&lt;/p&gt;
&lt;h2 id=&#34;again-what-are-type-systems&#34;&gt;
  Again, what are type systems?
  &lt;a class=&#34;anchor&#34; href=&#34;#again-what-are-type-systems&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Type systems provide a way of writing down properties of our programs that we would like to be true, and then mechanically checking that those properties hold. Type systems come in all shapes and sizes; some are more expressive than others. Types are also a great tool to use when actually writing code.&lt;/p&gt;
&lt;p&gt;Static type systems provide strong guarantees about program behavior at the expense of some friction in programming: dynamic languages make it easy to throw together a prototype, but can become unwieldy or difficult to maintain once the codebase grows. Gradual typing is an increasingly popular method to get the best of both worlds.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;
  Further reading
  &lt;a class=&#34;anchor&#34; href=&#34;#further-reading&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;d recommend checking out the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_cube&#34;&gt;Lambda Cube&lt;/a&gt;. Other books that I&amp;rsquo;ve read or am reading that have helped me understand types a bit better include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Practical Foundations for Programming Languages&lt;/em&gt;, by Robert Harper&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Types and Programming Languages&lt;/em&gt;, by Benjamin Pierce&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Semantics Engineering with PLT Redex&lt;/em&gt;, by Matthias Felleisen, Robert Findler, and Matthew Flatt&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Programming Languages: Application and Interpretation&lt;/em&gt;, by Shriram Krishnamurthi&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve also written a post about &lt;a href=&#34;https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/&#34;&gt;how to write a type checker&lt;/a&gt; that hopefully should be pretty easy to follow.&lt;/p&gt;
&lt;h2 id=&#34;acknowledgments&#34;&gt;
  Acknowledgments
  &lt;a class=&#34;anchor&#34; href=&#34;#acknowledgments&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks to my advisor &lt;a href=&#34;https://cs.brown.edu/people/bgreenma/&#34;&gt;Ben Greenman&lt;/a&gt; for reading a draft and correcting some inaccuracies in the erasure and gradual typing portions. Thanks also to &lt;a href=&#34;https://solitum.net/&#34;&gt;Scott Wiersdorf&lt;/a&gt; and &lt;a href=&#34;https://github.com/alex0112&#34;&gt;Alex Larsen&lt;/a&gt; for providing feedback and some much-needed polishing.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Gradual typing was first proposed by Jeremy Siek. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Gradual_typing&#34;&gt;Wikipedia page on Gradual Typing&lt;/a&gt; has a decent introduction.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;This should suggest the relationship between sums and products in types and algebra is a deep one!&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Next time someone asks you to write a program that does some static analysis of a semantic property, you can say to them (in your best Vizzini voice of course), &amp;ldquo;you fell for one of the classic blunders! The first is never get involved in a Turing-machine halting problem. The second which is &lt;em&gt;slightly&lt;/em&gt; less well-known, never attempt to use static analysis when semantics are on the line!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;At this point it&amp;rsquo;s generally appropriate to laugh manically before falling over dead from iocane poisoning.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Typed Racket would actually derive the type &lt;code&gt;Positive-Byte&lt;/code&gt; for &lt;code&gt;seven&lt;/code&gt; which is a subtype of Number. Typed Racket&amp;rsquo;s &lt;a href=&#34;https://docs.racket-lang.org/ts-reference/type-ref.html#%28part._.Numeric_.Types%29&#34;&gt;numeric type hierarchy&lt;/a&gt; is quite impressive!&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;The book is available online here: &lt;a href=&#34;https://www.plai.org/&#34;&gt;https://www.plai.org/&lt;/a&gt; The sections on types and type checking are quite excellent.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to write a type checker/type inferrer with good error messages</title>
      <link>https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/</guid>
      <description>&lt;p&gt;All the source for this may be found on my &lt;a href=&#34;https://codeberg.org/ashton314/type-error-research&#34;&gt;Codeberg repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;synopsis&#34;&gt;
  Synopsis
  &lt;a class=&#34;anchor&#34; href=&#34;#synopsis&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Experimental type checker/inferer for a simple lambda calculus&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;
  Description
  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This is a type inference system for a little language. (Described below.) It uses a fusion of type inference algorithms from PLAI, ESP, and μKanren. (See &lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Broadly speaking, our type inference engine works by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;generating &lt;em&gt;typing constraints&lt;/em&gt; from the program&lt;/li&gt;
&lt;li&gt;solving those constraints&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&amp;rsquo;ll describe each of those in more detail.&lt;/p&gt;
&lt;h3 id=&#34;language-description&#34;&gt;
  Language description
  &lt;a class=&#34;anchor&#34; href=&#34;#language-description&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We implement a really simple language that includes features such as the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;                                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; numeric literals&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;#t&lt;/span&gt;                                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; booleans&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;x &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                           &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; single-variable let; binary math operators&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt; y &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;y &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                                 &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; single-argument anonymous functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt; x x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;#t&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; let-polymorphism; conditionals&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At time of writing, the let-polymorphism &lt;em&gt;works&lt;/em&gt; though it&amp;rsquo;s still a little rough.&lt;/p&gt;
&lt;h3 id=&#34;type-checking-vs-type-inference&#34;&gt;
  Type checking vs type inference
  &lt;a class=&#34;anchor&#34; href=&#34;#type-checking-vs-type-inference&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Type checking&lt;/em&gt; a step in language implementation where type annotations supplied by the user are mechanically checked prior to compiling or execution. Any time when the checker can determine that a value of the wrong type flows to a place (e.g. a variable, argument to a function, etc) it is called a &lt;em&gt;type error&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Type inference&lt;/em&gt; saves programmers from having to write out all type annotations. Most times (though not always) it is possible to &lt;em&gt;infer&lt;/em&gt; what the type of a variable should be. Literal values are really easy, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; foo &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The variable &lt;code&gt;foo&lt;/code&gt; clearly should have some kind of integer type. However, type inference is more powerful than just inferring variable types from their initial values; for example, consider this Rust snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; add_1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;          &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// (lambda x: x + 1) for you Python programmers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What should type should the variable &lt;code&gt;x&lt;/code&gt; have? Well, we know that it gets passed to &lt;code&gt;+&lt;/code&gt;, so definitely some numeric type. Although the programmer doesn&amp;rsquo;t explicitly annotate the parameter &lt;code&gt;x&lt;/code&gt; with its type here, we can tell using information elsewhere in the program. This is the role of type inference.&lt;/p&gt;
&lt;h4 id=&#34;why-do-we-care-about-type-inference&#34;&gt;
  Why do we care about type inference?
  &lt;a class=&#34;anchor&#34; href=&#34;#why-do-we-care-about-type-inference&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Type inference saves us a lot of typing. Moreover, if we are trying to retrofit a type system onto an existing system that has a lot of code written in it already, it would be nice to not have to require users of the language to go back and annotate all their existing code. We can still report type errors as we find them—they would have been caught at runtime anyway—ideally, existing code should just work, and future code should turn out safer.&lt;/p&gt;
&lt;h3 id=&#34;constraint-generation&#34;&gt;
  Constraint generation
  &lt;a class=&#34;anchor&#34; href=&#34;#constraint-generation&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;what-are-constraints&#34;&gt;
  What are constraints?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-are-constraints&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Constraints&lt;/em&gt; are statements about what how types and bits of a program relate to each other. For example, here is a little program with some constraints illustrated:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/constraint-illustration.png&#34;
    alt=&#34;Figure 1: A little Rust program with some type relationships illustrated.&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;A little Rust program with some type relationships illustrated.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Even though none of the variables have explicit type annotations, we know that &lt;code&gt;x&lt;/code&gt; must be some kind of number, &lt;code&gt;add_1&lt;/code&gt; is a function &lt;code&gt;ℕ→ℕ&lt;/code&gt;, and &lt;code&gt;y_plus_1&lt;/code&gt; must be a number because it&amp;rsquo;s the same as the return value as &lt;code&gt;add_1&lt;/code&gt;. Moreover, whatever &lt;code&gt;y&lt;/code&gt; is, it has to match the input type of &lt;code&gt;add_1&lt;/code&gt; as well.&lt;/p&gt;
&lt;h4 id=&#34;how-do-we-generate-constraints&#34;&gt;
  How do we generate constraints?
  &lt;a class=&#34;anchor&#34; href=&#34;#how-do-we-generate-constraints&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;At time of writing, we only have equality constraints, which state that some particular expression must have the &lt;em&gt;same&lt;/em&gt; type as another type expression. Later we will likely add subtype constraints or union constraints which will involve some form of back-tracking.&lt;/p&gt;
&lt;p&gt;Our algorithm walks through the AST of a program and emits a list of constraints on particular points of the AST. Please see one of the listed &lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Most explanations (PLAI, EPL) of a type inference algorithm dump the generated constraints into a set. Here we diverge somewhat from the literature: we gather the constraints into a list, which keeps the constraints in rough order of when we encountered those constraints in the program. This ordering is important for good error generation later on.&lt;/p&gt;
&lt;p&gt;We will likely play with how these constraints are ordered in the future.&lt;/p&gt;
&lt;p&gt;A good excerpt from PLAI:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are constraints? They are simply statements about the types of expressions. In addition, though the binding instances of variables are not expressions, we must calculate their types too (because a function requires both argument and return types). In general, what can we say about the type of an expression?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That it is related to the type of some identifier.&lt;/li&gt;
&lt;li&gt;That it is related to the type of some other expression.&lt;/li&gt;
&lt;li&gt;That it is a number. [/Or in the case of this interpreter, that it is a boolean./]&lt;/li&gt;
&lt;li&gt;That it is a function, whose domain and range types are presumably further constrained.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;unification&#34;&gt;
  Unification
  &lt;a class=&#34;anchor&#34; href=&#34;#unification&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We use ideas from the &lt;code&gt;unify&lt;/code&gt; algorithm in &lt;a href=&#34;#resources&#34;&gt;μKanren&lt;/a&gt;: we have a &lt;code&gt;walk&lt;/code&gt; function along with a substitution list that we can modify non-destructively. This differs from how PLAI and EPL describe &lt;code&gt;unify&lt;/code&gt;, which often does destructive replacement of variables in the substitution list.&lt;/p&gt;
&lt;p&gt;I think this algorithm has the benefit of being a little simpler to understand, once the purpose of the &lt;code&gt;walk&lt;/code&gt; function is grokked. It does mean that you must invoke &lt;code&gt;(walk ast-chunk substitution-list)&lt;/code&gt; in order to find the type of the AST node.&lt;/p&gt;
&lt;p&gt;See the &lt;code&gt;infer-and-annotate&lt;/code&gt; and &lt;code&gt;patch-annotations&lt;/code&gt; functions for a demonstration of how the substitution list along with the original tagged AST can be used to get the type for every node in the program.&lt;/p&gt;
&lt;h4 id=&#34;constructed-types-or-higher-order-types&#34;&gt;
  Constructed types, or higher-order types
  &lt;a class=&#34;anchor&#34; href=&#34;#constructed-types-or-higher-order-types&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Our simple language doesn&amp;rsquo;t have (yet) types like &lt;code&gt;(listof ℕ)&lt;/code&gt;, but it could if we wanted to let it. Use function calls as a model for how we would handle these cases. From PLAI:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have used numbers as a stand-in for all form of base types; functions, similarly, stand for all constructed types, such as &lt;code&gt;listof&lt;/code&gt; and &lt;code&gt;vectorof&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;error-message-generation&#34;&gt;
  Error message generation
  &lt;a class=&#34;anchor&#34; href=&#34;#error-message-generation&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Our error message generator is sensitive to the order in which type constraints are eliminated during the unification process: we generate the constraints in rough order of when the type of something would be encountered. E.g., when evaluated the form &lt;code&gt;(+ 1 2)&lt;/code&gt;, we generate the constraints for the literal values 1 and 2, then we generate the numerical type constraint that &lt;code&gt;+&lt;/code&gt; imposes on its arguments.&lt;/p&gt;
&lt;p&gt;This seems to do a pretty good job of giving us the information we need.&lt;/p&gt;
&lt;h2 id=&#34;extending-the-language&#34;&gt;
  Extending the language
  &lt;a class=&#34;anchor&#34; href=&#34;#extending-the-language&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Adding new forms to the language only involves modifying the constraint generation and error message production routines. (Along with a few ancillary functions like AST tagging etc.) The &lt;code&gt;unify&lt;/code&gt; routine essentially stays the same.&lt;/p&gt;
&lt;p&gt;When we add type unions we &lt;em&gt;will&lt;/em&gt; have to modify &lt;code&gt;unify&lt;/code&gt; to support some form of back-tracking. We will also have to make some modifications with &lt;code&gt;let&lt;/code&gt; polymorphism.&lt;/p&gt;
&lt;h2 id=&#34;open-tasks&#34;&gt;
  Open Tasks
  &lt;a class=&#34;anchor&#34; href=&#34;#open-tasks&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Basic type inference&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Decent error messages&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; forms&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Type unions&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;let&lt;/code&gt;-polymorphism&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Occurrence typing for handling nullable types&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources&#34;&gt;
  Resources
  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;PLAI&lt;/dt&gt;
&lt;dd&gt;&lt;span class=&#34;underline&#34;&gt;Programming Languages: Application and Interpretation&lt;/span&gt;, Krishnamurthi. See &lt;a href=&#34;https://cs.brown.edu/courses/cs173/2012/book/types.html#%28part._.Type_.Inference%29&#34;&gt;chapter 15 online&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;EPL&lt;/dt&gt;
&lt;dd&gt;&lt;span class=&#34;underline&#34;&gt;Essentials of Programming Languages&lt;/span&gt;, Friedman and Wand. See Chapter 7.&lt;/dd&gt;
&lt;dt&gt;μKanren&lt;/dt&gt;
&lt;dd&gt;For the original paper, and implementation, and other resources, see &lt;a href=&#34;https://codeberg.org/ashton314/microKanren&#34;&gt;my repo on Codeberg&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
</description>
    </item>
    
    <item>
      <title>Complete and Liveness, Safe and Sound</title>
      <link>https://lambdaland.org/posts/2022-03-02_sound_complete_and_duals/</link>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-03-02_sound_complete_and_duals/</guid>
      <description>&lt;p&gt;I have a hard time keeping these terms straight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;liveness vs. safety&lt;/li&gt;
&lt;li&gt;soundness vs. completeness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is intended as a short guide for myself; maybe someone else will find it useful too! Note that this is all to the best of my knowledge and understanding at the present time; if there be faults, they be the faults of myself. I welcome correction and clarification if I am wrong.&lt;/p&gt;
&lt;h2 id=&#34;liveness-vs-safety&#34;&gt;
  Liveness vs. Safety
  &lt;a class=&#34;anchor&#34; href=&#34;#liveness-vs-safety&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Liveness and safety deal with &lt;em&gt;properties&lt;/em&gt; of a system. Contrast that with soundness and completion, which are adjectives about analyses.&lt;/p&gt;
&lt;h3 id=&#34;liveness&#34;&gt;
  Liveness
  &lt;a class=&#34;anchor&#34; href=&#34;#liveness&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;liveness&lt;/em&gt; property of a system is of the form &amp;ldquo;something good will eventually happen.&amp;rdquo; One example is eventual consistency in a concurrent system: we want to know that, after some finite number of steps, our system comes to a consistent state of the world.&lt;/p&gt;
&lt;p&gt;Another example might be with a bank: I want it to be the case that when I move money between accounts, the correct amount of money makes it to the destination account. That is something we want to eventually happen, and that&amp;rsquo;s what makes it a liveness property.&lt;/p&gt;
&lt;h3 id=&#34;safety&#34;&gt;
  Safety
  &lt;a class=&#34;anchor&#34; href=&#34;#safety&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Safety&lt;/em&gt; is the dual of &lt;em&gt;liveness&lt;/em&gt;: in contrast to liveness, a safety property states that &amp;ldquo;something bad does not occur&amp;rdquo;. One example of a safety property is in an operating system, nothing prevents the kernel from preempting a task. We never want to get stuck in a state where the kernel cannot regain control of the processor. If our operating system is safe in this regard, we know that we&amp;rsquo;ll never have the case where a program supersedes the kernel.&lt;/p&gt;
&lt;p&gt;Extending the bank analogy, a safety property might be that we never want money lost in a transaction. The program might occasionally fail to deliver money, but no value is accidentally destroyed during a transfer.&lt;/p&gt;
&lt;h2 id=&#34;soundness-vs-completeness&#34;&gt;
  Soundness vs. Completeness
  &lt;a class=&#34;anchor&#34; href=&#34;#soundness-vs-completeness&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Soundness and completeness refer to whole systems that make some kind of decision, e.g. a type system or some kind of a static analysis.&lt;/p&gt;
&lt;h3 id=&#34;soundness&#34;&gt;
  Soundness
  &lt;a class=&#34;anchor&#34; href=&#34;#soundness&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Soundness&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[A]n argument is sound if it is both valid in form and its premises are true. Soundness also has a related meaning in mathematical logic, wherein logical systems are sound if and only if every formula that can be proved in the system is logically valid with respect to the semantics of the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Soundness&lt;/em&gt; means the system is trustworthy. A sound type system, for example, will never tell you that a program is devoid of type errors when there are in fact type errors. Most type systems typically are sound. This means, however, that there are programs which may not contain a type error but that the type checker cannot prove to be devoid of errors.&lt;/p&gt;
&lt;p&gt;Another term that may be used for soundness is &lt;em&gt;correct&lt;/em&gt;. (Though, I believe, this may be highly context-dependent.)&lt;/p&gt;
&lt;h3 id=&#34;completeness&#34;&gt;
  Completeness
  &lt;a class=&#34;anchor&#34; href=&#34;#completeness&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The dual of &lt;em&gt;soundness&lt;/em&gt;: if a system is complete, it means the system can give an answer for every input. It might make some mistakes in reasoning. E.g. with a complete type system, there is no program which it cannot assign a type to (even if it&amp;rsquo;s a divergent type) but an assertion that a program is type-safe is not necessarily true.&lt;/p&gt;
&lt;p&gt;Why can&amp;rsquo;t we have both soundness and completeness at the same time? Gödel is to blame for that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Control-Flow Analysis</title>
      <link>https://lambdaland.org/posts/2021-05-20_cfa/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-05-20_cfa/</guid>
      <description>&lt;p&gt;Control-Flow Analysis is a popular technique for performing static analysis of many different kinds of programming languages.
It&amp;rsquo;s most often needed in cases where you have some kind of dynamic dispatch: either where you have first-class functions or when you have objects and you call one of their methods.&lt;/p&gt;
&lt;p&gt;Imagine for a moment that you were given a program which you were asked to analyze manually.
You might start by going to the top of the program, running through each branch, and keeping track of the values variables could take.
If the program is too complex to hold entirely in your head, you might start by writing down some abstractions to simplifiy remembering.
For example, instead of remembering that the variable &lt;code&gt;x&lt;/code&gt; holds the value of &lt;code&gt;12&lt;/code&gt;, you might just remember that it is a number.
Thus, when you saw some assignment to &lt;code&gt;x&lt;/code&gt;, such as &lt;code&gt;x := x + 1&lt;/code&gt;, you could skip over that and just think that &lt;code&gt;x&lt;/code&gt; is still a number.&lt;/p&gt;
&lt;p&gt;If you came across a loop, you probably wouldn&amp;rsquo;t trace &lt;em&gt;each&lt;/em&gt; execution through the loop: just one or two passes would be enough to tell you some interesting facts. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;i is {i}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a simple loop like this, it&amp;rsquo;s easy to show how the program will always make progress and complete the loop.
For more complicated loops, proving progress might be impossible.
(It might also be &lt;em&gt;wrong&lt;/em&gt;: we do get programs with infinite loops.)&lt;/p&gt;
&lt;p&gt;In these cases, we can just check to see if we&amp;rsquo;ve returned to a state that&amp;rsquo;s identical to a state that we&amp;rsquo;ve seen before:
if &lt;code&gt;x&lt;/code&gt; was a number, it should still be a number, etc.
If the variables&amp;rsquo; (abstract) values are the same, we can conclude that there &lt;em&gt;might&lt;/em&gt; be a loop and move on.
It&amp;rsquo;s not guaranteed to be &lt;em&gt;accurate&lt;/em&gt;, but it is a strategy that&amp;rsquo;s guaranteed to &lt;em&gt;terminate&lt;/em&gt;.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s more to CFA than what I&amp;rsquo;ve outlined here, but this should give you an idea. Stay tuned for more!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This is the classic completeness/consistency trade-off introduced by Kurt Gödel. A &lt;em&gt;consistent&lt;/em&gt; evaluation of a program leaves in a state where there are programs that we cannot compute because we can&amp;rsquo;t tell if they halt. (The Halting Problem) A &lt;em&gt;complete&lt;/em&gt; analysis, which is what we are interested in here, must sacrifice on consistency, and return inaccurate, though still useful results.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
