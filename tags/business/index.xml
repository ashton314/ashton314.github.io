<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Business on Lambda Land</title>
    <link>https://lambdaland.org/tags/business/</link>
    <description>Recent content in Business on Lambda Land</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lambdaland.org/tags/business/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Praise for the pragmatic third camp</title>
      <link>https://lambdaland.org/posts/2023-03-16_appreciation_for_business_programmers/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-03-16_appreciation_for_business_programmers/</guid>
      <description>&lt;p&gt;
Some years ago I came across &lt;a href=&#34;https://josephg.com/blog/3-tribes/&#34;&gt;a blog post&lt;/a&gt; that described programmers as being in one of three camps. It&amp;#39;s a fun, short post, so I encourage you to go read that real quick, but the gist of it is that programmers generally fall into one of three categories according to what they primarily value:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Applied mathematicians, who appreciate elegant solutions to problems. Program execution on von Neumann machines is incidental. These programmers like high-level languages and mathematically correct reasoning about programs.&lt;/li&gt;
&lt;li&gt;Bit hackers, who like making the machine run as efficiently as possible. Without a von Neumann machine, programs are pointless. These programmers like low-level languages that let them get into the guts of things.&lt;/li&gt;
&lt;li&gt;Product makers, who care about the ideals of the first and second camps in as much as they help them accomplish the task of delivering more features. Most industry programmers probably fall into this category. They like high-level languages as long as performance doesn&amp;#39;t suffer too much and that it&amp;#39;s pragmatic. (E.g. JavaScript, Ruby, Python, Go, etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The author of the post talks a little bit about the tension between the camps. I won&amp;#39;t reproduce it here, but it can be amusing, so you should give it a read.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll go ahead and add one more camp to the list: the code monkey for whom coding is just a job. They care about the quality of their work in as much as it allows them to hit their deadlines and collect a paycheck. They don&amp;#39;t care too much about what language they use, as long as it&amp;#39;s the one they learned in school or their bootcamp. They&amp;#39;re generally not curious about learning new languages, understanding how things are implemented, or making a good UI.&lt;/p&gt;
&lt;p&gt;
Most people I&amp;#39;ve worked with have fallen into the first three camps, fortunately. I&amp;#39;ve encountered a few who fall into the fourth camp I just outlined, and they&amp;#39;re miserable to work with if you care about anything. When you work with someone from camps 1–3, there&amp;#39;s some passion there to channel to make a better program, for whatever your metric of &amp;#34;better&amp;#34; is—and you can usually come to some consensus so that a program is better on multiple axes. But with the fourth, there&amp;#39;s nothing there to push on.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve found it to be a helpful paradigm: whenever I have a disagreement about someone about what constitutes &lt;em&gt;good&lt;/em&gt; or &lt;em&gt;valuable&lt;/em&gt; programming, I consider what kinds of things they value. (In a way, it&amp;#39;s a little like Jonathan Haidt&amp;#39;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Moral_foundations_theory&#34;&gt;Moral Foundations Theory&lt;/a&gt; for programmers.) Maybe you can think back to some disagreement you had and see the value mismatch manifesting.&lt;/p&gt;
&lt;p&gt;
The other day I experienced a burst of appreciation for camp 3—the pragmatic makers—more so than I had ever felt before. I was fighting with a crappy health insurance website. Instead of a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; dropdown element, they had built a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with some &lt;code&gt;on-click&lt;/code&gt; handler to make a faux dropdown. The website was janky, bloated, slow, and difficult to navigate. It must have been made by programmers in camp 4.&lt;/p&gt;
&lt;p&gt;
I realized that the only camp that stands a chance of fighting this kind of crappy experience online is those programmers in camp 3: the soldiers who care about their craft enough to make the user happy. I realized that &lt;em&gt;I&lt;/em&gt; would never ever want to build a better insurance site because &lt;em&gt;that&amp;#39;s not an interesting problem to me&lt;/em&gt;, but there are those who have different motivations than I do, and these people can channel those motivations into hammering out better experiences for all of us.&lt;/p&gt;
&lt;p&gt;
So, here&amp;#39;s to the pragmatists—the people who care about the end and not so much the means. I&amp;#39;m going to stay in my camp working on more elegant tools for you to use. It&amp;#39;s nice that there&amp;#39;s some symbiosis between the three groups. We should all recognize that we need each other.&lt;/p&gt;
&lt;p&gt;
Except for camp 4. You&amp;#39;re the reason why we have crappy insurance portals.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
