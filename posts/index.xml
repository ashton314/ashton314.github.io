<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical Blog on Lambda Land</title>
    <link>https://lambdaland.org/posts/</link>
    <description>Recent content in Technical Blog on Lambda Land</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lambdaland.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why You Should Resist Surveillance</title>
      <link>https://lambdaland.org/posts/2024-09-26_resist_surveillance/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-09-26_resist_surveillance/</guid>
      <description>&lt;p&gt;I got to visit the Stasi museum in Berlin this week, and it gave me a newfound appreciation for why it&amp;rsquo;s important to resist surveillance. Interestingly, surveillance is not exclusively limited to one kind of government: it can appeal to both left- and right-wing governments, and corporations in the digital age use surveillance to make money. In every form, surveillance is evil and must be resisted.&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;Stasi = Abbreviation of &lt;em&gt;Stadt Sicherheit&lt;/em&gt; (&amp;ldquo;state security&amp;rdquo; in German).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For those of you who don&amp;rsquo;t know, the Stasi were the secret police of the communist regime in East Germany. They employed massive resources to spy upon and surveil East German citizens, and they kept careful track of anyone who showed signs of dissatisfaction with the state. They employed massive numbers of informal collaborators—mere citizens—who would spy on their neighbors and report back to the Stasi.&lt;/p&gt;
&lt;p&gt;I got to go there with my dad, and he remarked on how much of a drag on the economy the Stasi must have been. Think of it: the country funneled incredibly vast resources into spying on its own citizens and for what? It was claimed to be a protection against domestic terrorists and the like, but in reality, the Stasi was oppressing and discouraging anyone who might be disgruntled with those in power and the way they were running things.&lt;/p&gt;
&lt;div class=&#34;epigraph&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;The Stasi were nominally there to ensure the security of the &lt;em&gt;state&lt;/em&gt;. In reality they were ensuring the security of the &lt;em&gt;regime&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;This is such an important distinction! A state has a legitimate interest in protecting its own citizens from terrorism and preventing criminal activity. But a democratic government &lt;em&gt;must never&lt;/em&gt; instill fear in its citizens because of their opinions with how things should change. For a democracy to work the &lt;em&gt;only&lt;/em&gt; legitimate way to obtain the consent of the governed is if they can think express their ideas, frustrations, and concerns freely. (In a proper non-violent manner, of course.)&lt;/p&gt;
&lt;div class=&#34;epigraph&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Surveillance suppresses free thought.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Think about it: if you know that you will be quizzed on something, you will pay better attention to what is being taught. If you know that your actions are being watched by someone who has the ability to influence your life, you start to change your behavior. Remember, there are people who, if they don&amp;rsquo;t like you, can make your life miserable. Imagine what detailed, personal knowledge enables for people who don&amp;rsquo;t like the categories you fit into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The owner of an HOA who doesn&amp;rsquo;t like your political leanings goes to excessive lengths to fine you for minor infractions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An insurance agency illegally profiles you and considers you higher risk for their portfolio because of some underlying health conditions and life circumstances you are in. They then find ways to decline service or coverage when you need it most.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Someone is elected to office. He knows you didn&amp;rsquo;t vote for him, so he puts pressure through back channels to slow down or prevent you from getting the services you need. Now, for example, you can&amp;rsquo;t travel internationally to visit your family because your file is marked for some reason and you&amp;rsquo;re fighting a Kafkaesque process to clear it up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A company uses your internet browsing history to profile your interests, fears, and hopes. They use sophisticated artificial intelligence to craft social media feeds crafted to be highly addicting to you. They erode your self-discipline so that they can make some more money.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surveillance is the means why which massive control is enabled. If you care about protecting &lt;em&gt;your&lt;/em&gt; freedom and &lt;em&gt;your&lt;/em&gt; agency, resist surveillance—whether it be by a government or a corporation. They may say that it&amp;rsquo;s in your own best interest: to make you safer or to serve up content that is catered to your tastes, but they are lying. It is all done in self-interest: to protect their regime or to turn their profits—all at &lt;em&gt;your&lt;/em&gt; expense.&lt;/p&gt;
&lt;p&gt;Take your privacy back. Visiting the &lt;a href=&#34;https://eff.org/&#34;&gt;EFF&lt;/a&gt; is a great way to get started.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>First-Class Helper Functions</title>
      <link>https://lambdaland.org/posts/2024-09-11_parameterized_decisions/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-09-11_parameterized_decisions/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re going to be writing a &lt;a href=&#34;https://en.wikipedia.org/wiki/Brainfuck&#34;&gt;BF&lt;/a&gt; compiler for a class I&amp;rsquo;m in. Last night I threw together a little interpreter for the program in about an hour; it doesn&amp;rsquo;t do input—that should be easy to add—but it&amp;rsquo;s enough to handle &lt;a href=&#34;https://github.com/cwfitzgerald/brainfuck-benchmark&#34;&gt;some benchmarks&lt;/a&gt; for the language, albeit slowly. You can see my repository &lt;a href=&#34;https://codeberg.org/ashton314/brainfreeze&#34;&gt;on Codeberg&lt;/a&gt; for the source code.&lt;/p&gt;
&lt;p&gt;I needed one function to do two closely related jobs—the logic was identical, but some parameters needed to change. Fortunately, first-class functions in your language make it trivial to parameterize your programs in elegant ways.&lt;/p&gt;
&lt;p&gt;For those unfamiliar, a BF program looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;++++++++++&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&amp;gt;+++++++&amp;gt;++++++++++&amp;gt;+++&amp;gt;+&amp;lt;&amp;lt;&amp;lt;&amp;lt;-&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&amp;gt;++.&amp;gt;+.+++++++..+++.&amp;gt;++.&amp;lt;&amp;lt;+++++++++++++++.&amp;gt;.+++.------.--------.&amp;gt;+.&amp;gt;.&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That program prints &lt;code&gt;Hello, World!&lt;/code&gt;. Here&amp;rsquo;s the spec for the language, taken from &lt;a href=&#34;https://github.com/sunjay/brainfuck/blob/master/brainfuck.md&#34;&gt;this repo&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;  move the pointer right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  move the pointer left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;  increment the current cell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;  decrement the current cell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;  output the value of the current cell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt;  replace the value of the current cell with input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&lt;/code&gt;  jump to the matching &lt;code&gt;]&lt;/code&gt; instruction if the current value is zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;]&lt;/code&gt;  jump to the matching &lt;code&gt;[&lt;/code&gt; instruction if the current value is &lt;strong&gt;not&lt;/strong&gt; zero&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, BF is a little Turing machine: you have a big array of memory and a pointer into that array. The commands move the pointer around and can set or check the value pointed at.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; characters form loops and need to be balanced. In my interpreter I wanted to run a preprocessing step so that when I encountered a &lt;code&gt;[&lt;/code&gt; or a &lt;code&gt;]&lt;/code&gt; I would know how far to jump instead of having to search the program for the matching bracket. Here&amp;rsquo;s the top-level function to modify the program vector to replace &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; with a struct containing how far to jump:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;struct&lt;/span&gt; jmp &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;amount&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:transparent&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;struct&lt;/span&gt; jmp-forward jmp &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:transparent&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; replaces a [ command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;struct&lt;/span&gt; jmp-backward jmp &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:transparent&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; replaces a ] command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;preprocess-loops! prog&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;i &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;in-range&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-length&lt;/span&gt; prog&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; prog i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;#\[&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-set!&lt;/span&gt; prog i &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog i &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;#\]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-set!&lt;/span&gt; prog i &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog i &lt;span style=&#34;color:#b48ead&#34;&gt;-1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That &lt;code&gt;find-matching&lt;/code&gt; function was a little tricky: in the case of searching for a &lt;code&gt;]&lt;/code&gt; it would have to walk &lt;em&gt;forward&lt;/em&gt; looking for a &lt;code&gt;]&lt;/code&gt; character or a &lt;code&gt;(jmp-backward …)&lt;/code&gt; struct, and it would have to walk &lt;em&gt;backward&lt;/em&gt; looking for a &lt;code&gt;[&lt;/code&gt; character or &lt;code&gt;(jmp-forward …)&lt;/code&gt; struct. The naïve way to do this would be to have a bunch of &lt;code&gt;if&lt;/code&gt; expressions dispatching on the &lt;code&gt;&#39;close&lt;/code&gt; or &lt;code&gt;&#39;open&lt;/code&gt; passed to &lt;code&gt;find-matching&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start offset kind &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;stack &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;addr &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; start offset&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;current-instr &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; prog addr&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eq?&lt;/span&gt; kind &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eqv?&lt;/span&gt; current-instr &lt;span style=&#34;color:#a3be8c&#34;&gt;#\]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-backward? current-instr&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; stack&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-forward offset&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; start&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; kind &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; stack &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; this isn&amp;#39;t our close ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eqv?&lt;/span&gt; current-instr &lt;span style=&#34;color:#a3be8c&#34;&gt;#\[&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-forward? current-instr&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; start&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; kind &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; stack &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;   &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; deepen stack because we found another [&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; start&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; kind stack&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eqv?&lt;/span&gt; current-instr &lt;span style=&#34;color:#a3be8c&#34;&gt;#\[&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-forward? current-instr&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; stack&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eqv?&lt;/span&gt; current-instr &lt;span style=&#34;color:#a3be8c&#34;&gt;#\]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-backward? current-instr&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The need for a stack to find matching delimiters should be pretty obvious: if I have an open bracket &lt;code&gt;[&lt;/code&gt; and am looking for the matching close bracket &lt;code&gt;]&lt;/code&gt;, then I need to make sure I don&amp;rsquo;t get confused by other open-close pairs in between.&lt;/p&gt;
&lt;p&gt;The function above is pretty clunky: all the logic for checking if the stack is empty gets duplicated, and the logic for adding/decrementing the stack is a mirror image between the two branches of &lt;code&gt;if (eq? kind &#39;close)&lt;/code&gt;. There might be a few ways to rearrange this example so that it&amp;rsquo;s a little better, but there&amp;rsquo;s one big change we can make.&lt;/p&gt;
&lt;p&gt;The key insight is this: we have first-class functions, so why not parameterize the condition we use to check the current command to know if we should push the stack, pop the stack, or return a new struct? Here&amp;rsquo;s how we do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start offset kind &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;stack &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;close? x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-backward? x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eqv?&lt;/span&gt; x &lt;span style=&#34;color:#a3be8c&#34;&gt;#\]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;open? x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-forward? x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eqv?&lt;/span&gt; x &lt;span style=&#34;color:#a3be8c&#34;&gt;#\[&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; addr &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; start offset&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([(&lt;/span&gt;needle-pred other-pred bump jmp-maker&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eq?&lt;/span&gt; kind &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;values&lt;/span&gt; close? open? &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; jmp-forward&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;values&lt;/span&gt; open? close? &lt;span style=&#34;color:#b48ead&#34;&gt;-1&lt;/span&gt; jmp-backward&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;needle-pred &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; prog addr&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; stack&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;jmp-maker offset&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; bump offset&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; kind &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; stack &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;other-pred &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; prog addr&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; bump offset&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; kind &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; stack &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;find-matching prog start &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; bump offset&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; kind stack&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have &lt;code&gt;needle-pred&lt;/code&gt;, which returns true if the current command is the current thing we&amp;rsquo;re looking for; &lt;code&gt;other-pred&lt;/code&gt;, which tells us if we need to increase the stack; &lt;code&gt;bump&lt;/code&gt;, which just tells us which way to move the offset; and &lt;code&gt;jmp-maker&lt;/code&gt; which we use to build the right kind of struct to return when we&amp;rsquo;ve found the matching delimiter and the stack is empty.&lt;/p&gt;
&lt;p&gt;I really like that &lt;code&gt;let-values&lt;/code&gt; lets me bind a bunch of variables on a single condition; other languages can do something similar if they have e.g. tuples and rich pattern matching.&lt;/p&gt;
&lt;p&gt;First-class functions are a powerful way to parameterize your code, and it doesn&amp;rsquo;t just have to be with higher-order functions. Clearly, generic functions like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; would be basically useless without the ability to take functions as parameters. But you can also tailor the behavior of your program by pushing the differences between two or more possible scenarios into functions, and then select the proper set of functions in one conditional.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fancy lightweight prompts for Eshell and Zsh</title>
      <link>https://lambdaland.org/posts/2024-08-19_fancy_eshell_prompt/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-08-19_fancy_eshell_prompt/</guid>
      <description>&lt;p&gt;I started using the Zsh a few years ago and I&amp;rsquo;ve liked its completion features. I tried out Oh-my-zsh for a while and I liked the stock Robby Russel prompt. It gave me all the information I cared about: the status of the last command, current directory, and the state of the current Git repository.&lt;/p&gt;
&lt;p&gt;However, I didn&amp;rsquo;t like how slow Oh-my-zsh was making my shell startup. This mattered especially, I think, because my Emacs config would fire up a shell on startup to read the &lt;code&gt;ENV&lt;/code&gt; so it could configure some language servers properly. Irked at how long stuff was taking, I set out to build my own.&lt;/p&gt;
&lt;h2 id=&#34;fancy-zsh-prompt-no-extra-packages-needed&#34;&gt;
  Fancy Zsh prompt, no extra packages needed
  &lt;a class=&#34;anchor&#34; href=&#34;#fancy-zsh-prompt-no-extra-packages-needed&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the code for my Zsh prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# This is important to make some things play nicely with Emacs.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# They&amp;#39;re not critical to the shell prompt per se, but I think they&amp;#39;re&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# pretty useful.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Bail out of rest of setup if we&amp;#39;re coming in from TRAMP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;[[&lt;/span&gt; $TERM &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;dumb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unsetopt zle &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; PS1&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;$ &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt; -n &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;$EAT_SHELL_INTEGRATION_DIR&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;$EAT_SHELL_INTEGRATION_DIR&lt;span style=&#34;color:#a3be8c&#34;&gt;/zsh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# This tells the shell to expand the call to $(git_prompt_info)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setopt PROMPT_SUBST
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# This is a function that gathers information about the current HEAD.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# It will show the name of the branch if there is one, otherwise the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# short hash of the currently checked-out commit.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git_prompt_info &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;local&lt;/span&gt; ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ref&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;$(&lt;/span&gt;git symbolic-ref HEAD 2&amp;gt; /dev/null&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;||&lt;/span&gt; ref&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;$(&lt;/span&gt;git rev-parse --short HEAD 2&amp;gt; /dev/null&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;local&lt;/span&gt; STATUS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;local&lt;/span&gt; -a FLAGS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FLAGS&lt;span style=&#34;color:#81a1c1&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;--porcelain&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;DISABLE_UNTRACKED_FILES_DIRTY&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FLAGS&lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;--untracked-files=no&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;GIT_STATUS_IGNORE_SUBMODULES&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;*&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt; FLAGS&lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;--ignore-submodules=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;GIT_STATUS_IGNORE_SUBMODULES&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;:-&lt;/span&gt;dirty&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    STATUS&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;$(&lt;/span&gt;git status &lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;FLAGS&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt; 2&amp;gt; /dev/null &lt;span style=&#34;color:#eceff4&#34;&gt;|&lt;/span&gt; tail -n1&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[[&lt;/span&gt; -n $STATUS &lt;span style=&#34;color:#81a1c1&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; %F{red}[%F{yellow}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;ref&lt;span style=&#34;color:#eceff4&#34;&gt;#refs/heads/&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%F{red}]%f&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; %F{green}(%F{yellow}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;ref&lt;span style=&#34;color:#eceff4&#34;&gt;#refs/heads/&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%F{green})%f&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# If I&amp;#39;m on my home machine, don&amp;#39;t show the hostname in the prompt.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;`&lt;/span&gt;hostname&lt;span style=&#34;color:#a3be8c&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;~ ^my-home-machine.* &lt;span style=&#34;color:#81a1c1&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PROMPT&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;%(?:%F{green}➤:%F{red}!%?)%f %F{cyan}%~%f\$(git_prompt_info) %(!:# :)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Add &amp;#34;%m&amp;#34; to print the short hostname on other servers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PROMPT&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;%(?:%F{green}➤:%F{red}!%?)%f %F{blue}%m%f:%F{cyan}%~%f\$(git_prompt_info) %(!:# :)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s what the shell looks like in a clean repository:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/fancy_shells/clean.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;And here&amp;rsquo;s what it looks like in a repository with some uncommitted changes:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/fancy_shells/dirty.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;The green prompt will change to a red &lt;code&gt;!&lt;/code&gt; and show the exit status of the last command if it was anything other than 0.&lt;/p&gt;
&lt;p&gt;This should run pretty quick. The Git functions take almost no time to run, and the rest is straight-line Zsh script. Using this I was able to stop using Oh-my-zsh and dramatically reduce my shell startup time.&lt;/p&gt;
&lt;h2 id=&#34;eshell-prompt&#34;&gt;
  Eshell prompt
  &lt;a class=&#34;anchor&#34; href=&#34;#eshell-prompt&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I recently started using &lt;a href=&#34;https://www.masteringemacs.org/article/complete-guide-mastering-eshell&#34;&gt;Eshell&lt;/a&gt; in Emacs, and I wanted the same prompt there as I had in my terminal. Here&amp;rsquo;s how I got the same prompt, using some functions for the incomparable &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; Git porcelain.&lt;/p&gt;
&lt;p&gt;First, you need to define a function that generates the prompt for the current directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;defun&lt;/span&gt; fancy-shell &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;A pretty shell with git status&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;cwd &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;abbreviate-file-name &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;eshell/pwd&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ref &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;magit-get-shortname &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stat &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;magit-file-status&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x-stat eshell-last-command-status&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;git-chunk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;%s%s%s &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;propertize&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; stat &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;font-lock-face&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; stat &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;propertize&lt;/span&gt; ref &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;font-lock-face&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;propertize&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; stat &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;font-lock-face&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; stat &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;propertize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;%s %s %s$ &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; x-stat&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;propertize&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;!%s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;font-lock-face&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; x-stat&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;propertize&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;➤&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;font-lock-face&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; x-stat&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;propertize&lt;/span&gt; cwd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;font-lock-face&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;#45babf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             git-chunk&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;read-only&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;front-sticky&lt;/span&gt;   &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;font-lock-face read-only&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;rear-nonsticky&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;font-lock-face read-only&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that that function is defined, you can tell Eshell to use that to make the shell prompt. (It&amp;rsquo;s also good to set &lt;code&gt;eshell-prompt-regexp&lt;/code&gt; so it knows where the prompt begins and ends.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;setopt eshell-prompt-function &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;fancy-shell&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;setopt eshell-prompt-regexp &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;^[^#$\n]* [$#] &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;setopt eshell-highlight-prompt &lt;span style=&#34;color:#8fbcbb&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It looks basically the same as the Zsh prompt, except there&amp;rsquo;s always a &lt;code&gt;$&lt;/code&gt; character at the end of the prompt. This is just to make Emacs&amp;rsquo; prompt-parsing easier.&lt;/p&gt;
&lt;p&gt;If you are curious about using Eshell, you should use Eshell in concert with &lt;a href=&#34;https://codeberg.org/akib/emacs-eat&#34;&gt;Eat&lt;/a&gt;, which runs commands in a little terminal emulator. This makes interactive programs like code REPLs or programs that use character escape codes work correctly. (You can even run &lt;code&gt;emacs -nw&lt;/code&gt; and have it work! Madness!) I can use Eshell for more than 90% of what I need to do in a shell now, and that&amp;rsquo;s pretty nice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Zero-Knowledge Proofs and Secure Remote Password (SRP) Protocol</title>
      <link>https://lambdaland.org/posts/2024-08-06_zkp/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-08-06_zkp/</guid>
      <description>&lt;p&gt;Today I learned about using zero-knowledge proofs in the context of passwords. These are my rough-and-ready notes from reading. Apparently OpenSSL has an implementation of the SRP algorithm.&lt;/p&gt;
&lt;h2 id=&#34;math-based-zkp-example&#34;&gt;
  Math-based ZKP example
  &lt;a class=&#34;anchor&#34; href=&#34;#math-based-zkp-example&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;Source for this example comes from &lt;a href=&#34;https://en.wikipedia.org/wiki/Zero-knowledge_proof#Discrete_log_of_a_given_value&#34;&gt;Wikipedia&lt;/a&gt;. It might be good to read that in tandem with these notes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this example Peggy is the person who wishes to &lt;em&gt;prove&lt;/em&gt; knowledge about something to Victor, the &lt;em&gt;verifier&lt;/em&gt;. Peggy is proving that she knows some value 
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://lambdaland.org/katex/katex.min.css&#34; /&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/katex.min.js&#34;&gt;&lt;/script&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;
  \(x\)
&lt;/span&gt;
, but she doesn&amp;rsquo;t want to reveal the value of &lt;span&gt;
  \(x\)
&lt;/span&gt;
.&lt;/p&gt;
&lt;p&gt;Peggy and Victor need to share a large prime &lt;span&gt;
  \(p\)
&lt;/span&gt;
 and a generator &lt;span&gt;
  \(g\)
&lt;/span&gt;
. (This means that &lt;span&gt;
  \(g\)
&lt;/span&gt;
 and &lt;span&gt;
  \(p\)
&lt;/span&gt;
 must be relatively prime.)&lt;/p&gt;
&lt;p&gt;Peggy computes &lt;span&gt;
  \(g^x \mod{p} = y\)
&lt;/span&gt;
 and sends &lt;span&gt;
  \(y\)
&lt;/span&gt;
 to Victor.&lt;/p&gt;
&lt;p&gt;Peggy generates a random number &lt;span&gt;
  \(r\)
&lt;/span&gt;
 and computes &lt;span&gt;
  \(C = g^r \mod{p}\)
&lt;/span&gt;
 and sends &lt;span&gt;
  \(C\)
&lt;/span&gt;
 to Victor.&lt;/p&gt;
&lt;p&gt;Victor randomly issues one of two challenges:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Victor asks for &lt;span&gt;
  \(r\)
&lt;/span&gt;
. Peggy sends him &lt;span&gt;
  \(r\)
&lt;/span&gt;
 and Victor verifies that &lt;span&gt;
  \(C\)
&lt;/span&gt;
 matches &lt;span&gt;
  \(g^r \mod{p}\)
&lt;/span&gt;
.&lt;/li&gt;
&lt;li&gt;Victor asks for &lt;span&gt;
  \(s = (x &amp;#43; r) \mod{(p-1)}\)
&lt;/span&gt;
. Peggy computes this and sends the result to Victor. Victor checks that &lt;span&gt;
  \(g^s \equiv (C \cdot y) \mod{p}\)
&lt;/span&gt;
.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Repeat process &lt;span&gt;
  \(n\)
&lt;/span&gt;
 times to drive the probability that Peggy was just guessing to &lt;span&gt;
  \(\frac{1}{2^n}\)
&lt;/span&gt;
.&lt;/p&gt;
&lt;p&gt;The Wikipedia article has a good explanation for how an attacker could not mimic knowing &lt;span&gt;
  \(x\)
&lt;/span&gt;
 with this interactive proof.&lt;/p&gt;
&lt;h3 id=&#34;digression-properties-of-exponents-modulo-a-prime&#34;&gt;
  Digression: properties of exponents modulo a prime
  &lt;a class=&#34;anchor&#34; href=&#34;#digression-properties-of-exponents-modulo-a-prime&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The last step works because&lt;/p&gt;
&lt;span&gt;
  \(\begin{aligned}
C \cdot y &amp;amp;\equiv g^r \cdot g^x &amp;amp;\mod{p} \\
          &amp;amp;\equiv g^{r &amp;#43; x \mod{p-1}} &amp;amp;\mod{p}
\end{aligned}\)
&lt;/span&gt;

&lt;p&gt;When working &lt;span&gt;
  \(\mod{p}\)
&lt;/span&gt;
, operations on combining exponents are &lt;span&gt;
  \(\mod{p-1}\)
&lt;/span&gt;
. This is a consequence of Fermat&amp;rsquo;s Little Theorem. Proof:&lt;/p&gt;
&lt;span&gt;
  \(a^e = a^{p-1} \cdot a^{p-1} \cdot a^{p-1} \cdots a^n\)
&lt;/span&gt;

&lt;p&gt;Where &lt;span&gt;
  \(a^{p-1}\cdot a^{p-1} \cdots a^{p-1} \equiv 1 \mod{p}\)
&lt;/span&gt;
 by Fermat&amp;rsquo;s theorem, and &lt;span&gt;
  \(n &amp;lt; p\)
&lt;/span&gt;
 and &lt;span&gt;
  \(e = m(p-1) &amp;#43; n\)
&lt;/span&gt;
 by the division algorithm. Therefore,
&lt;span&gt;
  \(n \equiv e \pmod{p-1}\)
&lt;/span&gt;
.&lt;/p&gt;
&lt;h2 id=&#34;zkps-used-for-password-based-authentication&#34;&gt;
  ZKPs used for password-based authentication
  &lt;a class=&#34;anchor&#34; href=&#34;#zkps-used-for-password-based-authentication&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The above framework is not useful as-is for password authentication.&lt;/p&gt;
&lt;p&gt;There is a method for verifying that a user knows a password without revealing the password to the server. The standard is called &amp;ldquo;SRP&amp;rdquo; (Secure Remote Password) and there&amp;rsquo;s at least a version 6. As far as I can tell, version 6 is the most up-to-date version as of writing.&lt;/p&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol&#34;&gt;SRP Protocol Wikipedia article&lt;/a&gt; has a good explaination.&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;To convert between PostScript format (&lt;code&gt;.ps&lt;/code&gt;) and PDF, run &lt;code&gt;ps2pdf srp6.ps&lt;/code&gt;. On macOS I got the &lt;code&gt;ps2pdf&lt;/code&gt; program by installing the &lt;code&gt;ghostscript&lt;/code&gt; package via Homebrew.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://srp.stanford.edu/design.html&#34;&gt;SRP protocol design document&lt;/a&gt;; includes links to a paper that I followed. I can&amp;rsquo;t find this paper in any official publication registry. URL is: &lt;a href=&#34;http://srp.stanford.edu/srp6.ps&#34;&gt;http://srp.stanford.edu/srp6.ps&lt;/a&gt; and the title is: &amp;ldquo;SRP-6: Improvements and Refinements to the Secure Remote Password Protocol&amp;rdquo;. Note: it comes in PostScript format, so you&amp;rsquo;ll likely want to convert it to PDF to read it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://crypto.stackexchange.com/questions/25338/why-arent-zero-knowledge-proofs-used-in-practice-for-authentication&#34;&gt;SE post: &amp;ldquo;Why aren&amp;rsquo;t ZKPs used in practice for authentication?&amp;rdquo;&lt;/a&gt;, top answer is excellent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;running-srp-6a&#34;&gt;
  Running SRP-6a
  &lt;a class=&#34;anchor&#34; href=&#34;#running-srp-6a&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Shared: large safe prime &lt;span&gt;
  \(N\)
&lt;/span&gt;
 (suggested that &lt;span&gt;
  \(N = 2 * p &amp;#43; 1\)
&lt;/span&gt;
 where &lt;span&gt;
  \(p\)
&lt;/span&gt;
 is prime) and primitive root &lt;span&gt;
  \(g\)
&lt;/span&gt;
. (I.e., &lt;span&gt;
  \(N\)
&lt;/span&gt;
 and &lt;span&gt;
  \(g\)
&lt;/span&gt;
 must be relatively prime.)&lt;/p&gt;
&lt;p&gt;In this algorithm, the values &lt;span&gt;
  \(a\)
&lt;/span&gt;
 and &lt;span&gt;
  \(b\)
&lt;/span&gt;
 will be randomly generated. At the end, both parties will have a secret key &lt;span&gt;
  \(K\)
&lt;/span&gt;
 that they share.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client sends identifier &lt;span&gt;
  \(I\)
&lt;/span&gt;
 to Server.&lt;/li&gt;
&lt;li&gt;Server looks up the salt and the verification token &lt;span&gt;
  \((s,v)\)
&lt;/span&gt;
 associated with &lt;span&gt;
  \(I\)
&lt;/span&gt;
 and sends just &lt;span&gt;
  \(s\)
&lt;/span&gt;
 to Client.&lt;/li&gt;
&lt;li&gt;Client computes hash of salt, ID, and password &lt;span&gt;
  \(x = H(s, I, P)\)
&lt;/span&gt;
.&lt;/li&gt;
&lt;li&gt;Client generates a random value &lt;span&gt;
  \(a\)
&lt;/span&gt;
 and computes &lt;span&gt;
  \(A = g^a\)
&lt;/span&gt;
. Client sends &lt;span&gt;
  \(A\)
&lt;/span&gt;
 to Server.&lt;/li&gt;
&lt;li&gt;Server and client compute &lt;span&gt;
  \(k = H(N, g)\)
&lt;/span&gt;
. This is an enhancement from the older SRP-6 algorithm.&lt;/li&gt;
&lt;li&gt;Server generates a random value &lt;span&gt;
  \(b\)
&lt;/span&gt;
 and computes &lt;span&gt;
  \(B = kv &amp;#43; g^b\)
&lt;/span&gt;
. Server sends &lt;span&gt;
  \(B\)
&lt;/span&gt;
 to client.&lt;/li&gt;
&lt;li&gt;Server and Client both compute &lt;span&gt;
  \(u = H(A,B)\)
&lt;/span&gt;
. This is called the &lt;em&gt;scrambler&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now both parties have access to &lt;span&gt;
  \(A, B, k, u\)
&lt;/span&gt;
 and &lt;span&gt;
  \(g, N\)
&lt;/span&gt;
 of course. With this they can each create a shared session key:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Client computation&lt;/dt&gt;
&lt;dd&gt;&lt;span&gt;
  \(K = (B-kg^x) ^ {(a &amp;#43; ux)}\)
&lt;/span&gt;
&lt;/dd&gt;
&lt;dt&gt;Server computation&lt;/dt&gt;
&lt;dd&gt;&lt;span&gt;
  \(K = (Av^u)^b\)
&lt;/span&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The server and client must now both verify that they have the same value &lt;span&gt;
  \(K\)
&lt;/span&gt;
. One simple way to do this is to hash &lt;span&gt;
  \(K\)
&lt;/span&gt;
 (potentially with some other salting information like &lt;span&gt;
  \(A\)
&lt;/span&gt;
 and &lt;span&gt;
  \(B\)
&lt;/span&gt;
) and transmit that. Example from the paper:&lt;/p&gt;
&lt;span&gt;
  \( \begin{aligned}
 M_1 &amp;amp;= H(A,B,K) \\
 M_2 &amp;amp;= H(A,M_1,K)
\end{aligned}\)
&lt;/span&gt;

&lt;p&gt;The Client computes &lt;span&gt;
  \(M_1\)
&lt;/span&gt;
 and sends it to the server. The server should have enough information to recompute this value. Once that&amp;rsquo;s done, the server can compute &lt;span&gt;
  \(M_2\)
&lt;/span&gt;
 and send that back to the Client. (This last step is optional.) Now both parties know that they&amp;rsquo;ve got the right key. Use &lt;span&gt;
  \(K\)
&lt;/span&gt;
 as the session token.&lt;/p&gt;
&lt;p&gt;The Wikipedia article mentions that it is important that the client send its proof of &lt;span&gt;
  \(K\)
&lt;/span&gt;
 (i.e., the proof is the value &lt;span&gt;
  \(M_1\)
&lt;/span&gt;
) &lt;em&gt;first&lt;/em&gt;, and that the server should &lt;em&gt;not&lt;/em&gt; reply with &lt;span&gt;
  \(M_2\)
&lt;/span&gt;
 if verification fails.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the communication flow would look like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client &lt;span&gt;
  \(I\)
&lt;/span&gt;
 → Server&lt;/li&gt;
&lt;li&gt;Server &lt;span&gt;
  \(g,N,s,B\)
&lt;/span&gt;
 → Client&lt;/li&gt;
&lt;li&gt;Client &lt;span&gt;
  \(A, M_1\)
&lt;/span&gt;
 → Server&lt;/li&gt;
&lt;li&gt;Server &lt;span&gt;
  \(M_2\)
&lt;/span&gt;
 → Client&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the Server and Client can communicate using secret key &lt;span&gt;
  \(K\)
&lt;/span&gt;
, which was only granted to the Client because it had the password that corresponded to the stored verifier &lt;span&gt;
  \(v\)
&lt;/span&gt;
 on the server.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How, Where, and Why I Take Notes</title>
      <link>https://lambdaland.org/posts/2024-07-29_note_mediums/</link>
      <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-07-29_note_mediums/</guid>
      <description>&lt;p&gt;I take a blend of digital and hand-written notes. It&amp;rsquo;s a bit of a hodgepodge, but it&amp;rsquo;s working. I used to lean heavily into full-digital notes, but I started drifting towards a mixture of digital and hand-written notes. Initially it was complicated, but I think I&amp;rsquo;m converging on a good setup. What I describe here will continue to evolve I am sure, but I am enjoying where it&amp;rsquo;s currently at.&lt;/p&gt;
&lt;h2 id=&#34;pen-and-paper-is-best-for-thinking&#34;&gt;
  Pen and paper is best for thinking
  &lt;a class=&#34;anchor&#34; href=&#34;#pen-and-paper-is-best-for-thinking&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve fallen down the fountain pen rabbit hole. I used to write with a Pilot G2 pen, and I loved how dark ink was. The primary drawback was that it bled through the paper of my Leuchtturm notebooks a little bit. I also had some problems with the extra-fine 0.38 pens: after a few months of use, they&amp;rsquo;d break before all the gel ink had been expended. This was frustrating.&lt;/p&gt;
&lt;p&gt;Now I write with a Lamy Al-Star with an extra-fine nib. I use Pilot&amp;rsquo;s black &lt;em&gt;take-sumi iroshizuku&lt;/em&gt; ink. It is &lt;em&gt;lovely&lt;/em&gt; to write with this pen. Compared to the G2, the fountain pen writes just as fine as the 0.38 G2, but the ink doesn&amp;rsquo;t skip, the tip never breaks, and the ink doesn&amp;rsquo;t bleed through the paper at all. Sure, the fountain pen requires a little more maintenance than a gel or ballpoint pen, but it is fun to have a little mechanical thing to maintain and form simple rituals around.&lt;/p&gt;
&lt;p&gt;Getting the fountain pen had the curious effect of making me want to take &lt;em&gt;more&lt;/em&gt; notes by hand. I started writing a lot more. But I have a bunch of infrastructure set up for digital note taking, so when I initially started writing more, I would get a little lost as to where I had put certain notes. I didn&amp;rsquo;t like that.&lt;/p&gt;
&lt;p&gt;I did find that I enjoyed writing my thoughts out—it was like doing a one-person rubber-duck session. I strongly believe that writing helps you think: it forces you to be explicit with your thoughts and it helps you notice gaps in your thinking. This can push you to answer questions that you wouldn&amp;rsquo;t have asked otherwise.&lt;/p&gt;
&lt;h2 id=&#34;quasi-digital-for-classes&#34;&gt;
  Quasi-digital for classes
  &lt;a class=&#34;anchor&#34; href=&#34;#quasi-digital-for-classes&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In class I take notes on an iPad with an Apple Pencil. I like that I can keep all my notes for all my classes with me at all times. I also like that I can write in different colors when needed, the ability to download or take a picture of a slide and mark it up, or do some lightweight diagraming. I feel like it gives me the best of both worlds: I get the storage, versatility, and searchability of digital notes, but I get the memory benefits of handwritten notes since I am &lt;em&gt;writing&lt;/em&gt; rather than &lt;em&gt;typing&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;full-digital-for-research&#34;&gt;
  Full digital for research
  &lt;a class=&#34;anchor&#34; href=&#34;#full-digital-for-research&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;dl&gt;
&lt;dt&gt;Backlinks:&lt;/dt&gt;
&lt;dd&gt;The set of notes that link &lt;em&gt;to&lt;/em&gt; a given note. Suppose note A has a link to note B. If I am looking at note B, then A will be in the set of B&amp;rsquo;s backlinks.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;p&gt;Whenever I have something that I am researching, I typically keep notes in a plain-text file on my computer. (I use &lt;a href=&#34;https://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; most of the time, naturally.) This lets me link and search through my notes really easily. Being on a computer means that it is easy to copy-paste things I want to remember and then store links to recover the source. I use &lt;a href=&#34;https://protesilaos.com/emacs/denote&#34;&gt;Denote&lt;/a&gt; to organize my notes; Denote lets me format my notes consistently, as well as recover backlinks.&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;Fun aside: I recently &lt;a href=&#34;https://github.com/protesilaos/denote/commit/4318efe7e8ce2bcd2cafa386a903054273203fd5&#34;&gt;contributed some code to Denote&lt;/a&gt; that adds an indicator in the mode-line if the currently-visited note has a backlink. I like getting a heads-up that there&amp;rsquo;s some digging to do.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I also will put notes that I made by hand during a thinking session into my Denote files after they&amp;rsquo;ve had a little time to marinate in my head. I will typically use this step to flesh out ideas that I only got in skeleton form in my notebook.&lt;/p&gt;
&lt;p&gt;I really like Denote: it is simple, requires no external dependencies, and it plays nicely with synching systems. Today, thanks to my tag system, links, backlinks, and some searching, I ran into some notes I had taken a year ago and forgot about—but now these notes are helping me with my work right now!&lt;/p&gt;
&lt;h2 id=&#34;summary-what-i-write-and-where&#34;&gt;
  Summary: what I write and where
  &lt;a class=&#34;anchor&#34; href=&#34;#summary-what-i-write-and-where&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;After thinking a little bit about what mode of note taking benefits most from a given medium, I came up with the following system for myself:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Meeting with my advisor&lt;/dt&gt;
&lt;dd&gt;I take meeting notes by hand on paper, usually in my notebook.&lt;/dd&gt;
&lt;dt&gt;Thinking through something&lt;/dt&gt;
&lt;dd&gt;Again, hand-written, usually on my Rhodia pads as these are typically ephemeral notes. If I get a good idea, I&amp;rsquo;ll write it down in my notebook and then transfer it to my digital Denote notes later.&lt;/dd&gt;
&lt;dt&gt;Reading notes&lt;/dt&gt;
&lt;dd&gt;If I am reading a technical paper or book that I want to understand, I&amp;rsquo;ll take these notes in my notebook.&lt;/dd&gt;
&lt;dt&gt;Research lab notes&lt;/dt&gt;
&lt;dd&gt;Digital. I have a template that I fill out every day that helps me keep track of basic information and links all of my daily lab notes to a big note for the whole project. This makes it easy for me to go to that project note and flip through the backlinks.&lt;/dd&gt;
&lt;dt&gt;Class notes&lt;/dt&gt;
&lt;dd&gt;While I only have one more class left, I still take class notes on my iPad. I feel like class notes benefit the most from a digital-handwriting hybrid.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Should you adopt the setup I have? No. You should arrive to your own system yourself. The only thing I would advise anyone to take from my experience is that you should put a little time and effort into being &lt;em&gt;intentional&lt;/em&gt; about how you take notes and how your organize them. You need to find a system that works for &lt;em&gt;you&lt;/em&gt;, and only &lt;em&gt;you&lt;/em&gt; can do the work to make that happen.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Evolving Languages Faster with Type Tailoring</title>
      <link>https://lambdaland.org/posts/2024-07-15_type_tailoring/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-07-15_type_tailoring/</guid>
      <description>&lt;p&gt;Programming languages are too slow! I&amp;rsquo;m not talking about &lt;em&gt;execution&lt;/em&gt; speed—I&amp;rsquo;m talking about &lt;em&gt;evolution&lt;/em&gt; speed. Programmers are always building new libraries and embedded DSLs, but the host programming language—particularly its type system—doesn&amp;rsquo;t understand the domain-specific aspects of these things.&lt;/p&gt;
&lt;h2 id=&#34;example-problem-my-type-system-doesn-t-speak-pcre&#34;&gt;
  Example problem: my type system doesn&amp;rsquo;t speak PCRE
  &lt;a class=&#34;anchor&#34; href=&#34;#example-problem-my-type-system-doesn-t-speak-pcre&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Consider regular expressions—most programmers would understand that a regular expression like &lt;code&gt;[a-z]+([0-9][0-9])&lt;/code&gt;, if it matches, will capture two digits in the first capture group. If I try to write this code in Rust or Typed Racket, the type checker complains:&lt;/p&gt;




&lt;div class=&#34;book-tabs&#34;&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-opening_example&#34; id=&#34;tabs-opening_example-0&#34; checked=&#34;checked&#34; /&gt;
  &lt;label for=&#34;tabs-opening_example-0&#34;&gt;Example: Rust&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;use&lt;/span&gt; regex::Regex&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; re &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Regex::new&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;[a-z]+([0-9][0-9])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;unwrap&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;caps&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;captures&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;dent42&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println!&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;id number: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; caps&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rustc [E0277]: `Option&amp;lt;regex::Match&amp;lt;&amp;#39;_&amp;gt;&amp;gt;` doesn&amp;#39;t implement `std::fmt::Display`
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the trait `std::fmt::Display` is not implemented for `Option&amp;lt;regex::Match&amp;lt;&amp;#39;_&amp;gt;&amp;gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-opening_example&#34; id=&#34;tabs-opening_example-1&#34;  /&gt;
  &lt;label for=&#34;tabs-opening_example-1&#34;&gt;Example: Typed Racket&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;typed/racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user-idnum &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;username : String&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; : Number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; re &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;[a-z]+([0-9][0-9])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;regexp-match&lt;/span&gt; re username&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;string-&amp;gt;number&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;second&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bad username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;id number: ~a&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user-idnum &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;dent42&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example.rkt:7:22: Type Checker: Polymorphic function `second&amp;#39; could not be applied to arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Types: (List* a r (Listof t))  -&amp;gt; (r : ((! (cadr (0 0)) False) | (: (cadr (0 0)) False)) : (cadr (0 0)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (Listof a)  -&amp;gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Arguments: (Pairof String (Listof (U False String)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Expected result: String
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;The &lt;code&gt;(U τ₁ τ₂)&lt;/code&gt; syntax is a &lt;em&gt;type union&lt;/em&gt; of types &lt;code&gt;τ₁&lt;/code&gt; and &lt;code&gt;τ₂&lt;/code&gt;, whatever types those are. The equivalent of &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;/code&gt; in Typed Racket is &lt;code&gt;(U String False)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The problem is that getting the first capture group (&lt;code&gt;caps.get(1)&lt;/code&gt; in Rust, &lt;code&gt;(second m)&lt;/code&gt; in Typed Racket) returns an optional type (&lt;code&gt;Option&amp;lt;regex::Match&amp;gt;&lt;/code&gt; in Rust, &lt;code&gt;(Listof (U False String))&lt;/code&gt;. The thing is, we &lt;em&gt;know&lt;/em&gt; that since the regex match succeeded on line 5, &lt;code&gt;caps.get(1)&lt;/code&gt; (or &lt;code&gt;(second m)&lt;/code&gt;) should &lt;em&gt;definitely&lt;/em&gt; succeed because there was one capture group in the regex we matched. Instead, we&amp;rsquo;re forced to unwrap in Rust:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;println!&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;id number: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; caps&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;unwrap&lt;span style=&#34;color:#eceff4&#34;&gt;().&lt;/span&gt;as_str&lt;span style=&#34;color:#eceff4&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Likewise, in Typed Racket, we have to insert some casts and checks manually to convince the type checker that this code should run.&lt;/p&gt;
&lt;p&gt;This is a small example; the key point is this: &lt;em&gt;type systems usually aren&amp;rsquo;t smart enough to know about the structure of regexes&lt;/em&gt;&amp;mdash;all the compiler sees are opaque strings. This goes for things beyond regular expressions. Consider SQL queries, which are so often embedded as strings in languages: when a query goes wrong, you usually only find out at runtime.&lt;/p&gt;
&lt;p&gt;What would a solution look like? Some people have tried making a new way of writing regexes with composable objects that the type system has a better chance of understanding; that is a neat approach, but that both requires me to rewrite my program and doesn&amp;rsquo;t solve the issue of indexing into lists of known size (the results of a capture) more efficiently.&lt;/p&gt;
&lt;p&gt;Another option would be to make the type system smarter. But that too has its drawbacks: language implementers are often leery of tinkering with the type checker—and rightly so! So much relies on the type checker being correct. Moreover, even if you &lt;em&gt;did&lt;/em&gt; make the type checker able to understand regexes, someone&amp;rsquo;s going to build a new library tomorrow that will stump your type checker just as before.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a more attractive option: we can use the metaprogramming tools the language provides to teach the type system some new tricks. This is something that &lt;em&gt;end-users&lt;/em&gt; of languages can do without waiting for the language designer. We call this &lt;em&gt;type tailoring&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Type Tailoring&lt;/em&gt; is the title and subject of a paper I wrote with my advisor &lt;a href=&#34;https://users.cs.utah.edu/~blg/&#34;&gt;Ben Greenman&lt;/a&gt; and our coauthors &lt;a href=&#34;https://stchang.github.io/&#34;&gt;Stephen Chang&lt;/a&gt; and &lt;a href=&#34;https://www.khoury.northeastern.edu/home/matthias/&#34;&gt;Matthias Felleisen&lt;/a&gt;. It has been accepted at &lt;a href=&#34;https://2024.ecoop.org/&#34;&gt;European Conference on Object-Oriented Programming&lt;/a&gt; (ECOOP).&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;s1&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;s1&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
Like the ACM conference OOPSLA, ECOOP has in recent years focused on more than object-oriented programming. The name stuck around. ¯\_(ツ)_/¯
&lt;/span&gt;
You can get a preprint &lt;a href=&#34;https://lambdaland.org/files/2024_ecoop_type_tailoring.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sketch-of-a-solution&#34;&gt;
  Sketch of a solution
  &lt;a class=&#34;anchor&#34; href=&#34;#sketch-of-a-solution&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a high-level sketch of how we would solve the problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Something would notice that the regex has a single capture group.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;re.captures&lt;/code&gt; function would get this information and update the its type.&lt;/li&gt;
&lt;li&gt;This information would further by leveraged by the type of &lt;code&gt;caps&lt;/code&gt;, to indicate that &lt;code&gt;get(0)&lt;/code&gt; or &lt;code&gt;get(1)&lt;/code&gt; will always succeed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some years ago, my advisor made the &lt;a href=&#34;https://docs.racket-lang.org/trivial/index.html&#34;&gt;&lt;code&gt;trivial&lt;/code&gt; library&lt;/a&gt; for Typed Racket. It can tailor the following code so that it typechecks and runs efficiently:&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;The &lt;code&gt;trivial&lt;/code&gt; library is available as a Racket package. If you have Racket installed on your system, run &lt;code&gt;raco pkg add trivial&lt;/code&gt; to install it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;typed/racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; trivial trivial/list&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; add this to tailor program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user-idnum &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;username : String&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; : Number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; re &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;[a-z]+([0-9][0-9])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;regexp-match&lt;/span&gt; re username&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;string-&amp;gt;number&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;second&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bad username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;id number: ~a&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user-idnum &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;dent42&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;div class=&#34;book-tabs&#34;&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-before_after_tailoring&#34; id=&#34;tabs-before_after_tailoring-0&#34; checked=&#34;checked&#34; /&gt;
  &lt;label for=&#34;tabs-before_after_tailoring-0&#34;&gt;Before Tailoring&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type Checker: Polymorphic function `second&amp;#39; could not be applied to arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Types: (List* a r (Listof t))  -&amp;gt; (r : ((! (cadr (0 0)) False) | (: (cadr (0 0)) False)) : (cadr (0 0)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (Listof a)  -&amp;gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Arguments: (Pairof String (Listof (U False String)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Expected result: String
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-before_after_tailoring&#34; id=&#34;tabs-before_after_tailoring-1&#34;  /&gt;
  &lt;label for=&#34;tabs-before_after_tailoring-1&#34;&gt;After Tailoring&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id number: 42
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;For specific details on how the &lt;code&gt;trivial&lt;/code&gt; library works, see &lt;a href=&#34;#appendix-how-does-the-trivial-library-work&#34;&gt;§ Appendix: How does the trivial library work?&lt;/a&gt; at the end of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The problem is that, like Rust, Typed Racket must assign an &lt;em&gt;overly conservative&lt;/em&gt; type to the result of matching a regular expression. Consequently, the programmer has to insert casts. The &lt;code&gt;trivial&lt;/code&gt; library can analyze Typed Racket and insert these casts and checks &lt;em&gt;automatically&lt;/em&gt;. The end-result for the user is that this code Just Works™ as you would expect.&lt;/p&gt;
&lt;p&gt;Notice that the &lt;code&gt;trivial&lt;/code&gt; library is a &lt;em&gt;library&lt;/em&gt;&amp;mdash;it doesn&amp;rsquo;t require modifications to the compiler or type checker or anything. This means that normal users of programming languages can create their own tailorings without breaking the compiler or messing with the build pipeline.&lt;/p&gt;
&lt;h2 id=&#34;supporting-type-tailoring&#34;&gt;
  Supporting type tailoring
  &lt;a class=&#34;anchor&#34; href=&#34;#supporting-type-tailoring&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;What do you need to make type tailoring work? Let&amp;rsquo;s step back a second and look at what we need to do in the first place. Our problem is that the type checker doesn&amp;rsquo;t know as much about our program as we do. What we can do to teach the type checker is program the &lt;em&gt;elaboration step&lt;/em&gt;: surface syntax typically doesn&amp;rsquo;t have type annotations at every point; elaboration takes the syntax that a programmer writes, and adds types and type holes wherever needed. This elaborated syntax gets sent off to the constraint solver for type checking and inference.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/type_tailoring/elaboration_flow.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;How do we program the elaboration step? Almost all languages that have macros do type checking &lt;em&gt;after&lt;/em&gt; macroexpansion. This is crucial for type tailoring. We can write macros that add checks, casts, type annotations, or whatever else we need to make the type checker happy.&lt;/p&gt;
&lt;p&gt;Here are the key features that you &lt;em&gt;must&lt;/em&gt; have to make type tailoring work:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Type checking after elaboration&lt;/dt&gt;
&lt;dd&gt;Type checking &lt;em&gt;must&lt;/em&gt; come after elaboration to check the results of tailoring. Without this, it would be too easy to break the type system. Furthermore, if type checking comes after elaboration, we can leverage all the power of the type checker to do the heavy-lifting for us; all a tailoring has to do is give a few hints to the type checker here and there.&lt;/dd&gt;
&lt;dt&gt;Elaboration-time computation&lt;/dt&gt;
&lt;dd&gt;Most of the time this means that you need &lt;em&gt;procedural macros&lt;/em&gt;. Pattern-based macros (such as &lt;code&gt;syntax-case&lt;/code&gt; from Scheme or &lt;code&gt;macro_rules!&lt;/code&gt; from Rust) can only rearrange syntax, in a pattern → pattern transformation, and can&amp;rsquo;t perform arbitrary rewrites.&lt;/dd&gt;
&lt;dt&gt;AST datatype&lt;/dt&gt;
&lt;dd&gt;Without an AST datatype, tailorings are limited to using a token stream.&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;sn2&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;sn2&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
Rust&amp;rsquo;s procedural macros operate on token streams unfortunately.
&lt;/span&gt;
Sometimes it&amp;rsquo;s possible to convert a token stream to an AST, but you loose metadata and becomes unwieldy quickly.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;These are the essential elements, without which tailoring can&amp;rsquo;t happen. Besides these three things, you also will want some of the following tailoring features:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Hygienic macros&lt;/dt&gt;
&lt;dd&gt;Hygienic macros avoid the variable capture problem.&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;sn3&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;sn3&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
For more on the variable capture problem, see &lt;a href=&#34;https://lambdaland.org/posts/2023-10-17_fearless_macros/#scheme-macros-hygiene&#34;&gt;my post about fearless macros&lt;/a&gt;.
&lt;/span&gt;
In other words, I shouldn&amp;rsquo;t have to be concerned about the internals of the macros that I use. This also makes it so that I can compose macros with each other.&lt;/dd&gt;
&lt;dt&gt;Metadata&lt;/dt&gt;
&lt;dd&gt;Metaprogramming systems that can attach metadata directly to AST nodes can share information between different tailorings easily. (Keeping compile-time state off to the side is an alternative.)&lt;/dd&gt;
&lt;dt&gt;Controlling the order of expansion&lt;/dt&gt;
&lt;dd&gt;Tailorings that cooperate often need a way to control the order in which they run: one tailoring might depend on the results of another, and a third tailoring might analyze the output further.&lt;/dd&gt;
&lt;dt&gt;Accessing external data&lt;/dt&gt;
&lt;dd&gt;Some of the coolest tailorings reached out to external sources of data to augment type checking. Rust actually has a neat library called &lt;a href=&#34;https://github.com/launchbadge/sqlx&#34;&gt;SQLx&lt;/a&gt; that, at compile time, checks SQL strings against the schema of a database. There are several systems that do something similar.&lt;/dd&gt;
&lt;dt&gt;Type information&lt;/dt&gt;
&lt;dd&gt;A few of the systems that we looked at (Idris 1 and Scala 3) could inspect the types of arguments to macros. After expansion, the type checker would run again to check that the transformation&amp;rsquo;s result was well-typed. Since there were so few examples of this, it&amp;rsquo;s hard to say just how beneficial this is.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;No language supports all of these features—that&amp;rsquo;s exciting because it means there&amp;rsquo;s room to explore! In our paper we go into detail about each of these features and the kinds of tailoring they enable. We also have a chart showing how a handful of languages stack up against each other.&lt;/p&gt;
&lt;h2 id=&#34;you-might-have-invented-type-tailoring&#34;&gt;
  You might have invented type tailoring
  &lt;a class=&#34;anchor&#34; href=&#34;#you-might-have-invented-type-tailoring&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We invented the term &amp;ldquo;type tailoring&amp;rdquo;, but we didn&amp;rsquo;t invent the idea—programmers have wanted to teach their type systems how to understand domain-specific concerns for a long time. Here are just a few existing projects we found that were doing type tailoring:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rust&amp;rsquo;s &lt;a href=&#34;https://github.com/launchbadge/sqlx&#34;&gt;SQLx library&lt;/a&gt; reaches out to the database at compile-time to check if the schema in the code matches how the database is set up. This will warn you at compile-time if your query is malformed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Julia&amp;rsquo;s &lt;a href=&#34;https://juliahub.com/ui/Packages/General/StaticArrays/&#34;&gt;StaticArrays package&lt;/a&gt; rewrites lists of a static, known size into tuples. This lets the compiler track how long the lists are and automatically eliminates lots of bounds checks—handy when you&amp;rsquo;re doing lots of numerical work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elixir&amp;rsquo;s &lt;a href=&#34;https://phoenixframework.org/&#34;&gt;Phoenix web framework&lt;/a&gt; will check routes in your template files against your route handler; if you make a typo or forget to implement a handler for a route, Phoenix will warn you at compile-time. This feature is called &lt;a href=&#34;https://hexdocs.pm/phoenix/Phoenix.VerifiedRoutes.html&#34;&gt;verified routes&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, that&amp;rsquo;s just a small sample. Please see our paper for details on how these projects are using type tailoring, as well as for more examples that we found.&lt;/p&gt;
&lt;h2 id=&#34;type-tailoring-new-terms-new-libraries-new-horizons&#34;&gt;
  Type tailoring: new terms, new libraries, new horizons
  &lt;a class=&#34;anchor&#34; href=&#34;#type-tailoring-new-terms-new-libraries-new-horizons&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The big contributions of our paper are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We introduce the term &lt;em&gt;type tailoring&lt;/em&gt;. The ideas have appeared in many forms across many languages, but there hasn&amp;rsquo;t been any underlying rationale unifying their efforts. Now that we&amp;rsquo;ve identified the phenomenon, we can talk about and support it directly and consciously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We identified the main things you need to make tailoring work. Language designers can use this to build in better support for type tailoring in their languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We show users how tailorings can balance ease-of-use with features typically only found in dependent type systems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, we built two libraries: &lt;a href=&#34;https://docs.racket-lang.org/trivial/index.html&#34;&gt;&lt;code&gt;trivial&lt;/code&gt;&lt;/a&gt; for Racket—which tailors things like vectors, regular expressions, etc., and &lt;a href=&#34;https://github.com/ashton314/rhombus_dyn&#34;&gt;&lt;code&gt;Dyn&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/racket/rhombus-prototype&#34;&gt;Rhombus&lt;/a&gt;—which turns Rhombus into a gradually-typed language through a tailoring. We expect more will be built in the future.&lt;/p&gt;
&lt;p&gt;Again, please see our paper for all the details. Our paper comes with &lt;a href=&#34;https://zenodo.org/doi/10.5281/zenodo.10578596&#34;&gt;an artifact&lt;/a&gt; that contains all the code in the paper. You can simply download a Docker container to run the code and verify all our claims. Yay for reproducible research!&lt;/p&gt;
&lt;p&gt;If you have any questions, feel free to email me. (Email in the paper, as well as &lt;a href=&#34;https://lambdaland.org/#contact&#34;&gt;here on my blog&lt;/a&gt;.) If you&amp;rsquo;re going to ECOOP in Vienna this year, let me know and we can talk in person there!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;appendix-how-does-the-trivial-library-work&#34;&gt;
  Appendix: How does the trivial library work?
  &lt;a class=&#34;anchor&#34; href=&#34;#appendix-how-does-the-trivial-library-work&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here is the example with the &lt;code&gt;trivial&lt;/code&gt; library that we saw in &lt;a href=&#34;#sketch-of-a-solution&#34;&gt;§ Sketch of a solution&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;typed/racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; trivial trivial/list&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; add this to tailor program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user-idnum &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;username : String&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; : Number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; re &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;[a-z]+([0-9][0-9])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;regexp-match&lt;/span&gt; re username&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;string-&amp;gt;number&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;second&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bad username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;id number: ~a&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user-idnum &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;dent42&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Normally, Typed Racket rejects the code because the type of &lt;code&gt;m&lt;/code&gt; is too general to be applied to &lt;code&gt;second&lt;/code&gt;. Here is how the &lt;code&gt;trivial&lt;/code&gt; library tailors the example to make it work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, it overrides the &lt;a href=&#34;https://docs.racket-lang.org/reference/quote.html&#34;&gt;implicit &lt;code&gt;#%datum&lt;/code&gt; form&lt;/a&gt; that wraps literal values like the string &lt;code&gt;&amp;quot;[a-z]+([0-9][0-9])&amp;quot;&lt;/code&gt;; this lets it read the string and collect any interesting information about it at compile time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The library sees that the string has one set of matched parentheses; moreover, the pattern inside the parentheses consists entirely of digits. It attaches this information as a &lt;a href=&#34;https://docs.racket-lang.org/reference/stxprops.html#%28tech._syntax._property%29&#34;&gt;syntax property&lt;/a&gt; to the syntax object for that string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This information gets propagated to all occurrences of the identifier &lt;code&gt;re&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The library also overrides &lt;code&gt;regexp-match&lt;/code&gt;, so that it looks at the syntax properties on its first argument. In this case, it sees that &lt;code&gt;re&lt;/code&gt; is a string with one capture group. The library updates the return type of &lt;code&gt;m&lt;/code&gt; from &lt;code&gt;(Pairof String (Listof (U False String)))&lt;/code&gt; to &lt;code&gt;(U (List String String) False)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the true branch of the &lt;code&gt;if&lt;/code&gt; statement, Typed Racket is automatically able to refine the type of &lt;code&gt;m&lt;/code&gt; to &lt;code&gt;(List String String)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;trivial&lt;/code&gt; library overrides &lt;code&gt;second&lt;/code&gt; to check the type of its argument; it sees that &lt;code&gt;(List String String)&lt;/code&gt; is long enough for this call to succeed, so it tailors this to a faster, unsafe lookup function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;string-&amp;gt;number&lt;/code&gt; also gets overridden to look at the information about the match. Since step 2 was able to see that the match consists only of digits, it updates its type from returning &lt;code&gt;(U Complex False)&lt;/code&gt; to &lt;code&gt;Number&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s a lot going on! The neat thing is that &lt;code&gt;trivial&lt;/code&gt; is able to do all this in a fairly generalized way: one component works with strings, another works with regular expressions, and another works with lists of known size. They&amp;rsquo;re able to share all this information through syntax properties which respect the scoping rules of Typed Racket. It also plays nicely with other metaprogrammings; we could have written a macro that e.g., turns &lt;code&gt;if&lt;/code&gt; into &lt;code&gt;not-if&lt;/code&gt; and flips the branches, but the information we needed about the &lt;code&gt;m&lt;/code&gt; variable still would have gotten to the right place.&lt;/p&gt;
&lt;p&gt;Unfortunately, there&amp;rsquo;s not a way right now that we could make this example work for Rust—at least, not in its current form. That&amp;rsquo;s because different languages have different support for different kinds of tailoring. In our paper, we explore all the different dimensions for how languages can support tailorings.&lt;/p&gt;
&lt;h2 id=&#34;appendix-building-a-tiny-type-tailoring&#34;&gt;
  Appendix: Building a tiny type tailoring
  &lt;a class=&#34;anchor&#34; href=&#34;#appendix-building-a-tiny-type-tailoring&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here is how you might build a little tailoring. In this tailoring, we&amp;rsquo;d like to turn array lookups that are &lt;em&gt;known&lt;/em&gt; to be in-bounds into versions that use a fast, unsafe lookup. In a dependently typed language, we would be able to do this by looking at index and the type of the vector, since the type of the vector would include its length. In Racket, we have no such power. However, we can get a little bit of that power through a tailoring.&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;This section is taken almost verbatim from §3.8 from our paper. This code actually runs!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s an example of what we would like to tailor: if we know the length of a vector and the index, then we can either tailor to &lt;code&gt;unsafe-vector-ref&lt;/code&gt;, which skips the bounds check, or tailor to an error if the index is out-of-bounds. Otherwise, if we don&amp;rsquo;t know either the length of the vector or the index, we stick with the safe &lt;code&gt;vector-ref&lt;/code&gt; function which does run the bounds check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; tailors to → (unsafe-vector-ref (vector 5 2 8) 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; tailors to → error: out of bounds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;read-vec&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;       &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; tailors to → (vector-ref (read-vec) 9)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s how we do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;rename-out&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tailored-vector-ref &lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 1:&lt;/span&gt;
  &lt;code&gt;mini-tailoring.rkt&lt;/code&gt;, part 1 of 5
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;(provide (rename-out …))&lt;/code&gt; bit says that, when this module gets imported, &lt;em&gt;export&lt;/em&gt; the function &lt;code&gt;tailored-vector-ref&lt;/code&gt; under the name &lt;code&gt;vector-ref&lt;/code&gt;. This means, whenever this module gets imported, all calls to &lt;code&gt;vector-ref&lt;/code&gt; automatically use &lt;code&gt;tailored-vector-ref&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;only-in&lt;/span&gt; racket/unsafe/ops unsafe-vector-ref&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for-syntax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    racket/base syntax/parse &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; metaprogramming support&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;only-in&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;tailoring-api.rkt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             ⇝    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; control **Order** of expansion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             φ    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; API to read/write static information (**Metadata**)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             V    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; domain-specific key for vector length information (**Hygiene**)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             I&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; domain-specific key for integer value information (**Hygiene**)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 2:&lt;/span&gt;
  &lt;code&gt;mini-tailoring.rkt&lt;/code&gt;, part 2 of 5
&lt;/div&gt;
&lt;p&gt;Now we import some helpers: &lt;code&gt;racket/unsafe/ops&lt;/code&gt; gives us the &lt;code&gt;unsafe-vector-ref&lt;/code&gt; function, which is what we tailor to. This function can segfault if misused, so we have to be careful. We pull in &lt;code&gt;syntax/parse&lt;/code&gt; to get the excellent &lt;code&gt;syntax-parse&lt;/code&gt; macro facility. We also pull in four symbols from &lt;code&gt;tailoring-api.rkt&lt;/code&gt;, which deserve a mention:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;⇝&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is a syntax class that triggers macro expansion on a subexpression, which allows this tailoring to discover static information about its different components.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;φ&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is a function that uses Racket&amp;rsquo;s syntax properties to store and retrieve static information.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;V&lt;/code&gt;, &lt;code&gt;I&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;These are unique keys (created with &lt;code&gt;gensym&lt;/code&gt;) that we use for looking up vector length and integer value information. Since they&amp;rsquo;re unique, other tailorings won&amp;rsquo;t accidentally collide with this information.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The file &lt;code&gt;tailoring-api.rkt&lt;/code&gt; is small and really just provides these convenience functions; you can find it in &lt;a href=&#34;https://zenodo.org/doi/10.5281/zenodo.10578596&#34;&gt;our artifact&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now comes the meat of the tailoring: the tailoring is a macro so that it can statically rewrite source code. First it parses its input syntax object &lt;code&gt;stx&lt;/code&gt; to extract and expand two subexpressions &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tailored-vector-ref stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; e1:⇝ e2:⇝&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 3:&lt;/span&gt;
  &lt;code&gt;mini-tailoring.rkt&lt;/code&gt;, part 3 of 5
&lt;/div&gt;
&lt;p&gt;Now the tailoring checks whether these expanded expressions have the static information needed; specifically, it looks for a vector length (key: &lt;code&gt;V&lt;/code&gt;) and an integer value (key: &lt;code&gt;I&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:do&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; n &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;φ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e1.⇝ V&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; i &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;φ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e2.⇝ I&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:when&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;integer?&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;integer?&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 4:&lt;/span&gt;
  &lt;code&gt;mini-tailoring.rkt&lt;/code&gt;, part 4 of 5
&lt;/div&gt;
&lt;p&gt;If the information is present, we expand to &lt;code&gt;unsafe-vector-ref&lt;/code&gt; if safe to do so; otherwise we expand to code that raises an error. If the information is not present, fall back to plain-old &lt;code&gt;vector-ref&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; i n&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;unsafe-vector-ref e1.⇝ e2.⇝&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;Index-Exn&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; e1:⇝ e2:⇝&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; e1.⇝ e2.⇝&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 5:&lt;/span&gt;
  &lt;code&gt;mini-tailoring.rkt&lt;/code&gt;, part 5 of 5
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it! A Racket program can import this tailoring to make this code run faster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;mini-tailoring.rkt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector-ref&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;vector&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; gets tailored to (unsafe-vector-ref (vector 5 2 8) 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save that program to a file and run &lt;code&gt;raco expand &amp;lt;filename&amp;gt;&lt;/code&gt; to see the expanded version; you should see &lt;code&gt;unsafe-vector-ref&lt;/code&gt; in the expanded code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Skills That I Needed When I Started My PhD</title>
      <link>https://lambdaland.org/posts/2024-07-09_phd_tools/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-07-09_phd_tools/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m starting my third year as a PhD student. I thought it would be good to look back on some of the things that have helped me to this point. I study programming languages, but I imagine these things will help anyone in computer science&amp;mdash;and some might have application to other STEM fields as well.&lt;/p&gt;
&lt;p&gt;There are &lt;em&gt;many&lt;/em&gt; softer skills that you need as a PhD student: curiosity, good work ethic, organization, etc. These are essential and nothing can replace them. (Note: that was &lt;em&gt;not&lt;/em&gt; an exhaustive list.) I&amp;rsquo;m going to focus on some of the tools and hard skills that made the ride a little more comfortable. These compliment, rather than compete with, the softer skills that one develops as a beginning researcher.&lt;/p&gt;
&lt;p&gt;This is a rough list, and not a how-to article. This is mostly just a collection of things I&amp;rsquo;ve seen other people &lt;em&gt;lacking&lt;/em&gt; that have caused them to struggle. If you are considering doing a PhD, you might want to pick up some of these skills as you get ready to start to help you hit the ground running.&lt;/p&gt;
&lt;h2 id=&#34;software-engineering&#34;&gt;
  Software engineering
  &lt;a class=&#34;anchor&#34; href=&#34;#software-engineering&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I recommend reading &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; (Thomas, David and Hunt, Andrew, 2019). It&amp;rsquo;s written primarily for industry programmers, but there&amp;rsquo;s a lot in there that applies to anyone in CS research. All of the things I mention in this section are covered in detail in there.&lt;/p&gt;
&lt;h3 id=&#34;version-control&#34;&gt;
  Version Control
  &lt;a class=&#34;anchor&#34; href=&#34;#version-control&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;You have got to know Git. If you cannot wrangle versions of your software and papers (yes, put the papers you write under version control) you will waste much time shooting yourself in the foot and trying to recover work you lost. You will also be laughed to scorn should you ever depart academia for a stint in industry if you do not know Git.&lt;/p&gt;
&lt;p&gt;In all of the papers I have worked on, we have used Git to collaborate. We&amp;rsquo;ve typically used GitHub, which is fine as forges go, but I&amp;rsquo;ve also worked with a self-hosted GitLab instance, and that was fine too.&lt;/p&gt;
&lt;h3 id=&#34;scripting&#34;&gt;
  Scripting
  &lt;a class=&#34;anchor&#34; href=&#34;#scripting&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;It is incredibly helpful to know a scripting language. I grew up on Perl, which makes munging large amounts of text a piece of cake. You don&amp;rsquo;t have to learn Perl; you should get really comfortable with a language that makes it easy to manipulate text and files.&lt;/p&gt;
&lt;p&gt;Makefiles are also super helpful. I like using Makefiles to simply give names to a particular workflow. A Makefile for building a paper might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;paper.pdf&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; paper.tex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    latexmk -lualatex paper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; clean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @echo Cleanup &lt;span style=&#34;color:#81a1c1&#34;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    latexmk -c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rm -f paper.pdf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, instead of remembering all the incantations necessary to do some task, I have given that task a &lt;em&gt;name&lt;/em&gt; by which I can call it.&lt;/p&gt;
&lt;h3 id=&#34;command-line&#34;&gt;
  Command line
  &lt;a class=&#34;anchor&#34; href=&#34;#command-line&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;You must become proficient with the command line. If you are doing research, you will likely need to run software that other researchers have produced. And more likely than not, this will be &lt;em&gt;rough&lt;/em&gt; software with bugs and sharp edges that is meant to demonstrate some research concept than be some practical tool ready for developers who only know how to code through YouTube videos and ChatGPT. That this software is rough is a &lt;a href=&#34;https://matt.might.net/articles/crapl/&#34;&gt;feature of research software&lt;/a&gt;, not a bug. &lt;strong&gt;There is &lt;em&gt;rarely&lt;/em&gt;, if ever, a GUI available.&lt;/strong&gt; You are going to have to do stuff on the command line, so get used to it.&lt;/p&gt;
&lt;p&gt;Getting used to the command line helps with &lt;a href=&#34;#scripting&#34;&gt;Scripting&lt;/a&gt; as well. Any task you do on the command line, you can write a script to automate. Building little scripts to e.g. build your paper, your homework, your experiments, etc. will save you time in the long run.&lt;/p&gt;
&lt;h3 id=&#34;know-thy-editor&#34;&gt;
  Know thy editor
  &lt;a class=&#34;anchor&#34; href=&#34;#know-thy-editor&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Emacs or Vim&amp;mdash;pick one and learn it &lt;em&gt;really&lt;/em&gt; well. VS Code is flashy and all, but it doesn&amp;rsquo;t have the same depth and breadth of customizations that Emacs and Vim give you. Also, Emacs and Vim are free software. You are in control!&lt;/p&gt;
&lt;p&gt;I, of course, &lt;a href=&#34;https://lambdaland.org/tags/emacs/&#34;&gt;love Emacs&lt;/a&gt; and I even made a &lt;a href=&#34;https://codeberg.org/ashton314/emacs-bedrock&#34;&gt;starter kit called Bedrock&lt;/a&gt; to help some of my friends in my research lab get started with Emacs. I use Emacs to program, write papers, take notes, manage email, track tasks, and more. I made a list of &lt;a href=&#34;https://lambdaland.org/posts/2024-05-30_top_emacs_packages/&#34;&gt;my top Emacs packages&lt;/a&gt; a few weeks ago if you&amp;rsquo;d like more ideas on what is possible.&lt;/p&gt;
&lt;p&gt;Vim is fine too and I will still respect you if you choose to go that route. ;)&lt;/p&gt;
&lt;h2 id=&#34;authoring-papers&#34;&gt;
  Authoring papers
  &lt;a class=&#34;anchor&#34; href=&#34;#authoring-papers&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;latex&#34;&gt;
  LaTeX
  &lt;a class=&#34;anchor&#34; href=&#34;#latex&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Familiarity with LaTeX has definitely helped me. Fighting with LaTeX is no fun, but you &lt;em&gt;will&lt;/em&gt; have to do a little bit of it at some point. Lots of people like using Overleaf; I prefer the command line. Don&amp;rsquo;t get me wrong: Overleaf is awesome and makes collaborating in a Google Docs sort of way possible, but you loose some flexibility, and if something goes wrong on Overleaf right before your deadline, you&amp;rsquo;re toast.&lt;/p&gt;
&lt;h3 id=&#34;bibliographies&#34;&gt;
  Bibliographies
  &lt;a class=&#34;anchor&#34; href=&#34;#bibliographies&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;There is a lovely computer science bibliography hosted at &lt;a href=&#34;https://dblp.org/&#34;&gt;dblp.org&lt;/a&gt;. When I was going through the bibliography for &lt;a href=&#34;https://lambdaland.org/posts/2024-06-21_writing_a_paper/&#34;&gt;my last paper&lt;/a&gt; I was able to find lots of missing DOIs simply by putting in the title of the paper into the search bar; DBLP found all the bibliographic information that I needed.&lt;/p&gt;
&lt;h2 id=&#34;organization-and-communication&#34;&gt;
  Organization and communication
  &lt;a class=&#34;anchor&#34; href=&#34;#organization-and-communication&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;note-taking&#34;&gt;
  Note taking
  &lt;a class=&#34;anchor&#34; href=&#34;#note-taking&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Take notes whenever you learn how to do something that wasn&amp;rsquo;t obvious to you when you started out doing it. I like the &lt;a href=&#34;https://en.wikipedia.org/wiki/Zettelkasten&#34;&gt;Zettelkasten&lt;/a&gt; method for taking notes: whenever I learn how to e.g. do some complex layout in LaTeX or learn a neat Makefile trick, I write it down. You can think of it as writing your own personal &lt;code&gt;man&lt;/code&gt; pages&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;If you don&amp;rsquo;t know what a &lt;code&gt;man&lt;/code&gt; page is, this is the standard manual system available on UNIX-like systems (e.g. FreeBSD, macOS, and Linux). Open a terminal and run &lt;code&gt;man man&lt;/code&gt; to read the manual page for &lt;code&gt;man&lt;/code&gt; itself. You really need to get comfortable with the &lt;a href=&#34;#command-line&#34;&gt;Command line&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Some of these notes I rarely look back at. Others I revisit regularly. But even though I might not review some notes that frequently, there are cases where something on my system will break and a years-old note comes to my rescue from the &lt;em&gt;last&lt;/em&gt; time I had to solve that problem. For example, I took notes on how to upgrade my language server for Elixir. I don&amp;rsquo;t upgrade that thing very often, but there is a little tweak I need to do just because of how my system is set up that is not obvious. It took me a few hours of debugging the first time, but, because I took notes, it now only takes me a few minutes.&lt;/p&gt;
&lt;h3 id=&#34;email&#34;&gt;
  Email
  &lt;a class=&#34;anchor&#34; href=&#34;#email&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Academics generally love email. It&amp;rsquo;s simple, robust, and doesn&amp;rsquo;t change its UI every few weeks, unlike &lt;em&gt;some&lt;/em&gt; popular chat platforms. Unfortunately many universities are forcing everyone to move to Outlook. &lt;a href=&#34;https://lambdaland.org/posts/2022-08-28_keep_email_federated/&#34;&gt;This is a very bad thing.&lt;/a&gt; Fortunately, there are &lt;a href=&#34;https://lambdaland.org/posts/2023-05-03_email_with_outlook/&#34;&gt;some workarounds&lt;/a&gt; that you can use to reclaim some control over your email.&lt;/p&gt;
&lt;p&gt;I have a sweet workflow with my email. That&amp;rsquo;s right, I do it all from Emacs. Now, while I &lt;em&gt;do&lt;/em&gt; recommend you learn how to use Emacs, I understand that not everyone will start using Emacs. Everyone &lt;em&gt;should&lt;/em&gt; get proficient with their email client and know how to use it well. I recommend anything that you can control entirely from the keyboard.&lt;/p&gt;
&lt;p&gt;You should also get comfortable with editing replies. You know how, when you reply to an email, you usually see something like this:&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;Some mail clients will make the &lt;code&gt;&amp;gt;&lt;/code&gt; at the beginning of the line pretty with different colored lines and whatnot. It&amp;rsquo;s all angle brackets under the hood, and you can still edit it as described here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hey here is my reply!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On Tuesday, 9 July 2024, Slartibartfast said:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Hey,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; You were asking me where I found that elvish blade of great
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; antiquity. Turns out it was just sitting on a shelf in the living
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; room the whole time! I had the darndest time escaping the theif
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; though; I think he locked me into the cellar as soon as I went down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; there. …
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just typing your reply above the email is called &amp;ldquo;top-posting&amp;rdquo;, and it&amp;rsquo;s considered bad form. You can actually edit the bit that was sent to interleave your reply with bits of the prior email. This makes it easier for people to know what you&amp;rsquo;re replying to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hey Slarti
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Turns out it was just sitting on a shelf in the living room the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; whole time!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;What!? No way! I must have missed it. I&amp;#39;ll grab it once I figure out
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how to get up this chimney in the art studio.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; I had the darndest time escaping the theif though; I think he locked
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; me into the cellar as soon as I went down there.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Yeah, I cornered the guy in his hideout. I won the knife fight though.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When used appropriately, this makes emails much more pleasant to read. It doesn&amp;rsquo;t break the email thread either; you can still see the chain of replies.&lt;/p&gt;
&lt;h3 id=&#34;task-tracking&#34;&gt;
  Task tracking
  &lt;a class=&#34;anchor&#34; href=&#34;#task-tracking&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;You need some way to keep track of tasks. I have a workflow based off of &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org-mode&lt;/a&gt;, which I will not detail here. The short of it is that you need to be spending at least a little time with some regularity &amp;ldquo;sharpening the saw&amp;rdquo;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; by making sure that whatever tool you use to keep track of tasks is working for you.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thomas, David and Hunt, Andrew (2019). &lt;em&gt;The Pragmatic Programmer&lt;/em&gt;, Addison-Wesley.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People&#34;&gt;https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Big Updates to My Blog</title>
      <link>https://lambdaland.org/posts/2024-07-03_big_blog_update/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-07-03_big_blog_update/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve made some big changes to my blog! This post is just for me to document what I&amp;rsquo;ve done and why, as well as to test some of the new features I&amp;rsquo;ve added.&lt;/p&gt;
&lt;h2 id=&#34;new-fonts&#34;&gt;
  New fonts
  &lt;a class=&#34;anchor&#34; href=&#34;#new-fonts&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;First off: new fonts! I am using &lt;a href=&#34;https://mbtype.com/fonts/valkyrie/&#34;&gt;Valkyrie&lt;/a&gt; for the body text and &lt;a href=&#34;https://mbtype.com/fonts/concourse/&#34;&gt;Concourse&lt;/a&gt; for the headings. I&amp;rsquo;ve increased the font size on larger displays for added legibility. I also made the background a little darker for better contrast.&lt;/p&gt;
&lt;h2 id=&#34;margin-notes-and-sidenotes&#34;&gt;
  Margin notes and sidenotes
  &lt;a class=&#34;anchor&#34; href=&#34;#margin-notes-and-sidenotes&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;span class=&#34;marginnote&#34;&gt;
&lt;p&gt;I stole the margin notes code from &lt;a href=&#34;https://github.com/edwardtufte/tufte-css&#34;&gt;Tufte CSS&lt;/a&gt;. It&amp;rsquo;s still a little rough, but it&amp;rsquo;s getting there.&lt;/p&gt;
&lt;/span&gt;
&lt;p&gt;Next up: margin notes. I wanted to try adding margin notes to this blog for some time. Adding margin notes necessitated a whole host of changes; the biggest one is that the table of contents has moved from the right side of the page to the left column. This is to free up some space.&lt;/p&gt;
&lt;span class=&#34;marginnote&#34;&gt;
&lt;p&gt;In the original version, I was using the currency sign &amp;ldquo;¤&amp;rdquo; to mark in the text where you could click to expand the margin note.&lt;/p&gt;
&lt;/span&gt;
&lt;p&gt;If you&amp;rsquo;re on mobile, the margin note will appear as an inline block. This is a departure from how Tufte CSS works; I&amp;rsquo;m copying how Matthew Butterick does margin notes, as you can see &lt;a href=&#34;https://practicaltypography.com/white-space-characters.html&#34;&gt;on Practical Typography&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The blog now has sidenotes&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;whatever2&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;whatever2&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
This is a &lt;em&gt;sidenote&lt;/em&gt;. The big difference between a sidenote and a margin note is that sidenotes have numbers.
&lt;/span&gt;
as well as margin notes. I&amp;rsquo;m not yet sure which one I&amp;rsquo;ll use primarily. I like how clean the margin notes look, but the numbers on the sidenotes make it a.) easier to figure out what note goes where, and b.) act more like a drop-in replacement for footnotes. I understand there&amp;rsquo;s a significant amount of trickery involved in getting these sidenotes and margin notes to line up properly: it has something to do with floats, negative margins, and exclusion zones. Go check out the &lt;a href=&#34;https://github.com/edwardtufte/tufte-css&#34;&gt;Tufte CSS source&lt;/a&gt; if you&amp;rsquo;re curious. I might go through some recent posts&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;sn3&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;sn3&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
Recent, as in, since I started using ox-hugo to write my blog posts.
&lt;/span&gt;
and convert footnotes to sidenotes.&lt;/p&gt;
&lt;h2 id=&#34;epigraphs&#34;&gt;
  Epigraphs
  &lt;a class=&#34;anchor&#34; href=&#34;#epigraphs&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Typical quotes look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have moved into a dark place. You are likely to be eaten by a grue.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Zork I&lt;/em&gt; by Infocom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span class=&#34;marginnote&#34;&gt;
&lt;p&gt;If you have not played Zork, you really should.&lt;/p&gt;
&lt;/span&gt;
&lt;p&gt;That&amp;rsquo;s all fine and well. But sometimes we need more… &lt;em&gt;elegance&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;epigraph&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;You have moved into a dark place. You are likely to be eaten by a grue.&lt;/p&gt;
&lt;footer&gt;
&lt;p&gt;&lt;em&gt;Zork I&lt;/em&gt; by Infocom&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;That will definitely add some pizzazz for when I want to quote something at the beginning or end of a post.&lt;/p&gt;
&lt;h2 id=&#34;overkill&#34;&gt;
  Overkill?
  &lt;a class=&#34;anchor&#34; href=&#34;#overkill&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Obviously. I&amp;rsquo;m liking how this is shaping up. It might be a little overkill for just my blog, but it makes me happy, so that&amp;rsquo;s a win!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I Probably Hate Writing Code in Your Favorite Language</title>
      <link>https://lambdaland.org/posts/2024-06-27_language_hate/</link>
      <pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-06-27_language_hate/</guid>
      <description>&lt;div class=&#34;epigraph&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;The Tao gave birth to machine language. Machine language gave birth to the assembler.&lt;/p&gt;
&lt;p&gt;The assembler gave birth to the compiler. Now there are ten thousand languages.&lt;/p&gt;
&lt;p&gt;Each language has its purpose, however humble. Each language expresses the Yin and Yang of software. Each language has its place within the Tao.&lt;/p&gt;
&lt;p&gt;But do not program in COBOL if you can avoid it.&lt;/p&gt;
&lt;footer&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mit.edu/~xela/tao.html&#34;&gt;The Tao of Programming&lt;/a&gt;&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I probably hate writing code in your favorite programming language, whatever it may be. This is because I get frustrated by basically all of the top 10 languages you&amp;rsquo;ll find listed anywhere for various reasons. Do I hate programming in Python? You bet I do. &amp;ldquo;But it&amp;rsquo;s &lt;em&gt;Python&lt;/em&gt;! Python is the best programming language on earth!&amp;rdquo; I can hear you say. I grant that it has its place. Python wins because its ecosystem of libraries is so huge and because there are so many resources for new users. It&amp;rsquo;s also garbage collected, which means memory safety is not an issue. It the current hot thing, because there is so much support for machine learning in Python.&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;I don&amp;rsquo;t consider Python quite as &lt;a href=&#34;https://blog.plover.com/prog/Java.html&#34;&gt;boring as Java&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;But &lt;em&gt;my&lt;/em&gt; problem is that Python is a boring language. This isn&amp;rsquo;t a bad thing necessarily. If you&amp;rsquo;re interested in solving a problem with a known solution and you&amp;rsquo;re doing it for business, the a boring language is probably better for you than, say, Haskell.&lt;/p&gt;
&lt;p&gt;Why do I think Python is boring? In part because of its philosophy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There should be one—and preferably only one—obvious way to do it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://peps.python.org/pep-0020/&#34;&gt;The Zen of Python&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python has a model of how it wants you to solve problems. That&amp;rsquo;s right: it wants you to solve problems with objects, classes, and explicit loops. Got a problem that&amp;rsquo;s the perfect fit for a functional paradigm? Well, I guess you can use &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;, but you only get a single expression inside of lambdas, data structures are all mutable, and you can&amp;rsquo;t use recursion to handle lists. Ugh.&lt;/p&gt;
&lt;p&gt;I could tell similar stories for other languages that I don&amp;rsquo;t like programming in. These languages include JavaScript, Go, Java, and C++. Go and Java seem to have been made with huge teams of programmers in mind: make the language and syntax as simple as possible, and then even simpler at the expense of expressivity! This guards against programmers coming up with a clever way to express their problem in a domain-specific way—that&amp;rsquo;s probably a virtue in large companies. But that&amp;rsquo;s not how I like to program.&lt;/p&gt;
&lt;h2 id=&#34;no-local-reasoning&#34;&gt;
  No local reasoning
  &lt;a class=&#34;anchor&#34; href=&#34;#no-local-reasoning&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The thing I hate about &lt;em&gt;all&lt;/em&gt; of the languages I listed is their emphasis on mutation. When I call a function and pass it a list or object or whatever, I have &lt;em&gt;no&lt;/em&gt; guarantees about that thing&amp;rsquo;s value when the function returns. That means, to understand some code, I have to understand all of the functions that get called.&lt;/p&gt;
&lt;p&gt;In contrast, when I write in a language like Elixir or Haskell, which have &lt;em&gt;immutable&lt;/em&gt; data structures, I can look at some code like this:&lt;/p&gt;




&lt;div class=&#34;book-tabs&#34;&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-local_ex&#34; id=&#34;tabs-local_ex-0&#34; checked=&#34;checked&#34; /&gt;
  &lt;label for=&#34;tabs-local_ex-0&#34;&gt;Haskell&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;winningTeam&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;GameLog&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Team&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;winningTeam&lt;/span&gt; g &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;team_a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; team_b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getTeams g
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      points_a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getPoints g team_a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      points_b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getPoints g team_b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; points_a &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; points_b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;then&lt;/span&gt; team_a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; team_b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-local_ex&#34; id=&#34;tabs-local_ex-1&#34;  /&gt;
  &lt;label for=&#34;tabs-local_ex-1&#34;&gt;Elixir&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;@spec&lt;/span&gt; winning_team&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;GameLog&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Team&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; winning_team&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;team_a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; team_b&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; get_teams&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  points_a &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; get_points&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; team_a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  points_b &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; get_points&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; team_b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; points_a &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; points_b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    team_a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    team_b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and I don&amp;rsquo;t have to know what &lt;code&gt;getTeams&lt;/code&gt; or &lt;code&gt;getPoints&lt;/code&gt; do to their arguments; I just know they return a value of some kind; I&amp;rsquo;m free to continue using &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;team_a&lt;/code&gt;, and &lt;code&gt;team_b&lt;/code&gt; as much as I like because their value has not changed.&lt;/p&gt;
&lt;p&gt;It might not seem like much in this example, but it is a big deal when you&amp;rsquo;re neck-deep in a debugging session. I once worked on a codebase that was half in Elixir and half in Ruby. I spent most of my time on the Elixir side. One time when I had to do some debugging in Ruby, I found it so difficult to trace the execution of the program because data was being changed in method calls. If this doesn&amp;rsquo;t make much sense to you, you might have to experience it first: once you&amp;rsquo;ve worked in a large functional codebase, you will find yourself bewildered by all the spooky-action-at-a-distance that goes on inside a large OO codebase.&lt;/p&gt;
&lt;h2 id=&#34;other-gripes&#34;&gt;
  Other gripes
  &lt;a class=&#34;anchor&#34; href=&#34;#other-gripes&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Other things that frustrate me in programming languages include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic type conversion (looking at you JavaScript).&lt;/li&gt;
&lt;li&gt;No type inference (if you&amp;rsquo;re gonna be statically typed, don&amp;rsquo;t make me write out the type every time Java).&lt;/li&gt;
&lt;li&gt;No structural typing (type is determined by the shape, not the class name).&lt;/li&gt;
&lt;li&gt;No good functional data structures.&lt;/li&gt;
&lt;li&gt;No metaprogramming.&lt;/li&gt;
&lt;li&gt;No TCO/limits on stack depth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last one is something that &lt;em&gt;really&lt;/em&gt; bothers me about Python: stack frames in Racket cost 2 words.&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;sn1&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;sn1&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
Source: I asked Matthew Flatt about Racket&amp;rsquo;s stack frame size once.
&lt;/span&gt;
Either do proper tail-call elimination &lt;em&gt;or&lt;/em&gt;, if you &lt;em&gt;really absolutely must&lt;/em&gt; have &lt;em&gt;all&lt;/em&gt; of your precious stack frames &lt;em&gt;performance and elegance be darned&lt;/em&gt;, then &lt;em&gt;allocate your stack frames on the heap and stop worrying about it already!&lt;/em&gt; (I seem to recall a conversation where someone with knowledge of these things implied that this was in the works. I don&amp;rsquo;t know any details about it though.)&lt;/p&gt;
&lt;p&gt;Seriously though: some solutions lend themselves &lt;em&gt;really&lt;/em&gt; well to a nice tail-recursive solution. But can you rely on such an implementation to be performant or even &lt;em&gt;run&lt;/em&gt; in Python? Nope. Argh!!&lt;/p&gt;
&lt;h2 id=&#34;my-favorite-language&#34;&gt;
  My favorite language
  &lt;a class=&#34;anchor&#34; href=&#34;#my-favorite-language&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Clearly, I like functional programming: it fits how my mind works, and I think it is in a lot of ways objectively better than other paradigms for software engineering. Immutability gives you the ability to reason &lt;em&gt;locally&lt;/em&gt; about your code—not to mention not having to worry about race conditions when mutating data in concurrent environments! To parallel the first list that I wrote, here are things that I like in a language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy, explicit conversions between different types of data.&lt;/li&gt;
&lt;li&gt;Dynamic typing &lt;em&gt;or&lt;/em&gt; powerful type inference &lt;em&gt;or&lt;/em&gt; gradual typing!&lt;/li&gt;
&lt;li&gt;Structural typing (having nominal typing too can be nice when needed; but given one or the other I&amp;rsquo;ll take structural over nominal any day).&lt;/li&gt;
&lt;li&gt;Functional data structures like cons cells, maps and sets supporting functional updates, and &lt;a href=&#34;https://github.com/OxSon/rrb.rhm/discussions/1&#34;&gt;RRB trees&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Powerful macros that let me extend the language.&lt;/li&gt;
&lt;li&gt;Proper TCO.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Macros can be a two-edged sword. That said, a lot of the &lt;a href=&#34;https://lambdaland.org/posts/2023-10-17_fearless_macros/&#34;&gt;danger around macros&lt;/a&gt; has largely been ameliorated. Elixir is a great example of this: Elixir has a small core and uses macros a &lt;em&gt;lot&lt;/em&gt; to define basic things like &lt;code&gt;if&lt;/code&gt; in terms of simpler constructs.&lt;/p&gt;
&lt;p&gt;What languages do I &lt;em&gt;enjoy&lt;/em&gt; programming in? Racket is my favorite: it&amp;rsquo;s designed to be flexible and give the programmer maximum ability to express their intent to the computer. Racket is a &lt;em&gt;programmable programming language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Other languages I enjoy include Haskell, Elixir, and Rust. Haskell is the ur-functional language, and it&amp;rsquo;s really fun to use the type system to describe your domain. Pretty soon the compiler starts keeping you from making all sorts of mistakes that would be hard to catch with basic testing. In Elixir, you get lots of nice functional data structures, proper TCO, pattern matching, and soon gradual typing! Rust is great because it has a phenomenal type system with good type inference; its metaprogramming story could be improved though.&lt;/p&gt;
&lt;h2 id=&#34;not-a-flame-war&#34;&gt;
  Not a flame war
  &lt;a class=&#34;anchor&#34; href=&#34;#not-a-flame-war&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I want to make it clear that I am &lt;em&gt;not&lt;/em&gt; attempting to start a flame-war or saying that Python, Java, et al. are useless: they have their place and are very respectable works of engineering. All I am saying is that, given a choice of language for a hobby project, I will pick something else because I don&amp;rsquo;t want to be frustrated by the language when I work.&lt;/p&gt;
&lt;p&gt;Anyway, that&amp;rsquo;s the end of my griping about languages. (For today, at least.)&lt;/p&gt;
&lt;div class=&#34;epigraph&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;There will always be things we wish to say in our programs that in all known languages can only be said poorly.&lt;/p&gt;
&lt;p&gt;A language that doesn’t affect the way you think about programming, is not worth knowing.&lt;/p&gt;
&lt;footer&gt;
&lt;p&gt;Alan Perlis&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Lessons From Writing My First Academic Paper</title>
      <link>https://lambdaland.org/posts/2024-06-21_writing_a_paper/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-06-21_writing_a_paper/</guid>
      <description>&lt;p&gt;I got a paper published at &lt;a href=&#34;https://2024.ecoop.org/&#34;&gt;ECOOP&lt;/a&gt; this year! This is my first big paper published at a big conference. As such, I wanted to write down some things that I learned so that in the future I can remember a bit better what was hard for me. That way, should I one day advise PhD students working on &lt;em&gt;their&lt;/em&gt; first papers, I can help them through the learning curve better.&lt;/p&gt;
&lt;div class=&#34;marginnote&#34;&gt;
&lt;p&gt;For us, this artifact took the form of a Docker container with a bash script that ran all the code examples from our paper to support the claims we made. I really like that reproducibility like this is often an option in CS.&lt;/p&gt;
&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;Conference deadlines may be flexible if you talk to the right people.&lt;/dt&gt;
&lt;dd&gt;We submitted an artifact along with our paper But some of the deadlines were &lt;em&gt;really&lt;/em&gt; close. My advisor reached out to the folks in charge of the conference&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and asked if the artifact submission date could be moved back. The organizers agreed, and everyone got a little more breathing room between when the paper was due and when the artifact was supposed to be submitted.&lt;/dd&gt;
&lt;dt&gt;Conferences are run by humans—you can talk to them.&lt;/dt&gt;
&lt;dd&gt;Along the same lines, the conferences are run by &lt;em&gt;people&lt;/em&gt;, and you can talk to the organizers to request clarification. You shouldn&amp;rsquo;t be a whiny jerk, of course, but the people running these things &lt;em&gt;want&lt;/em&gt; people to submit good papers and will work to help you overcome blockers.&lt;/dd&gt;
&lt;dt&gt;The Call for Papers has everything you need.&lt;/dt&gt;
&lt;dd&gt;The &amp;ldquo;Call for Papers&amp;rdquo; describes what kinds of submissions fit the conference, as well as &lt;em&gt;how&lt;/em&gt; to format and submit your paper. You can see the CfP for ECOOP &lt;a href=&#34;https://2024.ecoop.org/track/ecoop-2024-papers#Call-for-Papers&#34;&gt;here&lt;/a&gt;. Absorbing everything in the CfP can be challenging for first-timers. I was unclear about something and my advisor asked me if I had read the CfP. I had, but that didn&amp;rsquo;t mean that I remembered &lt;em&gt;everything&lt;/em&gt; from it. It takes time and experience to absorb the salient parts of the CfP.&lt;/dd&gt;
&lt;dt&gt;Papers get easier to read as time goes on.&lt;/dt&gt;
&lt;dd&gt;When I first started research, I struggled to make it through a single paper. Moreover, I had a hard time understanding the point the paper was trying to make.
&lt;p&gt;I think part of the difficulty stems from the sheer amount of new terminology and dense technical material present in a typical paper. Everything is new and therefore requires effort to comprehend. As you get familiar with the field, however, previously arcane concepts become easy to grasp. This also makes it easier to see the main idea of the paper: you can tune out the noise and focus on what is novel.&lt;/p&gt;
&lt;p&gt;Part of it comes from how unfamiliar the &lt;em&gt;form&lt;/em&gt; of papers is. When I started research, papers felt arbitrarily formulaic. Now, I can recognize common structures in papers and use these patterns to understand the paper quicker. I actually find that papers are an efficient way for me to learn about cutting-edge research. I hoped, but did not know, that that would eventually be the case when I started.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Keep track of where &lt;em&gt;every&lt;/em&gt; claim comes from.&lt;/dt&gt;
&lt;dd&gt;I did not do a very good job keeping a lab notebook for this paper. When I started writing the paper, I had to go back to my work and try and remember where I got a particular number or why I made a particular claim. I am doing a lot better with my current project, I think. I hope the next paper is a little smoother in this regard.&lt;/dd&gt;
&lt;dt&gt;Writing takes a long time!&lt;/dt&gt;
&lt;dd&gt;We started working on this paper about 7 months ago, according to &lt;code&gt;git log&lt;/code&gt;. There were so many drafts, edits, and revisions.&lt;/dd&gt;
&lt;dt&gt;Get your contributions clear.&lt;/dt&gt;
&lt;dd&gt;Simon Peyton-Jones &lt;a href=&#34;https://simon.peytonjones.org/great-research-paper/&#34;&gt;gives this advice&lt;/a&gt;: your list of contributions should drive the paper. Moreover, writing the paper drives the research. Research is useless unless shared!&lt;/dd&gt;
&lt;dt&gt;Collaboration is challenging.&lt;/dt&gt;
&lt;dd&gt;Writing joint papers can be tricky. I am really glad we were using &lt;code&gt;git&lt;/code&gt; to track changes. I met with my advisor twice a week in person, as well as a few times remotely to hammer out the ideas and drafts in the paper. We sent lots of messages in Slack.
&lt;p&gt;Asking for feedback can be hard—and I don&amp;rsquo;t just mean in the emotional pride-bruising sense: prompting the people you ask for feedback can be tricky. I asked someone for some help on a different piece of writing, and they weren&amp;rsquo;t able to give me much useful help and instead focused on trivial issues. Part of that is on me: I should have prompted better. But it is hard to prompt well.&lt;/p&gt;
&lt;p&gt;I find it a little curious that different kinds of people have different affinities to methods of giving feedback. With this paper, there&amp;rsquo;s a flag in LaTeX that adds line numbers to the PDF. So, if someone wants to comment on something, they can write:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;l 42: &amp;#34;that&amp;#34; → &amp;#34;which&amp;#34;; the phrase is not essential, so use &amp;#34;which&amp;#34; instead of &amp;#34;that&amp;#34;
l 46: &amp;#34;rocks are a kind of vegetable&amp;#34; do we have a citation for this?
…
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This seems natural to me. I like that it&amp;rsquo;s software-agnostic. I guess some fields are tied to particular technologies (e.g. suggested edits in Word) and that seems burdensome to me.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Specifically, the program chair.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Chorex: Guaranteeing Deadlock Freedom in Elixir</title>
      <link>https://lambdaland.org/posts/2024-06-03_chorex_0_1/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-06-03_chorex_0_1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/utahplt/chorex&#34;&gt;Chorex&lt;/a&gt; is a brand-new Elixir library for &lt;em&gt;choreographic programming&lt;/em&gt; [&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;3&lt;/a&gt;]: Chorex provides a macro-based DSL that lets you describe how processes communicate to perform a computation. This top-down description of interacting processes is called a &lt;em&gt;choreography&lt;/em&gt;. From this choreography, Chorex creates modules for each process that handle all the message-passing in the system. The interactions performed by the generated code will never deadlock &lt;em&gt;by construction&lt;/em&gt; because the choreographic DSL ensures that no processes will be waiting on each other at the same time.&lt;/p&gt;
&lt;p&gt;This is a research project; if you like experimenting with new things, please try this out! The best way to leave feedback is by &lt;a href=&#34;https://github.com/utahplt/chorex/issues&#34;&gt;opening an issue&lt;/a&gt; on the Chorex repository. Chorex is still in active development, and we would love to see whatever you make with Chorex.&lt;/p&gt;
&lt;p&gt;Chorex is available on &lt;a href=&#34;https://hex.pm/packages/chorex&#34;&gt;hex.pm&lt;/a&gt;. Development is on &lt;a href=&#34;https://github.com/utahplt/chorex&#34;&gt;GitHub&lt;/a&gt;. Try it out!&lt;/p&gt;
&lt;h2 id=&#34;what-does-chorex-do&#34;&gt;
  What does Chorex do?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-does-chorex-do&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Chorex enables &lt;em&gt;choreographic programming&lt;/em&gt; in Elixir. A &lt;em&gt;choreography&lt;/em&gt; is a birds-eye view of communicating parties in a concurrent system: you describe the different actors and how they send messages to each other. From this choreography you can create an &lt;em&gt;endpoint projection&lt;/em&gt;, which just means you create some code for each of the concurrent actors that handles all the communication.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/chorex_announcement/figures/EPP.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;Choreographic programming ensures &lt;em&gt;deadlock freedom by construction&lt;/em&gt;. That means you will not be able to accidentally create a system of actors that accidentally deadlock. It&amp;rsquo;s still possible to have other kinds of bugs that freeze the system (e.g. one of the actors hangs on an infinite loop) but it eliminates an entire class of bug that is difficult to track down in real applications.&lt;/p&gt;
&lt;p&gt;Additionally, Chorex implements &lt;em&gt;higher-order choreographies&lt;/em&gt; [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] which let you treat choreographies as first-class citizens in your language. This improves the modularity of code built with choreographies.&lt;/p&gt;
&lt;p&gt;Chorex does all this by leveraging Elixir&amp;rsquo;s macro system: you write down a choreography using the &lt;code&gt;defchor&lt;/code&gt; macro provided by Chorex. The macro expands into several modules: one for each actor in your system. You then create another module for each actor in the system which &lt;code&gt;use&lt;/code&gt;​s the respective macro-generated module; the macro-generated module handles the communication between the different parties in the choreography, and your hand-written module handles all the internal bits to that node. Let&amp;rsquo;s look at an example.&lt;/p&gt;
&lt;h2 id=&#34;example-of-a-choreography&#34;&gt;
  Example of a choreography
  &lt;a class=&#34;anchor&#34; href=&#34;#example-of-a-choreography&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a simple, classic example: someone wants to buy a book, so they ask the seller for the price. The seller responds with the price. Here&amp;rsquo;s a diagram of that communication:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/chorex_announcement/figures/booksell_flow.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;And here is the corresponding choreography describing that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  defchor &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;get_book_title&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;get_price&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;defchor&lt;/code&gt; macro will create (roughly) the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Chorex&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8fbcbb&#34;&gt;@callback&lt;/span&gt; get_book_title&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8fbcbb&#34;&gt;@callback&lt;/span&gt; get_price&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;along with a &lt;code&gt;__using__&lt;/code&gt; macro. Now we create modules for each of our actors (&lt;code&gt;Buyer&lt;/code&gt;, &lt;code&gt;Seller&lt;/code&gt;) and we use the generated &lt;code&gt;Chorex&lt;/code&gt; module to handle the communication:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;MyBuyer&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor.Chorex&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:buyer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; get_book_title&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Zen and the Art of Motorcycle Maintenance&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;MySeller&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;BookSellerChor.Chorex&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:seller&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; get_price&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;book_title&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To kick off the choreography, start up a process for each actor and send them everyone&amp;rsquo;s PID:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buyer_process  &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; spawn&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;MyBuyer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;:init&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seller_process &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; spawn&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;MySeller&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:init&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;%{&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&amp;gt;&lt;/span&gt; buyer_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Seller&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&amp;gt;&lt;/span&gt; seller_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:super&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&amp;gt;&lt;/span&gt; self&lt;span style=&#34;color:#eceff4&#34;&gt;()}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;buyer_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;seller_process&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can wait for the processes to send you (the parent that started the choreography) their return values. From the choreography, we expect the &lt;code&gt;Buyer&lt;/code&gt; actor to finish with the price &lt;code&gt;p&lt;/code&gt;. We can get that like so after sending the actors the config for the network:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;receive&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:choreography_return&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Buyer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; the_price&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;IO&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;puts&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Got price at buyer: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;#{&lt;/span&gt;the_price&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In sum, this is how you use Chorex:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a choreography to describe your system&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;defchor&lt;/code&gt; macro will create modules for each endpoint&lt;/li&gt;
&lt;li&gt;Implement each endpoint&amp;rsquo;s derived behaviour&lt;/li&gt;
&lt;li&gt;Fire of the choreography&lt;/li&gt;
&lt;li&gt;Await replies&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/chorex_announcement/figures/using_chorex.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;Choreographies can get a &lt;em&gt;lot&lt;/em&gt; more complicated than this puny example here. See the &lt;a href=&#34;https://hexdocs.pm/chorex/readme.html&#34;&gt;Chorex README&lt;/a&gt; and &lt;a href=&#34;https://hexdocs.pm/chorex/Chorex.html&#34;&gt;module documentation&lt;/a&gt; for more extensive examples with Chorex. Lugović and Montesi built an IRC client and server in Java with a choreography [&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;2&lt;/a&gt;]—I&amp;rsquo;m excited to see what&amp;rsquo;s possible in Elixir!&lt;/p&gt;
&lt;h2 id=&#34;chorex-goals-non-goals-and-roadmap&#34;&gt;
  Chorex goals, non-goals, and roadmap
  &lt;a class=&#34;anchor&#34; href=&#34;#chorex-goals-non-goals-and-roadmap&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Chorex is a &lt;em&gt;research project&lt;/em&gt;, meaning that its primary function is to prove out new ideas. Development speed takes priority over stability of features and API. This is a scout and a trailblazer, not a surveyor and road-laying machine.&lt;/p&gt;
&lt;p&gt;We would like to make Chorex as useful as possible; historically choreographic programming libraries have been cutting-edge research projects. Chorex &lt;em&gt;is&lt;/em&gt; still research-oriented, but if we can make it useful to people other than ourselves, then that&amp;rsquo;s a big win. :) Moreover, no one has done choreographic programming with Elixir-style concurrency, where processes have mailboxes and where there are existing idioms around processes and communication.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; intended to be a production-grade system. Maybe some day, but not today. Please don&amp;rsquo;t use this to build a production system then blame us when your system goes down. Please &lt;em&gt;do&lt;/em&gt; use this in hobby projects and let us know what you manage to build!&lt;/p&gt;
&lt;h2 id=&#34;feedback&#34;&gt;
  Feedback
  &lt;a class=&#34;anchor&#34; href=&#34;#feedback&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Please send us any feedback you have! You can &lt;a href=&#34;https://lambdaland.org/#contact&#34;&gt;contact me directly&lt;/a&gt; or &lt;a href=&#34;https://github.com/utahplt/chorex/issues&#34;&gt;open an issue&lt;/a&gt; on the Chorex repository. We would &lt;em&gt;love&lt;/em&gt; to see anything you make with Chorex.&lt;/p&gt;
&lt;h2 id=&#34;fun-details-on-the-implementation&#34;&gt;
  Fun details on the implementation
  &lt;a class=&#34;anchor&#34; href=&#34;#fun-details-on-the-implementation&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;While building the &lt;code&gt;defchor&lt;/code&gt; macro, I realized I needed to walk an AST and gather up a list of functions an an endpoint would need to define. This inspired me to create a writer monad; I documented how I stumbled upon a pattern that a monad solved quite elegantly &lt;a href=&#34;https://lambdaland.org/posts/2024-05-01_definitely_not_about_monads/&#34;&gt;earlier on my blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;style&gt;.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[1]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Hirsch, A.K. and Garg, D. 2022. Pirouette: Higher-order typed functional choreographies. &lt;i&gt;Proceedings of the acm on programming languages&lt;/i&gt;. 6, (Jan. 2022), 1–27. DOI:&lt;a href=&#34;https://doi.org/10.1145/3498684&#34;&gt;https://doi.org/10.1145/3498684&lt;/a&gt;.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[2]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Lugović, L. and Montesi, F. 2023. Real-World Choreographic Programming: Full-Duplex Asynchrony and Interoperability. &lt;i&gt;The art, science, and engineering of programming&lt;/i&gt;. 8, 2 (Oct. 2023), 8. DOI:&lt;a href=&#34;https://doi.org/10.22152/programming-journal.org/2024/8/8&#34;&gt;https://doi.org/10.22152/programming-journal.org/2024/8/8&lt;/a&gt;.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[3]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Montesi, F. 2023. &lt;i&gt;&lt;a href=&#34;https://doi.org/10.1017/9781108981491&#34;&gt;Introduction to Choreographies&lt;/a&gt;&lt;/i&gt;. Cambridge University Press.&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My Top Emacs Packages</title>
      <link>https://lambdaland.org/posts/2024-05-30_top_emacs_packages/</link>
      <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-05-30_top_emacs_packages/</guid>
      <description>&lt;p&gt;If you ask anyone what the best Emacs packages are, you&amp;rsquo;ll almost definitely hear &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; (the only Git porcelain worth using) and &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org Mode&lt;/a&gt; (a way to organize anything and everything in plain text) listed as #1 and #2. And they&amp;rsquo;re right! I use those packages extensively every day.&lt;/p&gt;
&lt;p&gt;Besides those two powerhouses, there are a handful of packages that make using Emacs a delight. If I had to ever use something else, I would miss these packages most:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;Avy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jump around your screen crazy fast. Teleport to any character with ~5 key strokes. See &lt;a href=&#34;https://karthinks.com/software/avy-can-do-anything/&#34;&gt;https://karthinks.com/software/avy-can-do-anything/&lt;/a&gt; for more reasons why it&amp;rsquo;s awesome. I almost exclusively rely on &lt;code&gt;avy-goto-char-timer&lt;/code&gt; and have it bound to &lt;code&gt;s-j&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/oantolin/embark&#34;&gt;Embark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kind of like a super-charged right-click for Emacs. Works beautifully in dired, when selecting files in the minibuffer. There&amp;rsquo;s an easy way to make it play well with Avy which is just the best.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeberg.org/akib/emacs-eat&#34;&gt;Eat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eat is a terminal emulator that&amp;rsquo;s faster almost all&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; the other terminal emulators for Emacs. Additionally, it can make a terminal emulator &lt;em&gt;in a particular region&lt;/em&gt;, so if you use Eshell, you can get a little terminal emulator for every command you run. Normally, if you run, say, &lt;code&gt;cal&lt;/code&gt;, you see the ugly terminal escape characters printed as text. With Eat, however, those terminal escape characters get interpreted correctly. Interactive programs (e.g. the Julia and Elixir REPLs) work flawlessly with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/minad/jinx&#34;&gt;Jinx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best spellchecking ever. It can spellcheck based off of the fontlock face; I keep this on when I program to get on-the-fly spellchecking of code comments and strings. I keep &lt;code&gt;jinx-correct&lt;/code&gt; bound to &lt;code&gt;C-;&lt;/code&gt; à la flyspell because it is so darn helpful. Supports checking documents with mixed languages. This is one of the packages I miss most when I&amp;rsquo;m editing text outside of Emacs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-citar/citar&#34;&gt;Citar&lt;/a&gt;
The best way to add citations in Emacs, hands-down. Reads bibtex, inserts in org-mode, LaTeX, whatever.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;user-interface-enhancement&#34;&gt;
  User interface enhancement
  &lt;a class=&#34;anchor&#34; href=&#34;#user-interface-enhancement&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;These next packages are all by &lt;a href=&#34;https://github.com/minad&#34;&gt;Daniel Mendler&lt;/a&gt;. These packages improve selecting commands, buffers, files, etc. from the &lt;code&gt;completing-read&lt;/code&gt; and &lt;code&gt;completion-at-point&lt;/code&gt; interfaces. These make Emacs insanely ergonomic and excellent.&lt;/p&gt;
&lt;p&gt;These replace packages like &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm&lt;/a&gt;, &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy/Counsel/Swiper&lt;/a&gt;, and &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;Company&lt;/a&gt;. In comparison to these packages, Vertico + Consult + Corfu are lighter-weight, faster, less buggy (in my experience; I&amp;rsquo;ve tried them all!), and work better with other Emacs packages because they follow the default built-in APIs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lighter-weight, less buggy vertical completing-read interface. Replaces Ivy. Incredibly flexible. Works out-of-the-box with everything that has a &lt;code&gt;completing-read&lt;/code&gt; interface, so you don&amp;rsquo;t need special &lt;code&gt;*-ivy&lt;/code&gt; packages to make it play nice. Recommend adding &lt;a href=&#34;https://github.com/minad/marginalia/&#34;&gt;Marginalia&lt;/a&gt; as well by the same author to add extra infos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/minad/consult&#34;&gt;Consult&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Better than counsel. The live preview is amazing; I use &lt;code&gt;consult-buffer&lt;/code&gt; instead of &lt;code&gt;switch-to-buffer&lt;/code&gt;, &lt;code&gt;consult-line&lt;/code&gt; instead of Swiper. &lt;code&gt;consult-ripgrep&lt;/code&gt; is :fire: for searching large projects with instant previewable results. Pairs well with Embark to save results to a buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;Corfu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lightweight pop-up library. Pairs well with &lt;a href=&#34;https://github.com/minad/cape&#34;&gt;Cape&lt;/a&gt; by the same author.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See also &lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;Orderless&lt;/a&gt; which enhances everything from &lt;code&gt;M-x&lt;/code&gt; to &lt;code&gt;consult-line&lt;/code&gt; to the Corfu popup. Vertico + Consult + Orderless + Marginalia + Corfu + Cape + Embark is sometimes called the &amp;ldquo;minad stack&amp;rdquo;.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; It&amp;rsquo;s the new hotness—that said, it&amp;rsquo;s gotten really really stable over the past two years.&lt;/p&gt;
&lt;p&gt;If you like these packages, consider sponsoring their maintainers! These are some of my favorite open-source projects and I try to support them when I can.&lt;/p&gt;
&lt;h2 id=&#34;a-starter-kit-built-on-these&#34;&gt;
  A starter kit built on these
  &lt;a class=&#34;anchor&#34; href=&#34;#a-starter-kit-built-on-these&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;If you like these packages, you might like my &lt;a href=&#34;https://codeberg.org/ashton314/emacs-bedrock&#34;&gt;Emacs Bedrock&lt;/a&gt; starter kit which, unlike many other starter kits, is meant to be a no-nonsense no-fluff no-abstraction bare-bones start for you to fork and tinker with to your liking. The stock configuration only installs &lt;em&gt;one&lt;/em&gt; package (&lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;which-key&lt;/a&gt;, which is amazing) but includes some extra example configuration. The &lt;a href=&#34;https://codeberg.org/ashton314/emacs-bedrock/src/branch/main/extras/base.el&#34;&gt;extras/base.el&lt;/a&gt; file includes sample starter configuration for most of the above packages. (I should add &lt;code&gt;eat&lt;/code&gt; to it, come to think of it…)&lt;/p&gt;
&lt;h2 id=&#34;errata&#34;&gt;
  Errata
  &lt;a class=&#34;anchor&#34; href=&#34;#errata&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Eat is not the fastest terminal emulator, Vterm is. Thanks to a Redditor who pointed this out.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The only emulator it&amp;rsquo;s &lt;em&gt;not&lt;/em&gt; faster than is Vterm, which is pretty dang speedy. Eat has been more than fast enough for all my needs however.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Embark and Orderless are both developed by &lt;a href=&#34;https://github.com/oantolin&#34;&gt;Omar Camarena&lt;/a&gt; (oantolin) who frequently collaborates with Daniel Mendler. When I asked Omar on Reddit about the name, Omar replied that &amp;ldquo;minad stack&amp;rdquo; is fine; another name they&amp;rsquo;ve tried for the stack is &amp;ldquo;iceberg&amp;rdquo;, which I think is a good name too.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Boilerplate Busting in Functional Languages</title>
      <link>https://lambdaland.org/posts/2024-05-01_definitely_not_about_monads/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2024-05-01_definitely_not_about_monads/</guid>
      <description>&lt;p&gt;This is the story of how I solved a problem (ugly, cumbersome boilerplate code) that I ran into while writing a program in a functional language (Elixir). Functional programming languages often pride themselves on expressiveness and elegance; but occasionally they are not amenable to the most obvious solutions to the problems we wish to solve. In this case, the simplest solution to my problem would have been to have a global mutable variable. But no one likes those.&lt;/p&gt;
&lt;p&gt;The solution most programmers would have found obviates mutation, but the code ends up being rather clunky. This inelegance stems from two intertwined issues pulling the code in different directions. However, the two concerns are &lt;em&gt;so&lt;/em&gt; intertwined that it can be difficult to see them as separate issues at all! In this blog post, I hope I can show you a new way of looking at this class of problem that will let you see what those two issues are, and how to cleanly split them apart to get nice, maintainable, functional code.&lt;/p&gt;
&lt;div class=&#34;epigraph&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;You take your analytic knife, put the point directly on the term Quality and just tap, not hard, gently, and the whole world splits, cleaves, right in two… and the split is clean. There’s no mess. No slop. No little items that could be one way or the other. Not just a skilled break but a very lucky break. Sometimes the best analysts, working with the most obvious lines of cleavage, can tap and get nothing but a pile of trash. And yet here was Quality; a tiny, almost unnoticeable fault line; a line of illogic in our concept of the universe; and you tapped it, and the whole universe came apart, so neatly it was almost unbelievable.&lt;/p&gt;
&lt;footer&gt;
&lt;p&gt;&lt;em&gt;Zen and the Art of Motorcycle Maintenance&lt;/em&gt;, Robert M. Pirsig&lt;/p&gt;
&lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h2 id=&#34;the-setup&#34;&gt;
  The Setup
  &lt;a class=&#34;anchor&#34; href=&#34;#the-setup&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I will use a concrete example to describe my specific problem, though the issue is general enough that you likely have encountered it. After I walk through the example I&amp;rsquo;ll cover the essential elements that make my solution work, and how it generalizes to similar problems.&lt;/p&gt;
&lt;p&gt;Suppose that you are writing an application that lets people track their workout habits. Every time that they succeed in meeting a goal, they register what they accomplished. Now you have a database full of logged events like &amp;ldquo;went to the gym&amp;rdquo; or &amp;ldquo;swam 1000 m&amp;rdquo; or &amp;ldquo;ran a mile&amp;rdquo;, etc. Now you need some way to convert this set of events into reward points—preferably in a way that the user finds motivating.&lt;/p&gt;
&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;Table 1:&lt;/span&gt;
  An example of such habit records for a user.
&lt;/div&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;&lt;code&gt;user_id&lt;/code&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;&lt;code&gt;event_type&lt;/code&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;&lt;code&gt;event_amount&lt;/code&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;69105&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;2024-05-01&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;gym&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;69105&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;2024-05-02&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;swim&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1000&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;69105&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;2024-05-03&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;gym&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;69105&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;2024-05-04&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;run&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1.61&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;But every user is different, so let&amp;rsquo;s say that you make it so that users can customize exactly how goal completions translate into reward points. Somewhere in your app you let users write a little equation that your program will then evaluate against the events that they have logged. In the end, the user gets a single point value.&lt;/p&gt;




&lt;div class=&#34;book-tabs&#34;&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-surface_and_ast&#34; id=&#34;tabs-surface_and_ast-0&#34; checked=&#34;checked&#34; /&gt;
  &lt;label for=&#34;tabs-surface_and_ast-0&#34;&gt;Surface Syntax&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;points &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;swim&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-surface_and_ast&#34; id=&#34;tabs-surface_and_ast-1&#34;  /&gt;
  &lt;label for=&#34;tabs-surface_and_ast-1&#34;&gt;Parsed AST&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;swim&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-surface_and_ast&#34; id=&#34;tabs-surface_and_ast-2&#34;  /&gt;
  &lt;label for=&#34;tabs-surface_and_ast-2&#34;&gt;Evaluation result&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;points &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;swim&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;     &lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;   &lt;span style=&#34;color:#b48ead&#34;&gt;1.16&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3180&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; interpret&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user_id&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;op&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; op&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;arg1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; arg2&lt;span style=&#34;color:#eceff4&#34;&gt;]})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  arg1_eval &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; interpret&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user_id&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; arg1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  arg2_eval &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; interpret&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user_id&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; arg2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; op &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; arg1_eval &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; arg2_eval
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; arg1_eval &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; arg2_eval
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; interpret&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;_user_id&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;}),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; interpret&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user_id&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; q&lt;span style=&#34;color:#eceff4&#34;&gt;}),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; query_db&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user_id&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; q&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 1:&lt;/span&gt;
  Sample interpreter for the simple language.
&lt;/div&gt;
&lt;p&gt;This is, in essence, a little interpreter. I will not go over how to build an interpreter here, but the gist of it is that you walk down the AST of the equation and evaluate the leaves and nodes recursively until you wind up with a single number of points at the end.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s say that you are processing a large number of such requests, and you would like to batch all of the database calls. In the previous example, there were four database queries, one of which (&lt;code&gt;&amp;quot;gym&amp;quot;&lt;/code&gt;) was a duplicate. (Each &lt;code&gt;get&lt;/code&gt; in the surface syntax or &lt;code&gt;query&lt;/code&gt; node in the AST induces a database query.) To improve performance, you could batch all of these database calls—thereby also eliminating duplicate queries—and then have this data on hand as you walk the AST.&lt;/p&gt;
&lt;p&gt;So here is the new operation we would like to perform: we want to walk through AST, collect all of the database calls into a set, and replace each instance of a database query (&lt;code&gt;query&lt;/code&gt; nodes) in the expression to a &lt;em&gt;reference&lt;/em&gt; (&lt;code&gt;query_ref&lt;/code&gt; nodes) that we can link to the batched results. We will create a fresh identifier every time we encounter a new query; duplicate queries will use the first reference.&lt;/p&gt;




&lt;div class=&#34;book-tabs&#34;&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-optimization_diff&#34; id=&#34;tabs-optimization_diff-0&#34; checked=&#34;checked&#34; /&gt;
  &lt;label for=&#34;tabs-optimization_diff-0&#34;&gt;Before optimization&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;swim&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-optimization_diff&#34; id=&#34;tabs-optimization_diff-1&#34;  /&gt;
  &lt;label for=&#34;tabs-optimization_diff-1&#34;&gt;After optimization&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query_ref&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query_ref&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query_ref&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;query_ref&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#34;queries&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gym&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;swim&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to implement it.&lt;/p&gt;
&lt;h3 id=&#34;first-attempt&#34;&gt;
  First attempt
  &lt;a class=&#34;anchor&#34; href=&#34;#first-attempt&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We could just create a variable that we can mutate as we walk down the tree: every time we encounter a node that looks like &lt;code&gt;{ &amp;quot;query&amp;quot;: _ }&lt;/code&gt;, we generate a fresh identifier (or look up an old one if it&amp;rsquo;s a duplicate query) and replace it with &lt;code&gt;{ &amp;quot;query_ref&amp;quot;: _id }&lt;/code&gt;. Once we&amp;rsquo;re done walking the tree, we have a new AST with &lt;code&gt;query_ref&lt;/code&gt; nodes instead of &lt;code&gt;query&lt;/code&gt; nodes, and a list of queries that we can execute in one go.&lt;/p&gt;
&lt;p&gt;This could work, but the fact that we are using &lt;em&gt;global mutable state&lt;/em&gt; should ring alarm bells for &lt;em&gt;anyone&lt;/em&gt;&amp;mdash;not just functional programmers. Whenever we call our transform function, we would have to ensure that we clear out the old list of accumulated information. Don&amp;rsquo;t forget about all the &lt;em&gt;other&lt;/em&gt; problems that global mutable state brings. There must be a better way.&lt;/p&gt;
&lt;h3 id=&#34;second-attempt&#34;&gt;
  Second attempt
  &lt;a class=&#34;anchor&#34; href=&#34;#second-attempt&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;How might our function be more pure? Instead of just returning a modified tree, we can return a tuple of the new AST node plus a list of queries. (I&amp;rsquo;ll call this specific shape an &lt;em&gt;AST-queries-tuple&lt;/em&gt; throughout.) This eliminates the need for a global variable, and now every call to our optimization function is pure. It&amp;rsquo;s easier to test and reason about.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:query&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; query_text&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  query_id &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; fresh_query_id&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:query_ref&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; query_id&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[{&lt;/span&gt;query_id&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; query_text&lt;span style=&#34;color:#eceff4&#34;&gt;}]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; lhs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; rhs&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;new_ast_l&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; queries_l&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;new_ast_r&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; queries_r&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_ast_l&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_ast_r&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; queries_l &lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt; queries_r&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, this means that we have to take care to combine this information whenever we do a recursive call. It becomes even more cumbersome when we recur over elements in a list and we need to combine all their results together. A well-crafted &lt;code&gt;reduce&lt;/code&gt; makes things work OK, but I think you can agree the following code isn&amp;rsquo;t the most &lt;em&gt;straightforward&lt;/em&gt; to read and understand what&amp;rsquo;s going on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:max&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# args is a list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;reduce&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; qs&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;max_acc&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; q_acc&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; max_acc&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; qs &lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt; q_acc&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is quite a bit of boilerplate. It&amp;rsquo;s not the &lt;em&gt;worst&lt;/em&gt; code ever—it&amp;rsquo;s certainly better than our first solution with a global variable—but we seem to be saying more than we need to here.&lt;/p&gt;
&lt;h2 id=&#34;finding-the-cleavage-point&#34;&gt;
  Finding the cleavage point
  &lt;a class=&#34;anchor&#34; href=&#34;#finding-the-cleavage-point&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;How can we clean up this code? The code is messy because there are actually &lt;em&gt;two competing concerns&lt;/em&gt; here: we have some &lt;em&gt;main computation&lt;/em&gt; that we care about (transforming the tree) and some &lt;em&gt;side information&lt;/em&gt; (the set of database queries) that we&amp;rsquo;d like to collect in parallel. If we can separate these concerns, our code will improve.&lt;/p&gt;
&lt;p&gt;Now that we see the two intertwined issues, how do we go about separating them? We will still carry around the AST-queries-tuple, but we are going to pull out the logic that governs how we keep track of the list of queries and keep it separate from the AST transformation logic.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s define a module, a type to help us keep track of an AST-queries-tuple, and a function &lt;code&gt;wrap&lt;/code&gt; that takes some AST and pairs it with an empty list of queries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;AstList&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8fbcbb&#34;&gt;@type&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Ast&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;()]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8fbcbb&#34;&gt;@spec&lt;/span&gt; wrap&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Ast&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; wrap&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;v&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;v&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Second, the clever bit: we write a function that lets us manipulate the AST value inside the tuple &lt;em&gt;without worrying about how to combine the sets of queries&lt;/em&gt;. We&amp;rsquo;ll call this function &lt;code&gt;thread&lt;/code&gt;, and it takes an AST-queries-tuple and gives it to a function argument that expects &lt;em&gt;just&lt;/em&gt; the AST bit. That function argument should return a new AST-queries-tuple. Our function &lt;code&gt;thread&lt;/code&gt; will then merge the two lists of queries together without the function parameter ever having to worry about it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;@spec&lt;/span&gt; thread&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Ast&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; thread&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;ast&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; queries&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;new_ast&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_queries&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ast&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;new_ast&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_queries &lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt; queries&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can use this to write our &lt;code&gt;transform_queries&lt;/code&gt; function! Before we get there, remember that Elixir has a handy set of &lt;a href=&#34;https://hexdocs.pm/elixir/1.12/operators.html#custom-and-overridden-operators&#34;&gt;customizable infix operators&lt;/a&gt; that we can use as shorthand:&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;s1&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;s1&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
It would be nice if we could use &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; for this shorthand… but I&amp;rsquo;m getting ahead of myself.
&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&amp;gt;&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; thread&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;m&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That means that instead of writing this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; lhs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; rhs&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;new_ast_l&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; queries_l&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;new_ast_r&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; queries_r&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_ast_l&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_ast_r&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; queries_l &lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt; queries_r&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can just write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; lhs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; rhs&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; new_lhs &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; new_rhs &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wrap&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_lhs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_rhs&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might be able to see now how this would make writing this little optimization pass a lot cleaner. We can go a step further on the syntax though: with a little metaprogramming imagination, we can write some shorthand for the &lt;code&gt;~&amp;gt;&lt;/code&gt; notation that looks more like variable assignment in a &lt;code&gt;with&lt;/code&gt;. It&amp;rsquo;s not that hard to do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defp&lt;/span&gt; transform_threading&lt;span style=&#34;color:#eceff4&#34;&gt;([{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; _&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;var&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; expr&lt;span style=&#34;color:#eceff4&#34;&gt;]}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; rst&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;quote&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;unquote&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expr&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;unquote&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;var&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;unquote&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;transform_threading&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rst&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defp&lt;/span&gt; transform_threading&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;expr&lt;span style=&#34;color:#eceff4&#34;&gt;]),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; expr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defmacro&lt;/span&gt; threading &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:__block__&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; _&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; lines&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  transform_threading&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lines&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can write the handler for &lt;code&gt;+&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; lhs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; rhs&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  threading &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_lhs &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;-&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_rhs &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;-&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rhs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wrap&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_lhs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; new_rhs&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that gets transformed into the nested anonymous function notation we saw previously.&lt;/p&gt;
&lt;h3 id=&#34;what-do-we-get&#34;&gt;
  What do we get?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-do-we-get&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Now we don&amp;rsquo;t have to think about merging the list of queries any more: the &lt;code&gt;~&amp;gt;&amp;gt;&lt;/code&gt; operator handles all that for us. Bigger savings come if we think about making a version of &lt;code&gt;map&lt;/code&gt; that works with our AST-queries-tuples. We&amp;rsquo;ll call it &lt;code&gt;mapM&lt;/code&gt; since it&amp;rsquo;s like a &lt;code&gt;map&lt;/code&gt; that we&amp;rsquo;re &lt;em&gt;mashing&lt;/em&gt; the results together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;@spec&lt;/span&gt; mapM&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vs &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Ast&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()],&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Ast&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; mapM&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  results &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; vs &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    results
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;elem&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d08770&#34;&gt;&amp;amp;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    results
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;elem&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d08770&#34;&gt;&amp;amp;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;reduce&lt;span style=&#34;color:#eceff4&#34;&gt;([],&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;++/&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we map over a list of &lt;code&gt;Ast&lt;/code&gt; values, collect all the resulting sets of queries, and merge them together. This gives us a big savings when we write something like the &lt;code&gt;max&lt;/code&gt; function:&lt;/p&gt;




&lt;div class=&#34;book-tabs&#34;&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-mapM_before_after&#34; id=&#34;tabs-mapM_before_after-0&#34; checked=&#34;checked&#34; /&gt;
  &lt;label for=&#34;tabs-mapM_before_after-0&#34;&gt;New version&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:max&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  args &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; mapM&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;~&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;wrap&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:max&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d08770&#34;&gt;&amp;amp;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-mapM_before_after&#34; id=&#34;tabs-mapM_before_after-1&#34;  /&gt;
  &lt;label for=&#34;tabs-mapM_before_after-1&#34;&gt;Old version&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:max&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# args is a list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;transform_queries&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;reduce&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; qs&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;max_acc&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; q_acc&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; max_acc&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; qs &lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt; q_acc&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that all the handling of the extra information has been lifted out of our code. Not only does it make it clearer what the &lt;em&gt;core intent&lt;/em&gt; of the functions are, but we also get some added flexibility around how we structure that extra data. If we wanted to use a map or a set instead of a list of tuples as the second element in the AST-queries-tuple, then with this refactoring we only have to modify the &lt;code&gt;wrap&lt;/code&gt;, &lt;code&gt;thread&lt;/code&gt;, and &lt;code&gt;mapM&lt;/code&gt; functions. The rest of the code can stay the same!&lt;/p&gt;
&lt;p&gt;So, with a little bit of work, we&amp;rsquo;ve gone from a solution using global mutable state 🤢 to passing around a AST-queries-tuple 😐 to abstracting out the tuple entirely, gaining clarity and flexibility along the way. 🤩 Our threading-related functions are actually generic enough that they don&amp;rsquo;t need to be about ASTs and lists of queries—as long as we are doing some main computation with a little extra data gathering on the side, this pattern should apply.&lt;/p&gt;
&lt;p&gt;Wouldn&amp;rsquo;t it be nice if this pattern had a name?&lt;/p&gt;
&lt;h2 id=&#34;it-was-a-monad-all-along&#34;&gt;
  It was a monad all along!
  &lt;a class=&#34;anchor&#34; href=&#34;#it-was-a-monad-all-along&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Surprise! This is exactly the &lt;a href=&#34;https://wiki.haskell.org/All_About_Monads#The_Writer_monad&#34;&gt;writer monad&lt;/a&gt;! This whole post has been a monad tutorial in disguise!&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve been exposed to monads before, you might recognize &lt;code&gt;wrap&lt;/code&gt; as &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;thread&lt;/code&gt; as &lt;code&gt;bind&lt;/code&gt; or—as the Haskell programmers like to call it&amp;mdash;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;. The &lt;code&gt;thread do … end&lt;/code&gt; macro is just &lt;a href=&#34;https://learnyouahaskell.com/a-fistful-of-monads#do-notation&#34;&gt;&lt;code&gt;do&lt;/code&gt; notation&lt;/a&gt;. (I couldn&amp;rsquo;t think of a clever name for &lt;code&gt;mapM&lt;/code&gt;, so I just pretended the &lt;code&gt;M&lt;/code&gt; stood for &lt;em&gt;mash&lt;/em&gt; instead of &lt;em&gt;monad&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Monad&amp;rdquo; is just an interface.&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;s3&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;s3&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
There&amp;rsquo;s a subtle difference between interfaces and typeclasses, and I&amp;rsquo;ll get to that shortly. This is meant to build intuition.
&lt;/span&gt;
That&amp;rsquo;s all there is to it. To make your data structure (like our AST-queries-tuple) conform to the Monad interface, you need functions like &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;thread&lt;/code&gt;. Once you have those, you have a monad.&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;s4&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;s4&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
OK, there are certain properties (called the &amp;ldquo;monad laws&amp;rdquo;—don&amp;rsquo;t worry, they&amp;rsquo;re not that scary even though the name sounds ominous) that these functions need to satisfy, but they&amp;rsquo;re pretty easy to hit. If you don&amp;rsquo;t satisfy these laws, your monad won&amp;rsquo;t behave predictably in certain circumstances. If you&amp;rsquo;re getting started with monads, don&amp;rsquo;t worry about it right now.
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s pretty much all there is to it.&lt;/p&gt;
&lt;h3 id=&#34;different-kinds-of-monads&#34;&gt;
  Different kinds of monads
  &lt;a class=&#34;anchor&#34; href=&#34;#different-kinds-of-monads&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;There isn&amp;rsquo;t a fixed number of monads; there are however a set of more-or-less &amp;ldquo;standard&amp;rdquo; monads which have been discovered to be generally useful; the Haskell Wiki has a nice list &lt;a href=&#34;https://wiki.haskell.org/All_About_Monads#A_Catalog_of_Standard_Monads&#34;&gt;here&lt;/a&gt;. Among these is the &amp;ldquo;maybe&amp;rdquo; monad, which lets you focus on the happy-path of computation and abstracts away the failure path. In Elixir, you can see this pattern with the &lt;code&gt;{:ok, term()} | :error&lt;/code&gt; idiom. (The &lt;code&gt;with&lt;/code&gt; notation commonly seen in this idiom closely follows Haskell&amp;rsquo;s &lt;code&gt;do&lt;/code&gt; notation.) There are many other useful monads besides the writer and maybe monads. Some of these (like the &lt;a href=&#34;https://wiki.haskell.org/All_About_Monads#The_IO_monad&#34;&gt;IO monad&lt;/a&gt;) are pretty specific to Haskell and other pure functional languages that don&amp;rsquo;t support the same kinds of control flow or constructs; others have wider application.&lt;/p&gt;
&lt;h3 id=&#34;what-monad-tutorials-get-wrong&#34;&gt;
  What monad tutorials get wrong
  &lt;a class=&#34;anchor&#34; href=&#34;#what-monad-tutorials-get-wrong&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Most of the value (I think) of monads is not having &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;, but all the helper functions like &lt;code&gt;mapM&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt; notation, and friends. While I was &lt;a href=&#34;https://codeberg.org/ashton314/ysue&#34;&gt;writing some Haskell&lt;/a&gt;, I got to know all the monad-related functions and how useful they were. These helper functions are what make programming with monads &lt;em&gt;natural&lt;/em&gt; and &lt;em&gt;powerful&lt;/em&gt;. The core functions &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; are all you &amp;ldquo;need&amp;rdquo; to make a monad, but no one would actually program with just those.&lt;/p&gt;
&lt;p&gt;If you ever find something that you think would work well modeled as a monad, be sure to implement additional functions &lt;em&gt;beyond&lt;/em&gt; &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt;. You can see a list of functions Haskell implements for monads &lt;a href=&#34;https://hackage.haskell.org/package/base-4.19.0.0/docs/Control-Monad.html#g:4&#34;&gt;here&lt;/a&gt; if you want some inspiration.&lt;/p&gt;
&lt;h2 id=&#34;why-haskell-uses-monads-so-much&#34;&gt;
  Why Haskell uses monads so much
  &lt;a class=&#34;anchor&#34; href=&#34;#why-haskell-uses-monads-so-much&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You hear a lot about monads with languages like Haskell, but not so much with other functional languages like Elixir or Rust. Part of this is need, and part is because of ergonomics.&lt;/p&gt;
&lt;p&gt;Haskell needs monads to implement effectful computation. Effects include exceptions (modeled by the maybe monad) or logging information (the writer monad). Languages that have these effects natively don&amp;rsquo;t strictly &lt;em&gt;need&lt;/em&gt; these monads. (Though, as we&amp;rsquo;ve seen, writing a monad can help other languages, even when they have uncontrolled side-effects, like Elixir.)&lt;/p&gt;
&lt;p&gt;Haskell makes using monads ergonomic through its &lt;em&gt;typeclass&lt;/em&gt; mechanism. Other languages have more constrained method dispatching mechanisms, so you have to jump through some hoops to get monads to work as seamlessly as they do in Haskell.&lt;/p&gt;
&lt;h3 id=&#34;typeclasses-vs-dot-interfaces&#34;&gt;
  Typeclasses vs. interfaces
  &lt;a class=&#34;anchor&#34; href=&#34;#typeclasses-vs-dot-interfaces&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re familiar with an OO language, you&amp;rsquo;ve almost certainly come across the idea of an interface: it&amp;rsquo;s just a specification of methods an object needs to implement. &lt;em&gt;Typeclasses&lt;/em&gt; are similar: they specify a set of functions needed for a type to belong to a typeclass. There are a few key differences between typeclasses and interfaces however:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interfaces are &lt;em&gt;closed&lt;/em&gt;, meaning, if an object doesn&amp;rsquo;t implement the interface, you can&amp;rsquo;t do anything about it, unless you modify the definition of the object itself.&lt;/p&gt;
&lt;p&gt;In contrast, typeclasses are &lt;em&gt;open&lt;/em&gt;, meaning that I can implement the requisite functions to turn a datatype into a monad, even if I can&amp;rsquo;t modify the definition of the datatype itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interfaces specify methods that dispatch on their object. If I call &lt;code&gt;thing.dance()&lt;/code&gt;, then I will look up the &lt;code&gt;dance&lt;/code&gt; method in whatever class &lt;code&gt;thing&lt;/code&gt; belongs to.&lt;/p&gt;
&lt;p&gt;Typeclass functions can dispatch on the &lt;em&gt;return type&lt;/em&gt; of the function. For example, the &lt;code&gt;wrap&lt;/code&gt; (i.e. &lt;code&gt;return&lt;/code&gt;) function needs to dispatch on whatever type it&amp;rsquo;s expected to return. If I said something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;thing1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Robot&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Marvin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;thing2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Arthur&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;return&lt;/code&gt; would dispatch to the version specified for the &lt;code&gt;Robot&lt;/code&gt; type for &lt;code&gt;thing1&lt;/code&gt;, and &lt;code&gt;Person&lt;/code&gt;&amp;rsquo;s implementation for &lt;code&gt;thing2&lt;/code&gt;. This makes the monad functions really generic; with a &lt;code&gt;return&lt;/code&gt; that can dispatch on the expected return type, you can write &lt;code&gt;return&lt;/code&gt; without thinking much about which monad exactly you&amp;rsquo;re using.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-monads-in-non-haskell-languages&#34;&gt;
  Using monads in non-Haskell languages
  &lt;a class=&#34;anchor&#34; href=&#34;#using-monads-in-non-haskell-languages&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;In languages that don’t have typeclasses, you need to take special steps to ensure that you dispatch to the proper variant of the monad. Racket has a &lt;a href=&#34;https://docs.racket-lang.org/functional/interfaces.html&#34;&gt;monad library&lt;/a&gt; that works via a generics interface system, plus a few tricks to teach &lt;code&gt;return&lt;/code&gt; (called &lt;code&gt;pure&lt;/code&gt; in this library) what type it should return. I am sure the same tricks would apply to Elixir. Indeed, Elixir has &lt;a href=&#34;https://hexdocs.pm/elixir/protocols.html&#34;&gt;protocols&lt;/a&gt;, which are like interfaces, but they are open. They still dispatch on the shape of the first argument passed to them, you would need to pull a trick like Racket&amp;rsquo;s &lt;code&gt;pure&lt;/code&gt; function and pass an argument to ignore just to get the dispatch right.&lt;/p&gt;
&lt;p&gt;Elixir has less need for monads than Haskell because its functions are impure. (A function can do arbitrary IO, send messages, throw exceptions, etc.) but there are still cases (as we have seen) where a monad can make life easier. Consider using a monad library the next time you need to avoid ugly side-effects!&lt;/p&gt;
&lt;h2 id=&#34;breaking-boilerplate-in-your-functional-projects&#34;&gt;
  Breaking boilerplate in your functional projects
  &lt;a class=&#34;anchor&#34; href=&#34;#breaking-boilerplate-in-your-functional-projects&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Functional languages are not immune to sprouting boilerplate. And while most of the design patterns in a certain OO cookbook are &amp;ldquo;invisible or simpler&amp;rdquo; in functional languages,&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;s5&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;s5&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
Quote from Peter Norvig. See: &lt;a href=&#34;https://norvig.com/design-patterns/design-patterns.pdf&#34;&gt;https://norvig.com/design-patterns/design-patterns.pdf&lt;/a&gt;
&lt;/span&gt;
some patterns crop up when similar problems arise.&lt;/p&gt;
&lt;p&gt;Monads are a powerful tool for dividing the &lt;em&gt;essential&lt;/em&gt; from the &lt;em&gt;incidental&lt;/em&gt; in a program. Exactly what constitutes the essential versus incidental parts—along with how to separate them—can be tricky to see at first. I think this is because separating these concerns in mainstream functional languages get less visibility, and not because of any &lt;em&gt;inherent&lt;/em&gt; difficulty of the problem. Perhaps if everyone started out programming by learning Racket and got comfortable with functional idioms, monads would be as natural as the Visitor pattern.&lt;label class=&#34;margin-toggle sidenote-number&#34; for=&#34;s6&#34;&gt;&lt;/label&gt;
&lt;input id=&#34;s6&#34; class=&#34;margin-toggle&#34; type=&#34;checkbox&#34;&gt;
&lt;span class=&#34;sidenote&#34;&gt;
Certainly it would be more comfortable than the &lt;code&gt;AbstractSingletonProxyFactoryBean&lt;/code&gt;!
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I was surprised and delighted when a monadic solution appeared as the most natural solution to a problem I was working on. Now, you might say that&amp;rsquo;s because I work as a programming languages researcher. &lt;em&gt;However&lt;/em&gt;, the last &lt;em&gt;two&lt;/em&gt; times I was working in industry, we had some sort of language interpreter, and I had to walk an AST. Knowing the writer monad would have saved me a lot of time and effort. I hope you can start seeing some monadic patterns in your code, and that you&amp;rsquo;ll be able to make a monad to make it easier to reason about and refactor your code as well.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;
  Further reading
  &lt;a class=&#34;anchor&#34; href=&#34;#further-reading&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/All_About_Monads&#34;&gt;https://wiki.haskell.org/All_About_Monads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnyouahaskell.com/a-fistful-of-monads&#34;&gt;https://learnyouahaskell.com/a-fistful-of-monads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;acknowledgements&#34;&gt;
  Acknowledgements
  &lt;a class=&#34;anchor&#34; href=&#34;#acknowledgements&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks to Scott Wiersdorf for the initial impetus to write this, as well as some thoughtful feedback on the prose and outline. Thanks also to Mark Ericksen for some additional comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Languages Need Not Be Slow</title>
      <link>https://lambdaland.org/posts/2023-12-20_functional_langauge_speed/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-12-20_functional_langauge_speed/</guid>
      <description>&lt;p&gt;Somewhere in my adolescence I got stuck with the notion that functional languages were slow while languages like C were fast. Now, a good C programmer can eke more performance out of their code than probably anyone else, but the cost you pay to keep your code correct goes exponential as you get closer and closer to the machine.&lt;/p&gt;
&lt;p&gt;Functional languages abstract a lot away from the machine. Higher languages in general abstract away the machine and make code easier to maintain. So I think I had it in my head that functional languages, being far away from the bare metal, must necessarily be slow. It didn&amp;rsquo;t help that I also thought of functional languages as being necessarily interpreted languages.&lt;/p&gt;
&lt;p&gt;Turns out, functional languages are just as amenable to compilation as imperative ones. Many popular/well-known functional are in fact compiled. (E.g. Haskell, Scala, Rust, Julia, etc.) Moreover, these languages can be just as fast—if not faster—than their more &amp;ldquo;mainstream&amp;rdquo; counterparts.&lt;/p&gt;
&lt;p&gt;I wanted to pit my favorite language (Racket) against a &lt;em&gt;slightly&lt;/em&gt; more well-known language (Python) to see how they handled a simple single-threaded program. For good measure I threw Rust, Julia, and JavaScript into the mix for comparison.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re impatient, just jump to &lt;a href=&#34;#the-results&#34;&gt;the results&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-programs&#34;&gt;
  The programs
  &lt;a class=&#34;anchor&#34; href=&#34;#the-programs&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I wrote the original program in Racket, then had ChatGPT help me rewrite it in Python. ChatGPT did astoundingly well. I eventually rewrote the program to be a little more idiomatic—I wanted it to use a loop instead of tail recursion, as Python is much better with loops than it is with lots and lots of function calls. I also had ChatGPT help me rewrite the program to Rust, Julia, and JavaScript. Impressive—and unsettling.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count-collatz n &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;cnt &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;cond&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; cnt&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;even?&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count-collatz &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; n &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; cnt&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count-collatz &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; cnt&lt;span style=&#34;color:#eceff4&#34;&gt;))]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count-collatz-upto n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for/fold&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;max-seen &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;i &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;in-range&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;max&lt;/span&gt; max-seen &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count-collatz i&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;displayln&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;Done ~a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count-collatz-upto &lt;span style=&#34;color:#b48ead&#34;&gt;5000000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 1:&lt;/span&gt;
  &lt;code&gt;collatz_check.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;count_collatz&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            n &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            n &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; cnt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;max_seen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;count_collatz_upto&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;global&lt;/span&gt; max_seen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        the_count &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; count_collatz&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_seen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;max_seen&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; the_count&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count_collatz_upto&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5000000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;Done&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; max_seen&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 2:&lt;/span&gt;
  &lt;code&gt;collatz_check.py&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;count_collatz&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n: &lt;span style=&#34;color:#81a1c1&#34;&gt;u64&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;u64&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;mut&lt;/span&gt; cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;mut&lt;/span&gt; num &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; num &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            num &lt;span style=&#34;color:#81a1c1&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            num &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; num &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cnt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;count_collatz_upto&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n: &lt;span style=&#34;color:#81a1c1&#34;&gt;u64&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;u64&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;mut&lt;/span&gt; max_seen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;..&lt;/span&gt;n &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_seen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; max_seen&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count_collatz&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_seen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Done &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; count_collatz_upto&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5000000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 3:&lt;/span&gt;
  &lt;code&gt;collatz_check.rs&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; count_collatz&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            n &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;÷&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            n &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; cnt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;max_seen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; count_collatz_upto&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;n&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        the_count &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; count_collatz&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;global&lt;/span&gt; max_seen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;max_seen&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; the_count&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count_collatz_upto&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5000000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;println&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;Done &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; max_seen&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 4:&lt;/span&gt;
  &lt;code&gt;collatz_check.jl&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; countCollatz&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; cnt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      n &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      n &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cnt&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; cnt&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; countCollatzUpto&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; maxSeen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    maxSeen &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;maxSeen&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; countCollatz&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; maxSeen&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;`\nDone &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;countCollatzUpto&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5000000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 5:&lt;/span&gt;
  &lt;code&gt;collatz_check.js&lt;/code&gt;
&lt;/div&gt;
&lt;h2 id=&#34;the-results&#34;&gt;
  The results
  &lt;a class=&#34;anchor&#34; href=&#34;#the-results&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I ran these programs on my M1 Pro MacBook Pro. Here&amp;rsquo;s what I got:&lt;/p&gt;
&lt;style&gt;.table-nocaption table { text-align: right;  }&lt;/style&gt;
&lt;div class=&#34;ox-hugo-table table-nocaption&#34;&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Language&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Time (seconds)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Racket&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4.68&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Python&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;34.27&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rust&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3.03&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Julia&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2.34&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;JavaScript&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;11.92&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In graphical form:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/benchmark_shootout.svg&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;Wow! I did not expect Python to get so pummeled by everything else! It makes sense that Julia with its sweet JIT engine is the fastest. Rust does well—no surprise there. (Note that I&amp;rsquo;m not counting compilation time here—all the more impressive for Julia!) Racket holds its own though, coming in third place by a wide margin. If you did take Rust&amp;rsquo;s compile time into account, I think that would make it switch places with Racket. Of course, you use Rust for compile-once-run-lots sorts of scenarios.&lt;/p&gt;
&lt;h2 id=&#34;discussion&#34;&gt;
  Discussion
  &lt;a class=&#34;anchor&#34; href=&#34;#discussion&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Are these authoritative? No, of course not. This is a simple synthetic benchmark. I don&amp;rsquo;t consider myself expert programmer in &lt;em&gt;any&lt;/em&gt; of these languages, so there are likely some performance tweaks that could make the respective language&amp;rsquo;s benchmark run faster. (Maybe I should in Racket… it&amp;rsquo;s kind of hard to consider yourself an expert in a language when its creator works down the hall from you though.)&lt;/p&gt;
&lt;p&gt;That said, I hope this dispels the myth that functional languages are &lt;em&gt;necessarily&lt;/em&gt; slow. That is not the case. If Python is fast enough for your use-case, then there&amp;rsquo;s no reason you shouldn&amp;rsquo;t consider using Racket on performance grounds.&lt;/p&gt;
&lt;p&gt;Library support is a different matter: of all the programming that goes on in the world, the majority is probably just gluing libraries together to do the thing you want. This is a good thing: it means we&amp;rsquo;re not reinventing so many wheels and people are getting good work done.&lt;/p&gt;
&lt;p&gt;That said, there&amp;rsquo;s plenty of exciting work for which no library exists! If you find yourself in one of these exciting cases, consider using the tool of maximum power: in this regard, nothing beats Racket for its flexibility and &lt;a href=&#34;https://lambdaland.org/posts/2023-10-17_fearless_macros/&#34;&gt;extensibility&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bonus-building-the-graph-in-racket&#34;&gt;
  Bonus: building the graph in Racket
  &lt;a class=&#34;anchor&#34; href=&#34;#bonus-building-the-graph-in-racket&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I love the Racket &lt;a href=&#34;https://docs.racket-lang.org/plot/&#34;&gt;Plot&lt;/a&gt; library. So easy to use, so powerful. If you run it inside of DrRacket, the graphs are actually interactive: you can rotate 3D graphs and zoom in on sections of 2D graphs. So neat!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code I used to generate the above graph:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; plot&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; *data* &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Racket&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4.68&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;34.27&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3.03&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Julia&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2.34&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;JavaScript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;11.92&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;parameterize&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;plot-font-face &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Charter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;plot-font-size &lt;span style=&#34;color:#b48ead&#34;&gt;14.0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;plot-x-ticks &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;linear-ticks &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:number&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:divisors&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;plot &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;discrete-histogram &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;reverse&lt;/span&gt; *data*&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:gap&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:invert?&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;#true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:title&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Simple benchmark results&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:out-kind&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;svg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:out-file&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;benchmark_shootout.svg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:x-max&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;35&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:x-label&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Seconds&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:width&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;800&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:height&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Towards Fearless Macros</title>
      <link>https://lambdaland.org/posts/2023-10-17_fearless_macros/</link>
      <pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-10-17_fearless_macros/</guid>
      <description>&lt;p&gt;Macros are tricky beasts. Most languages—if they have macros at all—usually include a huge &amp;ldquo;here there be dragons&amp;rdquo; warning to warn curious would-be macro programmers of the dangers that lurk ahead.&lt;/p&gt;
&lt;p&gt;What is it about macros that makes them so dangerous and unwieldy? That&amp;rsquo;s difficult to answer in general: there are many different macro systems with varying degrees of ease-of-use. Moreover, making macros easy to use safely is an open area of research—most languages that have macros don&amp;rsquo;t have features necessary to implement macros safely. Hence, most people steer clear of macros.&lt;/p&gt;
&lt;p&gt;There are many ways to characterize macro systems; I won&amp;rsquo;t attempt to cover them all here, but here&amp;rsquo;s the spectrum I&amp;rsquo;ll be covering in this post:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/macro_spectrum.svg&#34;
    alt=&#34;Figure 1: A spectrum of how easy macro systems are to use safely&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;A spectrum of how easy macro systems are to use safely&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;c-macros-advanced-search-and-replace&#34;&gt;
  C macros: advanced search-and-replace
  &lt;a class=&#34;anchor&#34; href=&#34;#c-macros-advanced-search-and-replace&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve done any C programming, you&amp;rsquo;ve likely run into things like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;#define FOO 42
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;The answer is: %s&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; FOO&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;/* prints &amp;#34;The answer is: 42&amp;#34; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That &lt;code&gt;#define&lt;/code&gt; bit is a macro—albeit a &lt;em&gt;C&lt;/em&gt; macro. These operate just after the lexer: they work on token streams. It&amp;rsquo;s a bit like textual search-and-replace, though it knows a &lt;em&gt;little&lt;/em&gt; bit about the structure of the language (not much: just what&amp;rsquo;s a token and what&amp;rsquo;s not) so that you won&amp;rsquo;t run into problems if you do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;#define FOO 42
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;It says FOO&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;/* prints &amp;#34;It says FOO&amp;#34; not &amp;#34;It says 42&amp;#34; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;because that &lt;code&gt;FOO&lt;/code&gt; in the string is &lt;em&gt;not&lt;/em&gt; a token—it&amp;rsquo;s just part of a string.&lt;/p&gt;
&lt;p&gt;C macros can&amp;rsquo;t do very much: you scan the token stream for a macro, then fill in the variables to the macro, and then replace the macro and the arguments its consumed with the filled-out template that is the macro definition. This prevents you from doing silly things like replacing something sitting inside of a string literal, but it&amp;rsquo;s far, far from being safe, as we&amp;rsquo;ll see in the next section.&lt;/p&gt;
&lt;h2 id=&#34;lisp-macros-operating-on-asts&#34;&gt;
  Lisp macros: operating on ASTs
  &lt;a class=&#34;anchor&#34; href=&#34;#lisp-macros-operating-on-asts&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In contrast to C&amp;rsquo;s macros, Lisp&amp;rsquo;s macros are much more powerful. Lisp macros operate after the lexer &lt;em&gt;and&lt;/em&gt; the parser have had a go at the source code—Lisp macro operate on &lt;em&gt;abstract syntax trees&lt;/em&gt;&amp;mdash;or ASTs, which is what the compiler or interpreter works with.&lt;/p&gt;
&lt;p&gt;Why is this a big deal? The ASTs capture the language&amp;rsquo;s semantics around precedence, for instance. In C you can write a macro that does unexpended things, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;#define DOUBLE(x) x + x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;DOUBLE&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;/* Does 3 * 5 + 5 = 20, not 3 * (5 + 5) = 30 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;DOUBLE&lt;/code&gt; macro didn&amp;rsquo;t know anything about precedence and we computed the wrong thing. This means that, to use a macro in C, you have to have a good idea of &lt;em&gt;how&lt;/em&gt; it&amp;rsquo;s doing what it&amp;rsquo;s intended to do. That means C macros are leaky abstractions that prevent local reasoning: you have to consider both the macro definition and where it&amp;rsquo;s used to understand what&amp;rsquo;s going on.&lt;/p&gt;
&lt;p&gt;In contrast, Lisp macros are an improvement because they will rewrite the AST and the precedence you&amp;rsquo;d expect will be preserved. You can do this, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;defmacro&lt;/span&gt; double &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;double &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; returns 30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lisp macros are also &lt;em&gt;procedural macros&lt;/em&gt;, meaning you can execute arbitrary code inside of a macro to generate new ASTs. Macros in Lisp and its descendants are essentially functions from AST → AST. This opens up a whole world of exciting possibilities! Procedural macros constitute a &amp;ldquo;lightweight compiler API&amp;rdquo;. [&lt;a href=&#34;#citeproc_bib_item_5&#34;&gt;5&lt;/a&gt;]&lt;/p&gt;
&lt;h2 id=&#34;scheme-macros-hygiene&#34;&gt;
  Scheme macros: hygiene
  &lt;a class=&#34;anchor&#34; href=&#34;#scheme-macros-hygiene&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Lisp macros aren&amp;rsquo;t without danger—many a Lisp programmer has shot their foot off with a macro. One reason is that Lisp macros are not &lt;em&gt;hygienic&lt;/em&gt;&amp;mdash;variables in the macro&amp;rsquo;s implementation may leak into the context of the macro call. This means that two Lisp programs that are the same except for different variable names&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; can behave differently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-1&#34;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-2&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-2&#34;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-3&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-3&#34;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-4&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-4&#34;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-5&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-5&#34;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-6&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-6&#34;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-7&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-7&#34;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-8&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-8&#34;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-9&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-9&#34;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-10&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-10&#34;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-11&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-11&#34;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-12&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-12&#34;&gt;12&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-13&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-13&#34;&gt;13&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--11fcf7-14&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--11fcf7-14&#34;&gt;14&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;defmacro&lt;/span&gt; swap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;tmp &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;                             (tmp-leaky)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;y tmp&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bar &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;swap foo bar&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;list&lt;/span&gt; foo bar&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; produces &amp;#39;(2 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;tmp &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;baz &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;swap tmp baz&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;                             (tmp-capture)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;list&lt;/span&gt; tmp baz&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; produces &amp;#39;(1 2) --- no swap!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The fact that the macro implementation uses a variable named &lt;code&gt;tmp&lt;/code&gt; (&lt;a href=&#34;#org-coderef--11fcf7-2&#34;&gt;tmp-leaky&lt;/a&gt;) has leaked through to the user of the macro. (&lt;a href=&#34;#org-coderef--11fcf7-13&#34;&gt;tmp-capture&lt;/a&gt;) This phenomenon is called &lt;em&gt;variable capture&lt;/em&gt;, and it exposes this macro as a leaky abstraction! There are ways to mitigate this using &lt;code&gt;gensym&lt;/code&gt;, but those are error-prone manual techniques. It makes macro writing feel like you&amp;rsquo;re writing in an unsafe lower-level language.&lt;/p&gt;
&lt;p&gt;Scheme&amp;rsquo;s macros introduce a concept known as &lt;em&gt;hygiene&lt;/em&gt;, which prevents variable capture automatically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-1&#34;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-2&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-2&#34;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-3&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-3&#34;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-4&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-4&#34;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-5&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-5&#34;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-6&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-6&#34;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-7&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-7&#34;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-8&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-8&#34;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-9&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-9&#34;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-10&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-10&#34;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-11&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-11&#34;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-12&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-12&#34;&gt;12&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-13&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-13&#34;&gt;13&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-14&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-14&#34;&gt;14&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-15&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-15&#34;&gt;15&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--0fd06c-16&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--0fd06c-16&#34;&gt;16&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax &lt;/span&gt;swap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;syntax-rules &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;swap&lt;/span&gt; a b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;tmp&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;                     (tmp-intro-macro)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;set! &lt;/span&gt;a b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;set! &lt;/span&gt;b tmp&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;swap&lt;/span&gt; foo bar&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;list &lt;/span&gt;foo bar&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; produces &amp;#39;(2 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;tmp&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;                     (tmp-intro-let)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;baz&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;swap&lt;/span&gt; tmp baz&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;list &lt;/span&gt;tmp baz&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; still produces &amp;#39;(2 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In this case, the variable &lt;code&gt;tmp&lt;/code&gt; that the &lt;code&gt;swap&lt;/code&gt; macro introduces (&lt;a href=&#34;#org-coderef--0fd06c-4&#34;&gt;tmp-intro-macro&lt;/a&gt;) is not the same thing that the variable &lt;code&gt;tmp&lt;/code&gt; from the calling context (&lt;a href=&#34;#org-coderef--0fd06c-13&#34;&gt;tmp-intro-let&lt;/a&gt;) refers to. This separation of scopes happens automatically behind the scenes, so there&amp;rsquo;s now no chance of accidental variable capture.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to know more about hygiene, [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] is an excellent resource.&lt;/p&gt;
&lt;h2 id=&#34;racket-macros-phase-separation-and-scope-sets&#34;&gt;
  Racket macros: phase separation and scope sets
  &lt;a class=&#34;anchor&#34; href=&#34;#racket-macros-phase-separation-and-scope-sets&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Since Scheme macros (and Lisp macros more generally) allow running arbitrary Scheme code—including code from other modules—the dependency graph between modules can get so tangled that clean builds of a Scheme codebase are impossible. Racket solves this problem with its &lt;a href=&#34;https://docs.racket-lang.org/guide/phases.html&#34;&gt;phase separation&lt;/a&gt;, which puts clear delimiters between when functions and macros are available to different parts of the language. This detangles dependency graphs without sacrificing the expressive power of macros. I wrote a little bit about &lt;a href=&#34;https://lambdaland.org/posts/2023-05-19_racket_macros/#phases&#34;&gt;phase separation&lt;/a&gt;; you can read more on &lt;a href=&#34;https://docs.racket-lang.org/reference/syntax-model.html#%28tech._phase._level%29&#34;&gt;the Racket docs&lt;/a&gt; as well as Matthew Flatt&amp;rsquo;s paper [&lt;a href=&#34;#citeproc_bib_item_4&#34;&gt;4&lt;/a&gt;] on phase separation.&lt;/p&gt;
&lt;p&gt;Racket also has a robust system for reasoning about where a variable&amp;rsquo;s definition comes from called a &lt;em&gt;scope set&lt;/em&gt;. This is a notion makes reasoning about where variables are bound sensible. See a &lt;a href=&#34;https://www-old.cs.utah.edu/plt/scope-sets/&#34;&gt;blog post&lt;/a&gt; as well as [&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;3&lt;/a&gt;] by Matthew Flatt for more on scope sets.&lt;/p&gt;
&lt;p&gt;Phase separation and scope sets make Racket macros the safest to use: Racket macros compose sensibly and hide their implementation details so that it is easy to write macros that are easy to use as if they were built-in language constructs.&lt;/p&gt;
&lt;p&gt;Racket also goes beyond the &lt;code&gt;syntax-rules&lt;/code&gt; form that it inherited from Scheme; Racket&amp;rsquo;s &lt;code&gt;syntax-parse&lt;/code&gt; macro-building system makes generating good error messages easy.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a little bug in the &lt;code&gt;swap&lt;/code&gt; macro we used earlier, and that is the &lt;code&gt;set!&lt;/code&gt; form only takes an identifier (i.e. a variable) as its first argument. We don&amp;rsquo;t have any error checking inside the macro; if we were to call &lt;code&gt;swap&lt;/code&gt; with something that wasn&amp;rsquo;t an identifier, we&amp;rsquo;d get an error in terms of the &lt;code&gt;set!&lt;/code&gt; the macro expands to, not the macro call itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;swap&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; bar&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;list &lt;/span&gt;foo bar&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;swap&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; bar&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set!: not an identifier
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  at: &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  in: &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;set! &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; bar&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This isn&amp;rsquo;t good because there&amp;rsquo;s no &lt;code&gt;set!&lt;/code&gt; in our code at all! We could add some error handling in our macro to manually check that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are identifiers, but that&amp;rsquo;s a little tedious. Racket&amp;rsquo;s &lt;code&gt;syntax-parse&lt;/code&gt; helps us out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; syntax/parse/define&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;swap stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; a:id b:id&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;tmp a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;set!&lt;/span&gt; a b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;set!&lt;/span&gt; b tmp&lt;span style=&#34;color:#eceff4&#34;&gt;))]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;tmp &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;baz &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;swap tmp baz&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;list&lt;/span&gt; tmp baz&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; returns &amp;#39;(2 1) as expected&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;bar &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;swap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; bar&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;swap: expected identifier
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  at: &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  in: &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;swap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; foo &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; bar&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much better! Now our error is in terms that the macro user will recognize. There are lots of other things that &lt;code&gt;syntax-parse&lt;/code&gt; can do that make it easy to write correct macros that generate good error messages—a must for macros that become a part of a library.&lt;/p&gt;
&lt;h2 id=&#34;other-languages&#34;&gt;
  Other languages
  &lt;a class=&#34;anchor&#34; href=&#34;#other-languages&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Many modern languages use macros; I&amp;rsquo;ll only talk about a few more here. If something&amp;rsquo;s missing, that&amp;rsquo;s probably because I didn&amp;rsquo;t want to be exhaustive.&lt;/p&gt;
&lt;h3 id=&#34;julia&#34;&gt;
  Julia
  &lt;a class=&#34;anchor&#34; href=&#34;#julia&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Julia macros have a lot of nice things: they operate on ASTs and they&amp;rsquo;re hygienic, though the way hygiene is currently implemented is a little strange: all variables get &lt;code&gt;gensym&lt;/code&gt;&amp;rsquo;d automatically&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; whether or not they come from inside the macro or they originated from the calling code.&lt;/p&gt;
&lt;p&gt;Part of the problem is that all variables are represented as simple symbols, which [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] shows is insufficient to properly implement hygiene.&lt;/p&gt;
&lt;p&gt;Evidently there is some&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; ongoing&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; work&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; to improve the situation. This is a good example of research ideas percolating into industry languages I think.&lt;/p&gt;
&lt;h3 id=&#34;elixir&#34;&gt;
  Elixir
  &lt;a class=&#34;anchor&#34; href=&#34;#elixir&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Elixir has robust AST macros, and its standard library makes heavy use of macros; many &amp;ldquo;core&amp;rdquo; Elixir constructs like &lt;code&gt;def&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;raise&lt;/code&gt;, &lt;code&gt;|&amp;gt;&lt;/code&gt;, and others are actually macros that expand to smaller units of Elixir.&lt;/p&gt;
&lt;p&gt;Elixir actually gets hygiene right! Unlike Julia, variables in Elixir&amp;rsquo;s AST have metadata—including scope information—attached to them. This and other aspects of Elixir&amp;rsquo;s macro system open it up to lots of exciting possibilities. The &lt;a href=&#34;https://hexdocs.pm/nx/Nx.html&#34;&gt;Nx&lt;/a&gt; library brings support for numerical and GPU programming to Elixir, and it works essentially by implementing a custom Elixir compiler &lt;em&gt;in Elixir itself&lt;/em&gt;, and macros play a big role in this.&lt;/p&gt;
&lt;p&gt;I think Elixir macros are really neat—they&amp;rsquo;re the most powerful I&amp;rsquo;ve seen in a &amp;ldquo;big mainstream&amp;rdquo; language.&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;rust&#34;&gt;
  Rust
  &lt;a class=&#34;anchor&#34; href=&#34;#rust&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Rust supports two kinds of macros: macros-by-example, and procedural macros.&lt;/p&gt;
&lt;p&gt;Macros-by-example are a simple pattern-to-pattern transformation. Here&amp;rsquo;s an example from &lt;a href=&#34;https://doc.rust-lang.org/book/ch19-06-macros.html&#34;&gt;The Rust Book&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-1&#34;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-2&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-2&#34;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-3&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-3&#34;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-4&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-4&#34;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-5&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-5&#34;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-6&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-6&#34;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-7&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-7&#34;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-8&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-8&#34;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-9&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-9&#34;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-10&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-10&#34;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-11&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-11&#34;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--9243f2-12&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--9243f2-12&#34;&gt;12&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;#[macro_export]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;macro_rules&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt; vec &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;$(&lt;/span&gt; &lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;$x&lt;/span&gt;:&lt;span style=&#34;color:#8fbcbb&#34;&gt;expr&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;//              (pattern-repeat)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;mut&lt;/span&gt; temp_vec &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Vec&lt;/span&gt;::new&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;$(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                temp_vec&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;$x&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            temp_vec
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This macro takes a pattern like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vec!&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; bar baz&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and expands it to a pattern like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;mut&lt;/span&gt; temp_vec &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Vec&lt;/span&gt;::new&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp_vec&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp_vec&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bar&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp_vec&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;baz&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp_vec
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how the &lt;code&gt;*&lt;/code&gt; marks a part of the template that can be repeated. &lt;a href=&#34;#org-coderef--9243f2-3&#34;&gt;pattern-repeat&lt;/a&gt; This is akin to Racket or Scheme&amp;rsquo;s &lt;code&gt;...&lt;/code&gt; repetition form. Macros-by-example work on AST, but you can&amp;rsquo;t perform arbitrary computation on the AST. For that, you need procedural macros.&lt;/p&gt;
&lt;p&gt;Rust&amp;rsquo;s procedural macros (called &amp;ldquo;proc macros&amp;rdquo;) work on a token stream, and you can perform arbitrary computation, which puts them in a bit of a funny middle ground between C and Lisp. There is a &lt;a href=&#34;https://docs.rs/syn/2.0.39/syn/&#34;&gt;Rust crate&lt;/a&gt; that you can use to parse a Rust token stream into Rust AST, but you don&amp;rsquo;t get any nice source information from the AST nodes, which makes producing good error messages a challenge.&lt;/p&gt;
&lt;p&gt;I personally find Rust macros to be disappointing.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
  Conclusion
  &lt;a class=&#34;anchor&#34; href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a wide variety of macro systems. The best macro systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Operate on the AST&lt;/em&gt; rather than on a stream of tokens&lt;/li&gt;
&lt;li&gt;Avoid leaking implementation details through inadvertent variable capture by being &lt;em&gt;hygienic&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Produce good error messages that are in &lt;em&gt;terms of the caller&amp;rsquo;s context&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;(Bonus) have good &lt;em&gt;phase separation&lt;/em&gt; to enforce clear separation between complex macro systems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Different languages have different features in their macro systems; some languages make it easy to use macros sensibly, while for others macros are a formidable challenge to use properly—make sure you know what your language provides and the trade-offs involved.&lt;/p&gt;
&lt;h3 id=&#34;why-shouldn-t-you-use-macros&#34;&gt;
  Why shouldn&amp;rsquo;t you use macros?
  &lt;a class=&#34;anchor&#34; href=&#34;#why-shouldn-t-you-use-macros&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Turns out you can do a &lt;em&gt;lot&lt;/em&gt; with functions. Powerful function programming languages let you do so much with first-class functions. If you can get access to &lt;a href=&#34;https://lambdaland.org/posts/2022-11-17_continutations/&#34;&gt;first-class continuations&lt;/a&gt;, as you can in Racket and Scheme, then you can create powerful new programming constructs without having to resort to macros.&lt;/p&gt;
&lt;p&gt;I came across the &lt;a href=&#34;https://www.youtube.com/watch?v=mSgXWpvQEHE&amp;amp;t=579s&#34;&gt;JuliaCon 2019 keynote&lt;/a&gt; talk, where Steven Johnson explains how many of the things that you can do with macros can be solved just with Julia&amp;rsquo;s type dispatch.&lt;/p&gt;
&lt;p&gt;If you can do something with functions, you probably should: functions are first-class values in most languages these days, and you&amp;rsquo;ll enjoy increased composability, better error messages, and code that is easier to read and understand by your peers.&lt;/p&gt;
&lt;p&gt;Macros introduce little languages wherever you use them. For simple macros, you might not have &lt;em&gt;any&lt;/em&gt; constraints on what you may write under the scope of a macro. As an example, consider a macro that adds a &lt;code&gt;while&lt;/code&gt;-loop construct to a language by rewriting to another kind of looping mechanism: you shouldn&amp;rsquo;t have any restriction on what you can write inside the body of the &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;However, more complex macros can impose more restrictions on what can and cannot be written under their lexical extent. These restrictions may or may not be obvious. Examples: accidental variable capture limits what can be safely written, and grammatical errors (e.g. using an expression where an identifier was expected) can lead to inscrutable errors.&lt;/p&gt;
&lt;p&gt;Better macro systems mitigate these problems. It&amp;rsquo;s not enough to just have a macro system that uses ASTs; you need a macro system that makes it easy to write &lt;em&gt;correct&lt;/em&gt; macros with clear error messages so they truly feel like natural extensions of the language. Few languages do this right.&lt;/p&gt;
&lt;h3 id=&#34;why-should-you-use-macros&#34;&gt;
  Why should you use macros?
  &lt;a class=&#34;anchor&#34; href=&#34;#why-should-you-use-macros&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Macro systems have improved since the 1960s. While Lisp excluded many of the pitfalls of C macros &lt;em&gt;by construction&lt;/em&gt;, you still had to use kluges like &lt;code&gt;gensym&lt;/code&gt; to manually avoid variable capture. Scheme got rid of that with hygienic macros, and Racket improved matters further by improving macro hygiene through scope sets and introducing phase separation. It is so much easier to build robust macro-based abstractions.&lt;/p&gt;
&lt;p&gt;Macros are good—anyone can write macros and experiment with new syntactic constructs. This makes development and extension of the language no longer the sole domain of the language designer and maintainer—library authors can experiment with different approaches to various problems.&lt;/p&gt;
&lt;p&gt;We see this a lot with Elixir: Elixir&amp;rsquo;s core language is really rather small; most of the magic powering popular libraries like &lt;a href=&#34;https://hexdocs.pm/ecto/getting-started.html&#34;&gt;Ecto&lt;/a&gt; or &lt;a href=&#34;https://www.phoenixframework.org/&#34;&gt;Phoenix&lt;/a&gt; comes from a choice set of macro abstractions. These and other libraries are free to experiment with novel syntax without fear of cluttering and coupling the core language with bad abstractions that would then need to be maintained in perpetuity.&lt;/p&gt;
&lt;p&gt;Macros can be powerful when used correctly—something made much easier by modern macro systems.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;style&gt;.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[1]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Adams, M.D. 2015. &lt;a href=&#34;https://doi.org/10.1145/2676726.2677013&#34;&gt;Towards the Essence of Hygiene&lt;/a&gt;. &lt;i&gt;Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages&lt;/i&gt; (Mumbai India, Jan. 2015), 457–469.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[2]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Barzilay, E., Culpepper, R. and Flatt, M. Keeping it Clean with Syntax Parameters.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[3]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Flatt, M. 2016. &lt;a href=&#34;https://doi.org/10.1145/2837614.2837620&#34;&gt;Binding as sets of scopes&lt;/a&gt;. &lt;i&gt;Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2016, St. Petersburg, FL, USA, January 20 - 22, 2016&lt;/i&gt; (2016), 705–717.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_4&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[4]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Flatt, M. 2002. &lt;a href=&#34;https://doi.org/10.1145/581478.581486&#34;&gt;Composable and compilable macros: You want it when?&lt;/a&gt; &lt;i&gt;Proceedings of the seventh ACM SIGPLAN international conference on Functional programming&lt;/i&gt; (New York, NY, USA, Sep. 2002), 72–83.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_5&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[5]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Krishnamurthi, S. 2006. EDUCATIONAL PEARL: Automata via macros. &lt;i&gt;Journal of functional programming&lt;/i&gt;. 16, 03 (May 2006), 253. DOI:&lt;a href=&#34;https://doi.org/10.1017/S0956796805005733&#34;&gt;https://doi.org/10.1017/S0956796805005733&lt;/a&gt;.&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&amp;ldquo;Same except for variable names&amp;rdquo; is also called alpha-equivalence. This comes from the λ-calculus, which states that the particular choice of variable name should not matter. E.g. 
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://lambdaland.org/katex/katex.min.css&#34; /&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/katex.min.js&#34;&gt;&lt;/script&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;
  \(\lambda x.x\)
&lt;/span&gt;
 and &lt;span&gt;
  \(\lambda y.y\)
&lt;/span&gt;
 are the same function in the lambda calculus, just as &lt;span&gt;
  \(f(x) = x &amp;#43; 2\)
&lt;/span&gt;
 and &lt;span&gt;
  \(g(y) = y &amp;#43; 2\)
&lt;/span&gt;
 are the same function in algebra.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Breaking hygiene has some utility in some cases—for example, one might want to add a &lt;code&gt;break&lt;/code&gt; form inside the body of a loop. There are ways around hygiene, but these are not without some problems. For more details see [&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;2&lt;/a&gt;].&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Meaning, they all get replaced with some generated symbol that won&amp;rsquo;t clash with any possible variable or function name.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JuliaLang/julia/pull/6910&#34;&gt;https://github.com/JuliaLang/julia/pull/6910&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JuliaLang/julia/issues/37691&#34;&gt;https://github.com/JuliaLang/julia/issues/37691&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JuliaLang/JuliaSyntax.jl/pull/329&#34;&gt;https://github.com/JuliaLang/JuliaSyntax.jl/pull/329&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;
&lt;p&gt;Me thinking that Elixir is a big mainstream language should tell you something about the languages I spend my time with in my job as a PhD student.&amp;#160;&lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Why Don&#39;t More Languages Have a call/cc Operator?</title>
      <link>https://lambdaland.org/posts/2023-10-30_why_no_callcc/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-10-30_why_no_callcc/</guid>
      <description>&lt;p&gt;Something I&amp;rsquo;ve wondered about for a little while: why don&amp;rsquo;t more languages have a &lt;a href=&#34;https://en.wikipedia.org/wiki/Call-with-current-continuation&#34;&gt;&lt;code&gt;call/cc&lt;/code&gt;&lt;/a&gt; operator? Having &lt;a href=&#34;https://lambdaland.org/posts/2022-11-17_continutations/&#34;&gt;first-class continuations&lt;/a&gt; in your programming language gives your programmers a powerful construct. So why do only a handful of languages have it?&lt;/p&gt;
&lt;p&gt;The short answer is: it&amp;rsquo;s tricky to implement efficiently. One way to get &lt;code&gt;call/cc&lt;/code&gt; is to convert your code into continuation-passing style. Then, &lt;code&gt;call/cc&lt;/code&gt; simply takes the continuation in that representation and binds it to a variable. Most languages don&amp;rsquo;t seem to go through a continuation-passing style conversion pass though, so there&amp;rsquo;s no continuation to grab.&lt;/p&gt;
&lt;p&gt;I asked &lt;a href=&#34;https://users.cs.utah.edu/~mflatt/&#34;&gt;Matthew Flatt&lt;/a&gt; about this today, and his answer was that most languages use the C model of functions: when you call a function, you push the arguments to the function onto a stack along with the return address. Then, when you return, you pop those element back off the stack. To get &lt;code&gt;call/cc&lt;/code&gt;, you&amp;rsquo;ve have to copy the entire stack and pass that around.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deriving Recursion from First Principles</title>
      <link>https://lambdaland.org/posts/2023-10-03_recursion_from_first_principles/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-10-03_recursion_from_first_principles/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Or: Approaching the Y Combinator&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;These are some of my class notes. Learning to derive the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator&#34;&gt;Y Combinator&lt;/a&gt; from first principles is something I&amp;rsquo;ve always wanted to do. This isn&amp;rsquo;t &lt;em&gt;quite&lt;/em&gt; the Y Combinator, but it&amp;rsquo;s very close and it still gets you recursion without relying on recursive structures to begin with.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the beginning, we write a recursive function to compute the length of a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://docs.racket-lang.org/reference/let.html&#34;&gt;&lt;code&gt;let*&lt;/code&gt;&lt;/a&gt; syntax allows us to create local variable bindings that can reference themselves. But let&amp;rsquo;s suppose we don&amp;rsquo;t have &lt;code&gt;let*&lt;/code&gt;&amp;mdash;what do we do?&lt;/p&gt;
&lt;p&gt;We can make a function that we give to itself. That then returns the function we want, with the outer function in scope. So, the outer function &lt;code&gt;len&lt;/code&gt; in this example has &amp;ldquo;type&amp;rdquo;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;$self → Int → Int&lt;/code&gt;. That makes it clear that to get the &lt;code&gt;Int → Int&lt;/code&gt; function we want, we have to pass the function to itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;))))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it&amp;rsquo;d be nice if we could pull out that &lt;code&gt;(len len)&lt;/code&gt; in the body of the function. Let&amp;rsquo;s call that &lt;code&gt;len1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; l&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that what we &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; do is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; problem here!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because this is an &lt;em&gt;eager&lt;/em&gt; language, so that&amp;rsquo;d loop forever.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do that same trick for the outer &lt;code&gt;len len&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; l&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;               &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; type of len1 is Int → Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the &lt;code&gt;(len len)&lt;/code&gt; at the end of that is OK because we&amp;rsquo;re not doing another self application.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s change that inner &lt;code&gt;let&lt;/code&gt; to a &lt;code&gt;λ&lt;/code&gt; just for fun.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;l&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; l&lt;span style=&#34;color:#eceff4&#34;&gt;))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len1 &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len len&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rename &lt;code&gt;len&lt;/code&gt; → &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;len1&lt;/code&gt; → &lt;code&gt;rec&lt;/code&gt;, and just return the function without calling it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;self &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, we are ready… let&amp;rsquo;s go ahead an extract that part &lt;code&gt;(λ (lst) ...)&lt;/code&gt;: that&amp;rsquo;s the only part of this that knows anything about computing the length of lists. We&amp;rsquo;ll wrap the whole thing in a function called &lt;code&gt;mk_rec&lt;/code&gt; which takes a function of two arguments: the first argument we will pass &lt;code&gt;rec&lt;/code&gt; to, and the second is the actual argument to the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mk_rec fn_x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; takes two args: the recursive thingy and the argument&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;self &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fn_x rec x&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;))))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self self&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; len &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mk_rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; lst&lt;span style=&#34;color:#eceff4&#34;&gt;)))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                          &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; returns 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; fact &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mk_rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rec &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fact &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; returns 120&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that that isn&amp;rsquo;t actually the the Y combinator exactly. But hey we have recursion without using recursion!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Just for fun:&lt;/p&gt;
&lt;p&gt;Note that we &lt;strong&gt;could&lt;/strong&gt; have defined &lt;code&gt;let&lt;/code&gt; as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Source: FreeBSD &lt;code&gt;fortune&lt;/code&gt; files; this is probably my favorite quine ever.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Scare quotes intentional: you can&amp;rsquo;t have self-referential types in the simply-typed lambda calculus like you see here. The STLC is called &lt;em&gt;strongly normalizing&lt;/em&gt;, which means every well-typed term reduces to a value of that type. Thus, you can&amp;rsquo;t have something like the Y Combinator or Omega (&lt;code&gt;((λ (x) (x x)) (λ (y) (y y)))&lt;/code&gt;) because these could loop forever (diverge).&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My Commitment to Intellectual Integrity</title>
      <link>https://lambdaland.org/posts/2023-09-23_all_original/</link>
      <pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-09-23_all_original/</guid>
      <description>&lt;p&gt;I got a strange email the other day. Here it is, with parts redacted:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;My name is G&amp;mdash;, I am the main editor at &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;.&lt;/p&gt;
&lt;p&gt;While browsing your site, I noticed you have an amazing article from this page:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Link to an extremely old post of mine&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My team actually just published a comprehensive article on &amp;ldquo;&lt;em&gt;Semi-related title&lt;/em&gt;&amp;rdquo; which I think your visitors would truly
appreciate and add value to your awesome article.&lt;/p&gt;
&lt;p&gt;You can check it out here: &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;p&gt;If you were willing to add our link to that page, I would be more than happy to share it to more than a thousand of our social followers to help you
gain some visibility in exchange.&lt;/p&gt;
&lt;p&gt;Let me know what you think and thank you for your consideration!&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;G&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My mail program correctly marked it as spam, which I appreciate. (Besides the spammy feel of the text, the article of mine they reference is an &amp;ldquo;amazing&amp;rdquo; &amp;gt;300 word blurb about a one-day project I did in 2017. Sheesh…) I was a little shocked that someone would ask me to engage in the kind of social-metrics-engineering which I feel has contributed directly to many of the social problems plaguing us today.&lt;/p&gt;
&lt;p&gt;I decided to make a public promise that I would hold myself to. Here it is:&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;I am a scholar. As such, I have a sacred duty to uphold truth at all times and to share knowledge freely. I will never do anything that might compromise my ability to do such. If there is anything beautiful, truthful, or honorable, I will promote it. I will never accept bribery or engage in influence peddling; I find it intellectually and morally repugnant to use my station as an academic for personal gain.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll make mistakes—and I won&amp;rsquo;t stop talking about tools and services that I think genuinely serve my desires for greater knowledge, understanding, and freedom—but I will never do this in exchange for money, social clout, or whatever. If I attain any fame, it will not be because it was my end goal.&lt;/p&gt;
&lt;p&gt;So, G&amp;mdash;, here is what I think of your offer: &lt;em&gt;get lost—your proposal disgusts me&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Type Systems as Macros</title>
      <link>https://lambdaland.org/posts/2023-08-14_types_with_macros/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-08-14_types_with_macros/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a neat paper &lt;em&gt;Type Systems as Macros&lt;/em&gt; by Chang, Knauth, and Greenman [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] that describes how to implement a typed language using an untyped host language and macro expansion. The paper is neat, but I found the code hard to follow—the paper uses a compact notation that&amp;rsquo;s convenient for print, but not so much for reproducing on one&amp;rsquo;s own. This post is my attempt to implement and explain in more accessible terms what&amp;rsquo;s presented in the paper.&lt;/p&gt;
&lt;p&gt;The working source for the paper is available on &lt;a href=&#34;https://bitbucket.org/stchang/macrotypes/src/b2e4fc3033f6bd5cbbe738fa746f87dfe074e0ab/macrotypes/examples/popl2017/stlc-with-racket.rkt?at=popl2017-artifact#lines-60&#34;&gt;the first author&amp;rsquo;s BitBucket&lt;/a&gt;, but that code uses a lot of auxiliary helper files and it can still be pretty hard to follow.&lt;/p&gt;
&lt;p&gt;My implementation consists of a single file implemented in plain Racket. I try to keep as many of the function names the same, so hopefully it&amp;rsquo;s not too hard to follow if you&amp;rsquo;re coming from reading the paper. If you&amp;rsquo;re impatient to try running the code, the full example can be found at the bottom in &lt;a href=&#34;#full-solution&#34;&gt;§ Full solution&lt;/a&gt; or &lt;a href=&#34;https://git.sr.ht/~ashton314/understanding-turnstile&#34;&gt;on my SourceHut account&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;&lt;em&gt;If you haven&amp;rsquo;t read the paper, you can just skip this box: it&amp;rsquo;s meant to signpost to people who&amp;rsquo;ve read the paper what I&amp;rsquo;m going to be attempting to do different.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few specific things that tripped me up most were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;local-expand&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;In the paper, this function is only ever given one argument. The &lt;a href=&#34;https://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._local-expand%29%29&#34;&gt;real function in Racket&lt;/a&gt; takes 3 arguments. Moreover, this function can only be called &lt;em&gt;during&lt;/em&gt; macro-expansion, so you can&amp;rsquo;t play with it at the top level to understand it better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;General elision of &lt;code&gt;syntax-parse&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;The code makes &lt;em&gt;heavy&lt;/em&gt; use of &lt;a href=&#34;https://docs.racket-lang.org/syntax/Parsing_Syntax.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._syntax-parse%29%29&#34;&gt;&lt;code&gt;syntax-parse&lt;/code&gt;&lt;/a&gt;. However, the paper never shows it. It&amp;rsquo;s mentioned in a few footnotes, but for one who&amp;rsquo;s new to Racket&amp;rsquo;s macro-writing ecosystem, it&amp;rsquo;s hard to spot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding how to implement type environments:&lt;/p&gt;
&lt;p&gt;I got lost with the 
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://lambdaland.org/katex/katex.min.css&#34; /&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/katex.min.js&#34;&gt;&lt;/script&gt;
&lt;script defer src=&#34;https://lambdaland.org/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;
  \(\bar{\lambda}\)
&lt;/span&gt;
 and the different highlighting patterns in the &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making sure the right functions are available at the right phases:&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m still new to Racket&amp;rsquo;s macro system, and phase-separation can be tricky to grok.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;a-few-terms&#34;&gt;
  A few terms
  &lt;a class=&#34;anchor&#34; href=&#34;#a-few-terms&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;A few terms that will crop up in this post:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Source language&lt;/dt&gt;
&lt;dd&gt;Generally, this refers to the input to a compiler or interpreter—it&amp;rsquo;s the language of the &lt;em&gt;source&lt;/em&gt; code that we want to eventually be able to write. In our specific case, this will be the simply typed lambda calculus.&lt;/dd&gt;
&lt;dt&gt;Target language&lt;/dt&gt;
&lt;dd&gt;Generally, the output of a compiler. For example, the target language of a compiler might be x86 assembly or WASM. In our case, we want to transform the typed source language (the simply typed lambda calculus) into the untyped target language of &lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;Procedural macro&lt;/dt&gt;
&lt;dd&gt;Procedural macros are ones that let you use the entire power of the language to operate on the AST you are transforming: you can write conditionals, loops, and even call functions on the AST under expansion. Contrast with pattern macros, like &lt;a href=&#34;https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming&#34;&gt;Rust&amp;rsquo;s macros made with &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/a&gt;, which match a pattern of syntax and transform that into new syntax just by filling holes in a pattern. Pattern macros are immensely useful, but their power is a strict subset of procedural macros.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;essentials-of-building-a-typed-language-with-macros&#34;&gt;
  Essentials of building a typed language with macros
  &lt;a class=&#34;anchor&#34; href=&#34;#essentials-of-building-a-typed-language-with-macros&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick look at the language we &lt;em&gt;want&lt;/em&gt; to write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Identify function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; λx :: a → a; in Racket notation, (→ a a)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Function call&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; λx :: (b → b) → (b → b) takes an argument of type b → b (which is what λy is)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ b b&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;y : b&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; More complicated function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; λfx :: (a → b) → a → b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;f : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ a b&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our macros should expand, check, and rewrite this into something that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Identify function again&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Function call&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; More complicated function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the types have been erased. The trick is: we want to do this so that we catch any type errors. That way, if we mistakenly write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;f : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ a b&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x : c&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; x is the wrong type!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We should get a compile-time type error, and our macros will refuse to expand this into plain Racket.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; play_stlc.rkt:16:27: #%app: play_stlc.rkt: Function expected args with type (a), got type (c) instead&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How are we going to do this? Basically, we want to interpose on every function creation and function call to check that the types at these locations line up. We&amp;rsquo;ll be working with a very simple language, but this kind of work generalizes to the kinds of languages you&amp;rsquo;re used to working with.&lt;/p&gt;
&lt;p&gt;The overall architecture looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/stlc_to_racket.svg&#34;
    alt=&#34;Figure 1: Transforming STLC to Racket via macros&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Transforming STLC to Racket via macros&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The important thing to remember is this: expanding &lt;em&gt;erases types&lt;/em&gt; and &lt;em&gt;attaches type information&lt;/em&gt; to the resulting syntax while &lt;em&gt;checking that the types are consistent&lt;/em&gt; throughout expansion.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;Expanding syntax with type annotations does two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Resulting syntax has all the type annotations erased.&lt;/li&gt;
&lt;li&gt;Resulting syntax has its type stored as a &lt;em&gt;syntax property&lt;/em&gt;&amp;mdash;just some metadata on the AST node.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout this paper, we will use notation like &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;e&lt;/code&gt; to refer to syntax from the source language—type annotations and all—and &lt;code&gt;x-&lt;/code&gt; and &lt;code&gt;e-&lt;/code&gt; to refer to syntax that has had the types &lt;em&gt;erased&lt;/em&gt; from the source, and added as metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at how we would implement that middle block.&lt;/p&gt;
&lt;h2 id=&#34;interposing-on-every-function-definition-and-call-site&#34;&gt;
  Interposing on every function definition and call site
  &lt;a class=&#34;anchor&#34; href=&#34;#interposing-on-every-function-definition-and-call-site&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is to be able to inspect every function definition and call site. In other languages, this might only be possible by writing some kind of wrapping macro that walks down the AST of your entire module and replaces ordinary function calls into a call to a macro you control.&lt;/p&gt;
&lt;p&gt;However, we&amp;rsquo;re using Racket, and Racket is designed to make language construction easy! Racket&amp;rsquo;s reader will expand function calls like &lt;code&gt;(foo bar baz)&lt;/code&gt; into calls to a special function &lt;code&gt;#%app&lt;/code&gt;: &lt;code&gt;(#%app foo bar baz)&lt;/code&gt;. We can override what this symbol refers to when our code gets imported as a &lt;code&gt;#lang&lt;/code&gt; with &lt;code&gt;rename-out&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; syntax/parse/define&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%module-begin&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%top-interaction&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; needed for #lang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#424853&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;rename-out&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-app &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#424853&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-λ &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 1:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;The highlighted portion means to rename &lt;code&gt;checked-app&lt;/code&gt; to &lt;code&gt;#%app&lt;/code&gt; and &lt;code&gt;checked-λ&lt;/code&gt; to &lt;code&gt;λ&lt;/code&gt; in the requiring module&amp;rsquo;s scope. See the &lt;a href=&#34;https://docs.racket-lang.org/guide/hash-languages.html&#34;&gt;docs on #lang creation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;With that in place, we can write some macros &lt;code&gt;checked-app&lt;/code&gt; and &lt;code&gt;checked-λ&lt;/code&gt; which will then be used when we import &lt;code&gt;stlc.rkt&lt;/code&gt; as a &lt;code&gt;#lang&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-app stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; …&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-λ stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; …&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 2:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;s-exp&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stlc.rkt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; This λ referrs to checked-λ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 3:&lt;/span&gt;
  &lt;code&gt;play_stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;h2 id=&#34;implementing-the-checks&#34;&gt;
  Implementing the checks
  &lt;a class=&#34;anchor&#34; href=&#34;#implementing-the-checks&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve seen a few clever tricks that we can exploit in Racket to automatically interpose on every function definition and call. Now we begin the type checking.&lt;/p&gt;
&lt;h3 id=&#34;core-macros&#34;&gt;
  Core macros
  &lt;a class=&#34;anchor&#34; href=&#34;#core-macros&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s first take a look at the stars of the show: &lt;code&gt;checked-λ&lt;/code&gt; and &lt;code&gt;checked-app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember: these are macros that our source language will use under the names &lt;code&gt;λ&lt;/code&gt; and whenever there&amp;rsquo;s a normal function call. These macros need to expand to &lt;em&gt;untyped Racket&lt;/em&gt;, albeit with the type information added as a syntax property.&lt;/p&gt;
&lt;h4 id=&#34;first-macro-checked-λ&#34;&gt;
  First macro: &lt;code&gt;checked-λ&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#first-macro-checked-%ce%bb&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-48&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-48&#34;&gt;48&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-49&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-49&#34;&gt;49&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-50&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-50&#34;&gt;50&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-51&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-51&#34;&gt;51&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-52&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-52&#34;&gt;52&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-53&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-53&#34;&gt;53&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-54&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-54&#34;&gt;54&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-55&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-55&#34;&gt;55&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--af17f2-56&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--af17f2-56&#34;&gt;56&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-λ stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;~literal :&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;pat&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-xs -e τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp-erase&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:do&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;derived ~a :: ~a → ~a&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; -xs -e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;))]))&lt;/span&gt;                       &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lam-return&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 4:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;re defining a macro &lt;code&gt;checked-λ&lt;/code&gt;, which is invoked any time a &lt;code&gt;λ&lt;/code&gt; is used in the module requiring this one, thanks to the &lt;code&gt;rename-out&lt;/code&gt; bit.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re using the excellent &lt;a href=&#34;https://docs.racket-lang.org/syntax/Parsing_Syntax.html&#34;&gt;&lt;code&gt;syntax-parse&lt;/code&gt;&lt;/a&gt; macro, introduced in [&lt;a href=&#34;#citeproc_bib_item_2&#34;&gt;2&lt;/a&gt;] I believe. &lt;code&gt;syntax-parse&lt;/code&gt; gives us fancy keywords like &lt;code&gt;#:with&lt;/code&gt;, &lt;code&gt;#:when&lt;/code&gt;, and &lt;code&gt;#:fail-unless&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; which gives us a rich language to build macros with.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s step through this line-by-line.&lt;/p&gt;
&lt;p&gt;The line &lt;a href=&#34;#org-coderef--af17f2-50&#34;&gt;pat&lt;/a&gt; describes the pattern we&amp;rsquo;re matching in &lt;code&gt;stx&lt;/code&gt;: &lt;code&gt;_&lt;/code&gt; is a wildcard, and in our case will just match &lt;code&gt;checked-λ&lt;/code&gt;. Next we have a list with elements looking like &lt;code&gt;[var_name : type_name]&lt;/code&gt;. We bind all the variable names to &lt;code&gt;x&lt;/code&gt; and the corresponding types to &lt;code&gt;τ_in&lt;/code&gt;. Finally we bind some expression to the variable &lt;code&gt;e&lt;/code&gt;. Syntax like &lt;code&gt;(checked-λ ([x : a] [y : (→ a b)]) (y x))&lt;/code&gt; should match this.&lt;/p&gt;
&lt;p&gt;The next line &lt;a href=&#34;#org-coderef--af17f2-51&#34;&gt;comp-erase&lt;/a&gt; calls a helper function &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; (yes that&amp;rsquo;s a mouthful) to &lt;em&gt;compute&lt;/em&gt; the type of the body whilst &lt;em&gt;erasing&lt;/em&gt; the type annotations at the same time. Moreover, it should do this type computation in the &lt;em&gt;context&lt;/em&gt; of the variables &lt;code&gt;x ...&lt;/code&gt; and their types &lt;code&gt;τ_in ...&lt;/code&gt;. This just means that when computing the type of the body of &lt;code&gt;(λ ([x : Int]) {lambda body here...})&lt;/code&gt;, it should know that variable &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; returns three things:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;-xs&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;the variables &lt;code&gt;x ...&lt;/code&gt; but with the type annotations erased&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;the body &lt;code&gt;e&lt;/code&gt; but, again, with the type annotations erased from the source&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;τ_out&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;the derived return type of the function&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;We&amp;rsquo;ll dig into how this function works in &lt;a href=&#34;#support-functions-compute-and-erase-types&#34;&gt;Support functions: compute and erase types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;printf&lt;/code&gt; just shows us some pretty information about the work that the macro type checker is doing. It&amp;rsquo;s not necessary and you could delete lines 52–55 with no consequences.&lt;/p&gt;
&lt;p&gt;In the final line &lt;a href=&#34;#org-coderef--af17f2-56&#34;&gt;lam-return&lt;/a&gt; we return some new syntax &lt;code&gt;#&#39;(λ -xs -e)&lt;/code&gt;. Note that this bit of syntax has &lt;em&gt;no type annotations!&lt;/em&gt; We do add the type to this bit of syntax with &lt;code&gt;add-τ&lt;/code&gt;&amp;mdash;we will need this later. The type of a λ is an arrow type with arguments provided by the type annotations on the arguments, and the return type of the function supplied by the derived type of the expression from the &lt;a href=&#34;#org-coderef--af17f2-51&#34;&gt;comp-erase&lt;/a&gt; line.&lt;/p&gt;
&lt;p&gt;Remember: when our macros expand, they &lt;em&gt;check&lt;/em&gt; the types and &lt;em&gt;erase&lt;/em&gt; them. We don&amp;rsquo;t have any checks to do here in &lt;code&gt;checked-λ&lt;/code&gt;, but the type information we&amp;rsquo;ve added will come in handy when we check the arguments to this function in the next macro.&lt;/p&gt;
&lt;h4 id=&#34;second-macro-checked-app&#34;&gt;
  Second macro: &lt;code&gt;checked-app&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#second-macro-checked-app&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-58&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-58&#34;&gt;58&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-59&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-59&#34;&gt;59&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-60&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-60&#34;&gt;60&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-61&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-61&#34;&gt;61&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-62&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-62&#34;&gt;62&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-63&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-63&#34;&gt;63&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-64&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-64&#34;&gt;64&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-65&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-65&#34;&gt;65&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-66&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-66&#34;&gt;66&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-67&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-67&#34;&gt;67&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--2e3794-68&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--2e3794-68&#34;&gt;68&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-app stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; e_fn e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;app-pat&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-e_fn &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e_fn&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fn-type&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e_arg τ_arg&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx-map comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arg-types&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:fail-unless&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;typecheck&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;~a: Function expected args with type ~a, got type ~a instead&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-source&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt; -e_fn -e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]))&lt;/span&gt;                               &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;app-return&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 5:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;Like before, let&amp;rsquo;s go through this line-by-line.&lt;/p&gt;
&lt;p&gt;The line &lt;a href=&#34;#org-coderef--2e3794-60&#34;&gt;app-pat&lt;/a&gt; describes the pattern for function application: the first thing you see &lt;code&gt;e_fn&lt;/code&gt; is a function, and the rest &lt;code&gt;e_arg ...&lt;/code&gt; are arguments.&lt;/p&gt;
&lt;p&gt;Next, in &lt;a href=&#34;#org-coderef--2e3794-61&#34;&gt;fn-type&lt;/a&gt; we &lt;em&gt;expand&lt;/em&gt; the syntax of the function, which means the syntax we get back (&lt;code&gt;-e_fn&lt;/code&gt;) has &lt;em&gt;passed type checking&lt;/em&gt; and now has the type annotations &lt;em&gt;erased&lt;/em&gt;. The erased syntax does have its type stuck on it, &lt;a href=&#34;#org-coderef--af17f2-56&#34;&gt;lam-return&lt;/a&gt; which we retrieve in &lt;code&gt;comp+erase-τ&lt;/code&gt; with &lt;code&gt;get-τ&lt;/code&gt; and store in &lt;code&gt;τ_in ... τ_out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we compute the types of the arguments using the same function &lt;code&gt;comp+erase-τ&lt;/code&gt;; this time we use &lt;code&gt;stx-map&lt;/code&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to map over the syntax object &lt;code&gt;#&#39;(e_arg …)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once we have the type of the function &lt;code&gt;(→ τ_in ... τ_out)&lt;/code&gt; and the types of the arguments &lt;code&gt;(τ_arg ...)&lt;/code&gt; it becomes a simple matter to check that these types match. &lt;a href=&#34;#org-coderef--2e3794-63&#34;&gt;typecheck&lt;/a&gt; If they don&amp;rsquo;t, the &lt;code&gt;#:fail-unless&lt;/code&gt; keyword will break the macro expansion with a parse error and will display a nicely-formatted message, complete with source information from &lt;code&gt;syntax-source&lt;/code&gt; as well as expected and received types.&lt;/p&gt;
&lt;p&gt;Like with &lt;code&gt;checked-λ&lt;/code&gt;, we return the function application with all the type annotations erased in both the function and the arguments, but we tack on the function&amp;rsquo;s return type &lt;code&gt;τ_out&lt;/code&gt; to the syntax we build and return: &lt;code&gt;#&#39;(#%app -e_fn -e_arg ...)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;You might be wondering why we have to use &lt;code&gt;stx-map&lt;/code&gt;. A short answer is this: the &lt;code&gt;e_arg&lt;/code&gt; variable is a &lt;em&gt;template variable&lt;/em&gt;, which means we can&amp;rsquo;t pass it directly to &lt;code&gt;comp+erase-τ&lt;/code&gt;: we have to use it in a syntax pattern (which we get from &lt;code&gt;#&#39;&lt;/code&gt;) but then we have some syntax, not a list.&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; use &lt;a href=&#34;https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28quote._~23~25kernel%29._syntax-~3elist%29%29&#34;&gt;&lt;code&gt;syntax-&amp;gt;list&lt;/code&gt;&lt;/a&gt; here to map over the list, as this only converts the top-most layer of syntax into a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e_arg τ_arg&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;map&lt;/span&gt; comp+erase-τ &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it&amp;rsquo;s not too much trouble to bring &lt;code&gt;stx-map&lt;/code&gt; into scope with &lt;code&gt;(require syntax/stx)&lt;/code&gt;, so I just went with that.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;support-functions-compute-and-erase-types&#34;&gt;
  Support functions: compute and erase types
  &lt;a class=&#34;anchor&#34; href=&#34;#support-functions-compute-and-erase-types&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve covered the major macros, but now we need to inspect the helper functions &lt;code&gt;comp+erase-τ&lt;/code&gt; and &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;computing-and-erasing-types-comp-plus-erase-τ&#34;&gt;
  Computing and erasing types: &lt;code&gt;comp+erase-τ&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#computing-and-erasing-types-comp-plus-erase-%cf%84&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The first support function that we need is &lt;code&gt;comp+erase-τ&lt;/code&gt;, which we call from the &lt;a href=&#34;#second-macro-checked-app&#34;&gt;&lt;code&gt;checked-app&lt;/code&gt;&lt;/a&gt; macro on lines &lt;a href=&#34;#org-coderef--2e3794-61&#34;&gt;fn-type&lt;/a&gt; and &lt;a href=&#34;#org-coderef--2e3794-62&#34;&gt;arg-types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that we do &lt;strong&gt;not&lt;/strong&gt; &lt;em&gt;expand&lt;/em&gt; to a call to &lt;code&gt;comp+erase-τ&lt;/code&gt; with the &lt;code&gt;checked-app&lt;/code&gt; macro—we &lt;em&gt;call&lt;/em&gt; this function _as part of expansion_​—i.e. this function gets called at compile-time.&lt;/p&gt;
&lt;p&gt;Normally we define functions with &lt;code&gt;define&lt;/code&gt;. But, because we need this function to be available for macros to call, we use &lt;code&gt;define-for-syntax&lt;/code&gt;. This makes the function available at compile time. More about this in &lt;a href=&#34;#putting-the-phases-together&#34;&gt;§ Putting the phases together&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx e&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;τ &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ -e&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;-e &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This function is pretty simple: we take in some syntax &lt;code&gt;e&lt;/code&gt;, expand the macros in &lt;code&gt;e&lt;/code&gt; to get &lt;code&gt;-e&lt;/code&gt;, which is just the same as &lt;code&gt;e&lt;/code&gt;, but with all the type annotations erased and some type information added as a syntax property. Then we use a helper function &lt;code&gt;get-τ&lt;/code&gt; (defined in &lt;a href=&#34;#convenience-functions-working-with-type-information&#34;&gt;§ Convenience functions&lt;/a&gt;) to pull the type off of &lt;code&gt;-e&lt;/code&gt;. Finally we return &lt;code&gt;-e&lt;/code&gt; and its associated type &lt;code&gt;τ&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;again-but-with-context-comp-plus-erase-τ-ctx&#34;&gt;
  Again, but with context: &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#again-but-with-context-comp-plus-erase-%cf%84-ctx&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Now we need to do the same thing, but this time, we&amp;rsquo;ll be adding a &lt;em&gt;context&lt;/em&gt; to the expansion.&lt;/p&gt;
&lt;p&gt;What is a context? Consider the following function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : Int&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;y : Bool&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;… body using variables x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; y …&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside the body of the function, we need to somehow remember that the variable &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; has type &lt;code&gt;Bool&lt;/code&gt;. That way, if we run into something like &lt;code&gt;(+ x y)&lt;/code&gt; we can know that &lt;code&gt;y&lt;/code&gt; isn&amp;rsquo;t the right type for that operation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; does the same thing and &lt;code&gt;comp+erase-τ&lt;/code&gt;, but we add a context, which is just a list of variable ↦ type mappings. Like &lt;code&gt;comp+erase-τ&lt;/code&gt;, we define &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; with &lt;code&gt;define-for-syntax&lt;/code&gt; so it&amp;rsquo;s available for &lt;code&gt;checked-λ&lt;/code&gt; to use at compile time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-1&#34;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-2&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-2&#34;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-3&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-3&#34;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-4&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-4&#34;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-5&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-5&#34;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-6&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-6&#34;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-7&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-7&#34;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-8&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-8&#34;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-9&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-9&#34;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-10&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-10&#34;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34; id=&#34;org-coderef--4433b8-11&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#org-coderef--4433b8-11&#34;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx e ctx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse ctx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[([&lt;/span&gt;x τ&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                                          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ctx-destruct&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                                       &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;temps&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;generate-temporaries&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; xs- e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;erased-version&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rename-transformer&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#81a1c1&#34;&gt;#,&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; τ_out &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                                                            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;body-type&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;xs- e- τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We use &lt;code&gt;syntax-parse&lt;/code&gt; here just to destruct the list of variable ↦ type pairs &lt;code&gt;[x τ]&lt;/code&gt; from &lt;code&gt;ctx&lt;/code&gt;. &lt;a href=&#34;#org-coderef--4433b8-3&#34;&gt;ctx-destruct&lt;/a&gt; Then, for each of the variables &lt;code&gt;x ...&lt;/code&gt;, we create a brand new variables &lt;code&gt;y ...&lt;/code&gt; with &lt;a href=&#34;https://docs.racket-lang.org/reference/stxops.html#%28def._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._generate-temporaries%29%29&#34;&gt;&lt;code&gt;generate-temporaries&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;#org-coderef--4433b8-4&#34;&gt;temps&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;I&amp;rsquo;ll talk about variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;τ&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; in this next section. Remember that these are all &lt;em&gt;template variables&lt;/em&gt; in a repetition &lt;code&gt;...&lt;/code&gt;. This means that &lt;code&gt;x&lt;/code&gt; has to show up in some expression that has one &lt;code&gt;...&lt;/code&gt; after it, and it will repeat that template fragment for every item that &lt;code&gt;x&lt;/code&gt; matched against. See &lt;a href=&#34;https://docs.racket-lang.org/guide/pattern-macros.html#%28part._.Matching_.Sequences%29&#34;&gt;the guide on matching sequences&lt;/a&gt; if you need a primer or a refresher.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now comes the tricky bit: we&amp;rsquo;d like to expand &lt;code&gt;e&lt;/code&gt;, but remembering that a given variable &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;τ&lt;/code&gt;. To accomplish this, we do something a little sneaky: we create a lexically-scoped macro with &lt;a href=&#34;https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let-syntax%29%29&#34;&gt;&lt;code&gt;let-syntax&lt;/code&gt;&lt;/a&gt; that has the name &lt;code&gt;x&lt;/code&gt;. We bind this to a macro that expands to the brand new variable &lt;code&gt;y&lt;/code&gt; that has the type information for &lt;code&gt;x&lt;/code&gt; attached to it.&lt;/p&gt;
&lt;p&gt;This is what the &lt;code&gt;let-syntax&lt;/code&gt; and &lt;a href=&#34;https://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._make-rename-transformer%29%29&#34;&gt;&lt;code&gt;make-rename-transformer&lt;/code&gt;&lt;/a&gt; bit does: it makes a macro that can expand in places &lt;em&gt;other&lt;/em&gt; than application positions, (i.e. identifier position) along with a host of other convenience functions.&lt;/p&gt;
&lt;p&gt;So, starting with a lambda like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;a : Int&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;b : Bool&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; b &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; creates some new syntax that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y_tmp1 y_tmp2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;a &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y_tmp1 &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;Int&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;b &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y_tmp2 &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;Bool&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; b &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which gets expanded into:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y_tmp1 y_tmp2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#424853&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;and&lt;/span&gt; y_tmp2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; y_tmp1&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But the symbols &lt;code&gt;y_tmp2&lt;/code&gt; and &lt;code&gt;y_tmp1&lt;/code&gt; on the second line have extra type information attached to them to help with the remainder of the type checking: &lt;code&gt;add-τ&lt;/code&gt; simply returns the syntax you gave it in the first place, but with the second thing attached as type metadata.&lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;ve expanded the body &lt;code&gt;e&lt;/code&gt; of the original &lt;code&gt;λ&lt;/code&gt; that we got but with the variables and the type information added as context. Now we simply pull off the type data for the body—i.e. the function return type—with &lt;code&gt;(get-τ e-)&lt;/code&gt; and return the erased variables, body, and function return type.&lt;/p&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;(Ab)using &lt;code&gt;λ&lt;/code&gt; forms this way is a convenient hack for us to get the correct behavior: we don&amp;rsquo;t have to worry about any of the scoping rules of the language because Racket&amp;rsquo;s macro expander will just Do the Right Thing™—we get the proper semantics for free.&lt;/p&gt;
&lt;p&gt;In languages where you &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; use macros outside of function-call position, you&amp;rsquo;ll have to come up with another way to realize type environments. One way you might do this is to start passing around a structure mapping symbols to types. You&amp;rsquo;ll have to be careful as you walk down your AST that you respect scoping rules.&lt;/p&gt;
&lt;p&gt;If you figure something clever out, please let me know what you did—I&amp;rsquo;d be curious to see how other languages solve this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Normally we wouldn&amp;rsquo;t have to worry about details like this, but because of how we&amp;rsquo;re using &lt;code&gt;local-expand&lt;/code&gt; via &lt;code&gt;expand-stx&lt;/code&gt; and the &lt;code&gt;let-syntax&lt;/code&gt; clause inside the macro, the body of the λ gets wrapped in two layers of &lt;code&gt;let-values&lt;/code&gt;, so we end up having to destructure all of that. The &lt;em&gt;real&lt;/em&gt; implementation of &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt; ends up looking a little messier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx e ctx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse ctx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[([&lt;/span&gt;x τ&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;generate-temporaries&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Not sure why I need to unwrap the let-values… must be something with how&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Racket automatically wraps the body of λ&amp;#39;s.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; This is consistent with the paper&amp;#39;s implementation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%plain-lambda&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; xs- &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; e-&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#,&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; τ_out &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;xs- e- τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;~literal&lt;/code&gt; just tells the pattern matching that we&amp;rsquo;re looking for the identifier &lt;code&gt;let-values&lt;/code&gt; in the syntax, and we&amp;rsquo;re not trying to have some variable named &lt;code&gt;let-values&lt;/code&gt; that we&amp;rsquo;d like to bind to whatever is there.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;convenience-functions-working-with-type-information&#34;&gt;
  Convenience functions: working with type information
  &lt;a class=&#34;anchor&#34; href=&#34;#convenience-functions-working-with-type-information&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We are going to go from explicitly typed code to untyped code, but with type annotations on the syntax objects (AST nodes). It happens to be a convenient place to put the derived type of the data, but there&amp;rsquo;s nothing intrinsically important about this, as long as you can tie a particular syntax object back to its derived type somehow.&lt;/p&gt;
&lt;p&gt;We define two functions: &lt;code&gt;add-τ&lt;/code&gt; and &lt;code&gt;get-τ&lt;/code&gt; to put and fetch data into the &lt;code&gt;&#39;type&lt;/code&gt; field of a &lt;code&gt;syntax&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Convenience functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ e t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 6:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;We also define type equality here. For this demo, type quality is syntactic equality in the type. E.g. &lt;code&gt;a ≡ a&lt;/code&gt; and &lt;code&gt;a → b ≡ a → b&lt;/code&gt;, but &lt;code&gt;a ≢ b&lt;/code&gt; and &lt;code&gt;a → a ≢ b → b&lt;/code&gt;. This is a choice we&amp;rsquo;re making to keep things simple. It&amp;rsquo;s possible (and the authors in [&lt;a href=&#34;#citeproc_bib_item_1&#34;&gt;1&lt;/a&gt;] do this) to define alternate type comparison operations to support existential types as well as subtyping.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Dumb equality check: just check for syntactic equality&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= t1s t2s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t1s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t2s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;equal?&lt;/span&gt; t1 t2&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 7:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;We will want one small piece of convenience code in the next part:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax-rule&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;local-expand&lt;/span&gt; stx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;expression&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 8:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;local-expand&lt;/code&gt; is a function that takes some syntax and expands all the macros in it. It&amp;rsquo;s a &lt;em&gt;little&lt;/em&gt; more complicated than that: &lt;code&gt;local-expand&lt;/code&gt; expands the syntax in the lexical context of the currently expanding expression. What that means is that you can only call &lt;code&gt;local-expand&lt;/code&gt; during macro expansion. This makes it hard to play with at the top-level REPL as a Lisp/Scheme is wont to do. If you are wanting to play around in the REPL, &lt;code&gt;expand&lt;/code&gt; and &lt;code&gt;expand-once&lt;/code&gt; are your friends. Inside our use case, expanding in the lexical context of the currently expanding macro makes this macro expansion safer.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expand-stx&lt;/code&gt; simply makes it so we don&amp;rsquo;t have to include so many arguments to &lt;code&gt;local-expand&lt;/code&gt;, as they&amp;rsquo;d be the same every time we call it. See the &lt;a href=&#34;https://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._local-expand%29%29&#34;&gt;documentation for &lt;code&gt;local-expand&lt;/code&gt;&lt;/a&gt; for more details on what these arguments do.&lt;/p&gt;
&lt;h2 id=&#34;putting-the-phases-together&#34;&gt;
  Putting the phases together
  &lt;a class=&#34;anchor&#34; href=&#34;#putting-the-phases-together&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve covered all the essential bits, but we haven&amp;rsquo;t talked about what functions need to be available when: this isn&amp;rsquo;t such a big deal in Lisp or Scheme when you can call pretty much any function from any macro, but Racket takes great pains to ensure that there is a clear dependency graph between macro expansion time and runtime. See Flatt&amp;rsquo;s &lt;span class=&#34;underline&#34;&gt;Composable and Compilable Macros: You want it &lt;em&gt;when?&lt;/em&gt;&lt;/span&gt; paper [&lt;a href=&#34;#citeproc_bib_item_3&#34;&gt;3&lt;/a&gt;] for all the details you could ever want on this. That paper does a good job of motivating why you need clear phase separation.&lt;/p&gt;
&lt;p&gt;That said, let&amp;rsquo;s talk about the dependency graph of the functions and macros in our code.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/macro_types_dep_graph.svg&#34;
    alt=&#34;Figure 2: Dependency graph: functions are blue, macros are green.&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 2: &lt;/span&gt;Dependency graph: functions are blue, macros are green.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Normally, functions are defined at phase level 0, which is the &amp;ldquo;runtime&amp;rdquo; phase of the module. Macros are defined at phase level 1, which is the &amp;ldquo;compile time&amp;rdquo; or &amp;ldquo;expand time&amp;rdquo; phase. You can only refer to things defined at the same or higher phase level. So, normally, macros can&amp;rsquo;t call functions in the same module.&lt;/p&gt;
&lt;p&gt;Our two main macros, &lt;code&gt;checked-λ&lt;/code&gt; and &lt;code&gt;checked-app&lt;/code&gt;, both depend on the functions &lt;code&gt;comp+erase-τ&lt;/code&gt; and &lt;code&gt;comp+erase-τ/ctx&lt;/code&gt;, along with a few other auxiliary functions. These functions in turn depend on the &lt;code&gt;expand-stx&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;The purple box is at phase level 1, since &lt;code&gt;checked-λ&lt;/code&gt; and &lt;code&gt;checked-app&lt;/code&gt; are both macros. Normally, the functions in the orange box would be at phase level 0, and would be unavailable for our macros. However, we can &lt;em&gt;raise&lt;/em&gt; the phase level by using &lt;code&gt;define-for-syntax&lt;/code&gt; instead of &lt;code&gt;define&lt;/code&gt;, or wrap the things we need at a higher phase level in &lt;code&gt;begin-for-syntax&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All the functions now at phase level 1 use the &lt;code&gt;expand-stx&lt;/code&gt; macro, so &lt;em&gt;it&lt;/em&gt; has to be defined at phase level 2—we can simply put the &lt;code&gt;define-syntax&lt;/code&gt;&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; inside of &lt;code&gt;define-for-syntax&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! The full solution below puts all the functions together at the right phases.&lt;/p&gt;
&lt;h2 id=&#34;full-solution&#34;&gt;
  Full solution
  &lt;a class=&#34;anchor&#34; href=&#34;#full-solution&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The code can also be cloned from &lt;a href=&#34;https://git.sr.ht/~ashton314/understanding-turnstile&#34;&gt;my Git repository on SourceHut&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;68
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; The Simply Typed Lambda Calculus&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; syntax/parse/define&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; make this a sensible #lang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%module-begin&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%top-interaction&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;rename-out&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-app &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;checked-λ &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;begin-for-syntax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; syntax/stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; needed for stx-map&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Shorthand to expand macros in syntax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Yes, this is a macro for use inside other macros (or functions at phase level 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax-rule&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;local-expand&lt;/span&gt; stx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;expression&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Convenience functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ e t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-property&lt;/span&gt; e &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Dumb equality check: just check for syntactic equality&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= t1s t2s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t1s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; t2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; t2s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;equal?&lt;/span&gt; t1 t2&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx e&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;τ &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ -e&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;-e &lt;span style=&#34;color:#81a1c1&#34;&gt;,&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-for-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx e ctx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse ctx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[([&lt;/span&gt;x τ&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;generate-temporaries&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Not sure why I need to unwrap the let-values… must be something with how&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Racket automatically wraps the body of λ&amp;#39;s.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; This is consistent with the paper&amp;#39;s implementation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%plain-lambda&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; xs- &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;~literal &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-values&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; e-&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;expand-stx &lt;span style=&#34;color:#81a1c1&#34;&gt;#`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;make-rename-transformer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#,&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; τ_out &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;get-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e-&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;xs- e- τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-λ stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;~datum :&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-xs -e τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ/ctx &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x τ_in&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:do&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;derived ~a :: ~a → ~a&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; -xs -e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;))]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;checked-app stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; e_fn e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;-e_fn &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt; τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;e_fn&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;-e_arg τ_arg&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx-map comp+erase-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:fail-unless&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ= &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;~a: Function expected args with type ~a, got type ~a instead&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-source&lt;/span&gt; stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_in &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;τ_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-τ &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#%app&lt;/span&gt; -e_fn -e_arg &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;τ_out&lt;span style=&#34;color:#eceff4&#34;&gt;)]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 9:&lt;/span&gt;
  &lt;code&gt;stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;s-exp&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stlc.rkt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Smallest example: function a → a (in Racket notation, (→ a a))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; a bigger example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;x : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ b b&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;y : b&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; ;; Functions!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;f : &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;→ a b&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x : a&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; an example of an ill-typed expression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; ((λ ([x : (→ b b)]) x) (λ ([f : (→ b c)] [y : b]) (f y)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;src-block-caption&#34;&gt;
  &lt;span class=&#34;src-block-number&#34;&gt;Code Snippet 10:&lt;/span&gt;
  &lt;code&gt;play_stlc.rkt&lt;/code&gt;
&lt;/div&gt;
&lt;h2 id=&#34;acknowledgments&#34;&gt;
  Acknowledgments
  &lt;a class=&#34;anchor&#34; href=&#34;#acknowledgments&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks to Ben Greenman for reading and providing suggestions and improvements on this post.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;style&gt;.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}&lt;/style&gt;&lt;div class=&#34;csl-bib-body&#34;&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_1&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[1]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Chang, S., Knauth, A. and Greenman, B. 2017. &lt;a href=&#34;https://doi.org/10.1145/3009837.3009886&#34;&gt;Type systems as macros&lt;/a&gt;. &lt;i&gt;Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages - POPL 2017&lt;/i&gt; (Paris, France, 2017), 694–705.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_2&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[2]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Culpepper, R. 2012. Fortifying macros. &lt;i&gt;Journal of functional programming&lt;/i&gt;. 22, 4-5 (Sep. 2012), 439–476. DOI:&lt;a href=&#34;https://doi.org/10.1017/S0956796812000275&#34;&gt;https://doi.org/10.1017/S0956796812000275&lt;/a&gt;.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;csl-entry&#34;&gt;&lt;a id=&#34;citeproc_bib_item_3&#34;&gt;&lt;/a&gt;
    &lt;div class=&#34;csl-left-margin&#34;&gt;[3]&lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Flatt, M. 2002. &lt;a href=&#34;https://doi.org/10.1145/581478.581486&#34;&gt;Composable and compilable macros: You want it when?&lt;/a&gt; &lt;i&gt;Proceedings of the seventh ACM SIGPLAN international conference on Functional programming&lt;/i&gt; (New York, NY, USA, Sep. 2002), 72–83.&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The full list of pattern directives can be found &lt;a href=&#34;https://docs.racket-lang.org/syntax/stxparse-specifying.html#%28tech._pattern._directive%29&#34;&gt;here&lt;/a&gt; in the documentation.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;You should be using &lt;code&gt;syntax-parse&lt;/code&gt; to write anything more complex than a basic &amp;ldquo;macro-by-example&amp;rdquo;. I have an &lt;a href=&#34;https://lambdaland.org/posts/2023-05-19_racket_macros/&#34;&gt;out-of-date blog post&lt;/a&gt; comparing a few ways to write macros in Racket. In the words of Ben Greenman, &amp;ldquo;syntax-case is old baggage!&amp;rdquo;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Required with &lt;code&gt;(require syntax/stx)&lt;/code&gt;.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;It&amp;rsquo;s a &lt;em&gt;little&lt;/em&gt; more complicated than that: what I said is actually what &lt;code&gt;~datum&lt;/code&gt; does. &lt;code&gt;~literal&lt;/code&gt; considers bindings: it&amp;rsquo;s looking for something that&amp;rsquo;s bound to whatever &lt;code&gt;~let-syntax&lt;/code&gt; is bound to. In the simplest case, it just matches &lt;code&gt;let-syntax&lt;/code&gt; because it&amp;rsquo;s binding hasn&amp;rsquo;t changed. See the &lt;a href=&#34;https://docs.racket-lang.org/syntax/stxparse-patterns.html#%28form._%28%28lib._syntax%2Fparse..rkt%29._~7eliteral%29%29&#34;&gt;docs for &lt;code&gt;~literal&lt;/code&gt;&lt;/a&gt; for more information.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;This macro is simple enough that we&amp;rsquo;ll just use &lt;code&gt;define-syntax-rule&lt;/code&gt;.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reflections one year into a PhD program</title>
      <link>https://lambdaland.org/posts/2023-08-05_one_year_into_phd/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-08-05_one_year_into_phd/</guid>
      <description>&lt;p&gt;I started my PhD program about a year ago. In my first year I have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Taken 4 &amp;ldquo;normal&amp;rdquo; 3-credit-hour classes&lt;/li&gt;
&lt;li&gt;Participated in 3 seminars&lt;/li&gt;
&lt;li&gt;Switched advisors&lt;/li&gt;
&lt;li&gt;Attended 2 conferences (PLDI @ FCRC, JuliaCon)&lt;/li&gt;
&lt;li&gt;Presented my work at JuliaCon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s been a lot of work, and there&amp;rsquo;s been a lot of stress. I&amp;rsquo;m in a much better place now than when I started, and over all I&amp;rsquo;m happy where I&amp;rsquo;m at and where I&amp;rsquo;m headed.&lt;/p&gt;
&lt;h2 id=&#34;changing-advisors&#34;&gt;
  Changing advisors
  &lt;a class=&#34;anchor&#34; href=&#34;#changing-advisors&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Some of the stress has come from finances: it&amp;rsquo;s hard to support a family on a PhD stipend with rising costs of living.&lt;/p&gt;
&lt;p&gt;The most stress I felt was in my first semester. I got hired on as an RA&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with a nice researcher and we hit it off well. But I discovered half way through the semester that I was not enjoying the work. This wasn&amp;rsquo;t anyone&amp;rsquo;s fault—I had to do a little bit of the work to find out that I wasn&amp;rsquo;t that interested in what I was doing.&lt;/p&gt;
&lt;p&gt;At first I thought that I might be able to power through. I didn&amp;rsquo;t want to be the kind of student that hops from advisor to advisor or from project to project just as the going gets tough, boring, or unpleasant. But I talked with &lt;a href=&#34;https://kimball.germane.net/&#34;&gt;my advisor from undergrad&lt;/a&gt;, and he explained that a PhD sets the tone of your research basically until you get tenure. That&amp;rsquo;s a long time—and I didn&amp;rsquo;t want to work in that area for a decade or better. I realized that I either had to change what I was working on, or I needed to quit and go back to industry.&lt;/p&gt;
&lt;p&gt;I started looking around at what my options were. My school assigns every grad student a &amp;ldquo;faculty mentor&amp;rdquo;—a faculty member who is not your advisor that&amp;rsquo;s &amp;ldquo;assigned&amp;rdquo; to you. In my experience, most professors are more than happy to talk to you if you need help—this one just happened to be assigned to me. At some point I discovered that &lt;a href=&#34;https://cs.brown.edu/people/bgreenma/&#34;&gt;Ben Greenman&lt;/a&gt; was coming to the U as a professor. I called him, we talked, and we figured out that our interests were much more closely aligned. Problem was, Ben wasn&amp;rsquo;t starting at the U until the fall. I found a fellowship for one semester, and was able to do work with Ben and another professor through the summer.&lt;/p&gt;
&lt;p&gt;Finding an advisor whose interests aligned with mine was a &lt;em&gt;huge&lt;/em&gt; improvement for my work and my mental health. If you are looking into going to grad school, I would make that your top priority. And it wasn&amp;rsquo;t that my first advisor was &lt;em&gt;bad&lt;/em&gt; in any way—we&amp;rsquo;re still friends, we chat when we run into each other in the hall, and I learned a lot from him—it&amp;rsquo;s just that our interests were less aligned than I originally thought, and it took a little time to discover that. Better sooner rather than later, though.&lt;/p&gt;
&lt;h2 id=&#34;reading-papers&#34;&gt;
  Reading papers
  &lt;a class=&#34;anchor&#34; href=&#34;#reading-papers&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;One thing I noticed this week that made me really happy: reading research papers is a lot easier for me now. When I started getting interested in research back in my undergrad, I found reading papers to be &lt;em&gt;so&lt;/em&gt; arduous. It took me a week or more to get through a single paper, and I never got a lot out of them. I felt like it was difficult for me to even understand the questions that the paper was trying to answer.&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m more familiar with the context and the jargon, and I can grasp the questions the paper is trying to answer better. The format of research papers is familiar to me now, and that familiarity reduces the amount of friction I encounter when reading. It took time and exposure, and I don&amp;rsquo;t think there&amp;rsquo;s a substitute for that. Reading papers and discussing them with my advisors was a big help too.&lt;/p&gt;
&lt;p&gt;The paper &lt;a href=&#34;https://web.stanford.edu/class/ee384m/Handouts/HowtoReadPaper.pdf&#34;&gt;How to Read a Paper&lt;/a&gt; is probably the single most valuable bit of help an aspiring researcher can get. You should read it. (It&amp;rsquo;s short: 2 pages)&lt;/p&gt;
&lt;h2 id=&#34;classes&#34;&gt;
  Classes
  &lt;a class=&#34;anchor&#34; href=&#34;#classes&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Grad classes have a different tone than undergrad classes. As one of my professors put it, you will get an A or a B unless you persuade the professor that you should get a lower grade. This is nice because I have to keep a particular GPA to qualify for tuition benefit.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; That means I can do the minimum to learn the material and spend the majority of my time and energy on research.&lt;/p&gt;
&lt;p&gt;After switching research projects, I noticed a switch in my priorities: my first semester, I would do my class work and then do research if I had time left over. My second semester, I did research first and class work happened when I had nothing else to do. I like the second balance better.&lt;/p&gt;
&lt;h2 id=&#34;conferences-and-speaking&#34;&gt;
  Conferences and speaking
  &lt;a class=&#34;anchor&#34; href=&#34;#conferences-and-speaking&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I got to present my work at JuliaCon 2023. I&amp;rsquo;ll put up a link to the video when it comes out, but if you poke around &lt;a href=&#34;https://juliacon.org/2023/&#34;&gt;the recordings&lt;/a&gt; you should be able to find the talk in the middle of a long recording.&lt;/p&gt;
&lt;p&gt;It was fun to prepare and present our work at a conference. It was also a &lt;em&gt;ton&lt;/em&gt; of effort. I have never put that much time and energy into preparing a talk as I did for that conference. And it turned out pretty well, if I do say so myself. Hopefully subsequent talks will be less stressful, less effort, &lt;em&gt;and&lt;/em&gt; even higher-quality!&lt;/p&gt;
&lt;p&gt;JuliaCon was hosted in Boston; before that I went to PLDI in Orlando. Boston is &lt;em&gt;far&lt;/em&gt; superior to Orlando. Orlando is a wasteland of hotels and conference centers and has nothing walkable anywhere. In contrast, Boston is a vibrant city that is a delight to walk around with plenty of interesting things to see.&lt;/p&gt;
&lt;p&gt;It has been satisfying getting to know people in the PL community. It&amp;rsquo;s also been nice to work more closely with professors in my department. I&amp;rsquo;m lucky I get to hang around with so many curious, intelligent, and friendly people.&lt;/p&gt;
&lt;h2 id=&#34;satisfaction&#34;&gt;
  Satisfaction
  &lt;a class=&#34;anchor&#34; href=&#34;#satisfaction&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m happy with where I am. The PhD program was hard at first—and it&amp;rsquo;s still hard—but it&amp;rsquo;s a different, more interesting kind of hard, and I like that.&lt;/p&gt;
&lt;p&gt;I think I&amp;rsquo;ll like the next few years. I still don&amp;rsquo;t know if I want to go into industry for a few years after or find a post-doc position in academia. Long-term I want to be a professor. We&amp;rsquo;ll see how it pans out though.&lt;/p&gt;
&lt;p&gt;If you are looking for interns to study topics related to static analysis, macro systems, type systems, and language design, please &lt;a href=&#34;https://lambdaland.org/#contact&#34;&gt;drop me a line&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Research Assistant. At least where I attend, there are Research Assistants, Graduate Assistants, and Teaching Assistants. RAs have funding and get paid to do research. GAs either have some kind of fellowship (some kind of grant/fund/pool of money from the school rather than a research grant) or are paying their own way. TAs teach classes in exchange for tuition and stipend money.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Tuition benefit: PhD students at my school in my field (CS) get their tuition paid for by the school. There are some obligations around this, such as taking a certain number of credit-hours each semester and maintaining a decent GPA.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Warp Factor Refactoring in Emacs</title>
      <link>https://lambdaland.org/posts/2023-05-31_warp_factor_refactor/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-31_warp_factor_refactor/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a nifty Emacs workflow for doing a project-wide search-and-replace on steroids. While I do use refactor tools that come with language servers,&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; sometimes those aren&amp;rsquo;t enough. Consider the case where you not only need to change the name of a function, but also e.g. need to swap the order of two of its arguments. Or you&amp;rsquo;ve broken one function out into two that need to be chained together. Whatever—there are plenty of ways where the IDE won&amp;rsquo;t be able to do everything that you need. Enter: Emacs.&lt;/p&gt;
&lt;p&gt;Here is what it looks like in action:&lt;/p&gt;
&lt;video width=&#34;730&#34; height=&#34;458&#34; controls&gt;
  &lt;source src=&#34;https://lambdaland.org/img/warp_speed_edits.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;p&gt;Here&amp;rsquo;s what I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I searched for lines matching &lt;code&gt;set_&lt;/code&gt; and &lt;code&gt;_config&lt;/code&gt; in my project, and got over 90 matches.&lt;/li&gt;
&lt;li&gt;I moved all the matches to their own buffer.&lt;/li&gt;
&lt;li&gt;I used a regex replace on the buffer to transform patterns matching &lt;code&gt;/set_([a-z]+)_config!/&lt;/code&gt; into &lt;code&gt;config_\1!&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I saved those changes back into the files where the came from.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this replaced &lt;em&gt;two&lt;/em&gt; symbols simultaneously: &lt;code&gt;set_logger_config!&lt;/code&gt; and &lt;code&gt;set_injector_config!&lt;/code&gt;. Moreover, this updated all the documentation as well, because I &lt;em&gt;wasn&amp;rsquo;t&lt;/em&gt; relying on my language server to find instances of that symbol in the source code: I could look inside of doc strings and README files as well! (That can be a two-edged sword, so you&amp;rsquo;ll want to be careful with this.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is why this workflow rocks:&lt;/strong&gt; Once you&amp;rsquo;ve dumped the search results into a buffer, you have the &lt;em&gt;full power&lt;/em&gt; of Emacs at your disposal. I have recorded keyboard macros, used regex replace from &lt;code&gt;evil-mode&lt;/code&gt;, and done other zany things to effect large-scale edits with elegance and speed. You&amp;rsquo;re not limited to dumb exact-match symbol replacement—you&amp;rsquo;ve got a lot of tools that you already know at your disposal.&lt;/p&gt;
&lt;h2 id=&#34;engage-the-editor&#34;&gt;
  Engage the editor
  &lt;a class=&#34;anchor&#34; href=&#34;#engage-the-editor&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You will need the following third-party packages to make this work, as well as &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; installed on your system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/consult&#34;&gt;Consult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/embark&#34;&gt;Embark&lt;/a&gt; (also &lt;code&gt;embark-consult&lt;/code&gt;, but that ships with Embark anyway)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All except wgrep are available from &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, and you can get wgrep &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;Non-GNU ELPA&lt;/a&gt;, so you shouldn&amp;rsquo;t have trouble finding and installing these—especially if you&amp;rsquo;re running Emacs 28 or newer.&lt;/p&gt;
&lt;p&gt;Why all the packages? That sure seems like a lot (4 whole packages!) for something that seems pretty complicated for a single feature. Well, Vertico, Consult, and Embark are &lt;em&gt;mostly&lt;/em&gt; there for the slick UI. wgrep does all the heavy lifting. I&amp;rsquo;d recommend installing Vertico, Consult, and Embark&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; anyway for how much they improve discoverability and add really useful ways of interacting with Emacs.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the short of what each package contributes:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Vertico&lt;/dt&gt;
&lt;dd&gt;Turns the default minibuffer completion UI into an auto-updating list of candidates. This lets us interact with &amp;ldquo;candidates&amp;rdquo;—or more specifically in our case, lines matching a pattern across our entire project—in a fast and accessible way.&lt;/dd&gt;
&lt;dt&gt;Consult&lt;/dt&gt;
&lt;dd&gt;Adds a bunch of &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html&#34;&gt;&lt;code&gt;completing-read&lt;/code&gt;&lt;/a&gt;-based functions. This lets us use ripgrep with Vertico&amp;rsquo;s UI.&lt;/dd&gt;
&lt;dt&gt;Embark&lt;/dt&gt;
&lt;dd&gt;Kind of like a generalized keyboard-focused right-click on crazy steroids. This lets us export our list of matches out of Vertico&amp;rsquo;s UI and into a buffer that wgrep can use.&lt;/dd&gt;
&lt;dt&gt;wgrep&lt;/dt&gt;
&lt;dd&gt;Takes a buffer of search results, &lt;em&gt;lets us edit that buffer&lt;/em&gt;, and then &lt;em&gt;reflect&lt;/em&gt; those changes back into the files from the lines that they came from.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;installing-and-configuring&#34;&gt;
  Installing and configuring
  &lt;a class=&#34;anchor&#34; href=&#34;#installing-and-configuring&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Here are some sample configurations you can use.&lt;/p&gt;
&lt;p&gt;If use &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;,&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; here is how you can set it up to automatically install next time you evaluate your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;use-package&lt;/span&gt; vertico
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vertico-mode&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;use-package&lt;/span&gt; consult
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:bind&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-c r&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; consult-ripgrep&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;use-package&lt;/span&gt; embark
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:bind&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-c a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; embark-act&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;use-package&lt;/span&gt; embark-consult
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; comes bundled with Embark; no `:ensure t&amp;#39; necessary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;embark consult&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;use-package&lt;/span&gt; wgrep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, you can install the packages with &lt;code&gt;M-x package-install-package&lt;/code&gt;, and your config should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; make sure all your packages are installed before using these&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vertico-mode&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; global-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-c a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;embark-act&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; global-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-c r&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;consult-ripgrep&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you use fancy package managers like &lt;a href=&#34;https://github.com/progfolio/elpaca&#34;&gt;Elpaca&lt;/a&gt; (what I use) or &lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;Quelpa&lt;/a&gt;, I trust that you know how to modify the above to suit your needs.&lt;/p&gt;
&lt;h2 id=&#34;make-it-so&#34;&gt;
  Make it so
  &lt;a class=&#34;anchor&#34; href=&#34;#make-it-so&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Once you have the packages installed, here are the steps you take to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Invoke &lt;code&gt;consult-ripgrep&lt;/code&gt;. (Bound to &lt;code&gt;C-c r&lt;/code&gt; in the sample config.)&lt;/li&gt;
&lt;li&gt;Type your search query. Note that space-separated patterns can match different parts of the line in different orders.&lt;/li&gt;
&lt;li&gt;Invoke &lt;code&gt;embark-act&lt;/code&gt;. (Bound to &lt;code&gt;C-c a&lt;/code&gt; in the sample config.) This will open a buffer with a list of keys you can press next.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;E&lt;/code&gt; for &lt;code&gt;embark-export&lt;/code&gt;. This opens up a new buffer with all the matches. Note that you should be able to further filter results with something like &lt;code&gt;consult-keep-lines&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;C-c C-p&lt;/code&gt; to run &lt;code&gt;wgrep-change-to-wgrep-mode&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make your edits.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;C-c C-c&lt;/code&gt; to finish editing, then hit &lt;code&gt;q&lt;/code&gt; to close the buffer.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;C-x s&lt;/code&gt; to run &lt;code&gt;save-some-buffers&lt;/code&gt; to make sure writes are committed.&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it. Happy hacking!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Julia&amp;rsquo;s language server, for instance, comes with a nice &amp;ldquo;rename symbol&amp;rdquo; feature. I know lots of other IDEs and language servers offer this sort of thing.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;This one isn&amp;rsquo;t &lt;em&gt;strictly&lt;/em&gt; necessary with Emacs 28 and beyond thanks to enhancements made to the &lt;a href=&#34;https://www.masteringemacs.org/article/understanding-minibuffer-completion&#34;&gt;default minibuffer interface&lt;/a&gt;, but I can&amp;rsquo;t think of a good reason to &lt;em&gt;not&lt;/em&gt; use Vertico: it is small, well-maintained, and it never ceases to impress me with how robust and flexible it is.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s not forget also the excellent &lt;a href=&#34;https://github.com/minad/marginalia/&#34;&gt;Marginalia&lt;/a&gt; and &lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;Orderless&lt;/a&gt; packages too!&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Now built-in to Emacs 29! So many excellent features in Emacs 29!&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;There is, of course, a way to do this automatically. Per the wgrep docs, put &lt;code&gt;(setq wgrep-auto-save-buffer t)&lt;/code&gt; in your config.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Writing Racket Macros: define-syntax and phases</title>
      <link>https://lambdaland.org/posts/2023-05-19_racket_macros/</link>
      <pubDate>Fri, 19 May 2023 00:00:00 -0600</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-19_racket_macros/</guid>
      <description>&lt;p&gt;There are a bunch of different ways of writing a macro in Racket. There are also some tricky things around phases to keep in mind. This is to help me keep them all straight.&lt;/p&gt;
&lt;h2 id=&#34;3-plus-1-ways-to-make-a-macro&#34;&gt;
  3+1 ways to make a macro
  &lt;a class=&#34;anchor&#34; href=&#34;#3-plus-1-ways-to-make-a-macro&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax-rule&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;syntax-rules&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;foo args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which, is in turn equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;syntax-case&lt;/span&gt; stx &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;gensymed-foo args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)])))&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; gensymed-foo is like foo but doesn&amp;#39;t match in the template&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;because &lt;code&gt;syntax-rules&lt;/code&gt; expands to &lt;code&gt;syntax-case&lt;/code&gt; with some fancy wrapping around it.&lt;/p&gt;
&lt;p&gt;This makes &lt;code&gt;syntax-case&lt;/code&gt; the most powerful of them all, and it&amp;rsquo;s here that we&amp;rsquo;re treating syntax as data comes to the forefront: you can bind the syntax object directly (in our example, &lt;code&gt;with the (λ (stx) ...)&lt;/code&gt; part), pattern match on it, and finally return new syntax with the &lt;code&gt;#&#39;&lt;/code&gt; notation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;define-syntax-rule&lt;/code&gt; is the weakest of the three, but handles a common case: just a single form that you&amp;rsquo;d like to transform a little bit. This version doesn&amp;rsquo;t allow for writing multiple clauses.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;define-syntax&lt;/code&gt; with &lt;code&gt;syntax-rules&lt;/code&gt; is in the middle: the bodies of each of the rule match arms (&lt;code&gt;(use args ...)&lt;/code&gt;) are assumed to be syntax objects. This works well for the majority of cases I think. It&amp;rsquo;s only when you need to do really hairy stuff and manually generate code that can&amp;rsquo;t be put together with repeats (&lt;code&gt;...&lt;/code&gt;) that you need the full power of &lt;code&gt;syntax-case&lt;/code&gt; at your disposal.&lt;/p&gt;
&lt;p&gt;Note that there are two forms of &lt;code&gt;define-syntax&lt;/code&gt;: &lt;code&gt;(define-syntax (id stx) body ...)&lt;/code&gt; is shorthand for &lt;code&gt;(define-syntax id (λ (stx) body ...))&lt;/code&gt; much like the shorthand for building functions with &lt;code&gt;define&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;bonus-more-power&#34;&gt;
  Bonus: more power
  &lt;a class=&#34;anchor&#34; href=&#34;#bonus-more-power&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;A cousin of &lt;code&gt;syntax-case&lt;/code&gt; is &lt;code&gt;syntax-parse&lt;/code&gt;. I was confused about this one for a bit because the names are so close, and they share a lot of similarities. &lt;code&gt;syntax-case&lt;/code&gt;&amp;rsquo;s documentation is in the &lt;a href=&#34;https://docs.racket-lang.org/reference/stx-patterns.html&#34;&gt;Racket Reference proper&lt;/a&gt;, while &lt;code&gt;syntax-parse&lt;/code&gt;&amp;rsquo;s documentation lives with the &lt;a href=&#34;https://docs.racket-lang.org/syntax/Parsing_Syntax.html&#34;&gt;syntax module documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our previous example would be written like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)]))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or equivalently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;use args &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)])))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;syntax-parse&lt;/code&gt; supports keyword arguments like &lt;code&gt;#:with&lt;/code&gt; and &lt;code&gt;#:when&lt;/code&gt; to do some pattern matching and predicate checking. &lt;code&gt;syntax-parse&lt;/code&gt; will backtrack through match arms until it finds a matching and satisfying clause.&lt;/p&gt;
&lt;p&gt;As far as I can tell, &lt;code&gt;syntax-parse&lt;/code&gt; is strictly the most powerful of the syntax manipulating forms that I&amp;rsquo;ve outlined here.&lt;/p&gt;
&lt;h2 id=&#34;phases&#34;&gt;
  Phases
  &lt;a class=&#34;anchor&#34; href=&#34;#phases&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;It doesn&amp;rsquo;t seem like macros can use the functions in their current module by default. However, if you wrap your function definitions in &lt;code&gt;begin-for-syntax&lt;/code&gt;, this shifts the function definitions &amp;ldquo;up&amp;rdquo; a phase, and they can be used at the same level as functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;begin-for-syntax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; foo &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-stx-prop stx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;baz&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define-syntax&lt;/span&gt; my-macro
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;syntax-parse stx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#:with&lt;/span&gt; foo-ed &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;foo stx&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;#&amp;#39;&lt;/span&gt;foo-ed&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also &lt;code&gt;require&lt;/code&gt; a module with the &lt;code&gt;for-syntax&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for-syntax&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;util.rkt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more information on phases, see the &lt;a href=&#34;https://docs.racket-lang.org/reference/syntax-model.html#%28tech._phase._level%29&#34;&gt;Racket Docs&lt;/a&gt; on phase levels.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meta: Update should fix RSS feeds</title>
      <link>https://lambdaland.org/posts/2023-05-13_rss_fixup/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-13_rss_fixup/</guid>
      <description>&lt;p&gt;I recently made an update to how I build my blog. I like writing my posts with Org-mode because it provides a richer markup language than Markdown. Plus, more Emacs = more good. &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; has support for Org files, but there was a problem with the RSS feed generation: all of my posts written in Org got truncated at some point. I don&amp;rsquo;t know if the fault lies with Hugo itself or with some problem in the theme I use—whatever it was, I don&amp;rsquo;t have the time right now to debug that and submit a good bug report or a fix. Instead, I&amp;rsquo;m using the &lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;ox-hugo&lt;/a&gt; org-mode exporter, so I still can write my posts with Org, but then let Emacs export them to Markdown for Hugo to process.&lt;/p&gt;
&lt;p&gt;Yes, it&amp;rsquo;s a Rube Goldberg machine. But what would a programmer&amp;rsquo;s blog be if the build wasn&amp;rsquo;t convoluted like this? Anyway, RSS feeds are fixed now—I checked. If you happened to read anything only via RSS, and found the content cut off at a strange point, this might have fixed it for some posts. Let me know if you run into any other strange issues.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The kind of thinking computer science enables</title>
      <link>https://lambdaland.org/posts/2023-05-11_thinking_cs/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-11_thinking_cs/</guid>
      <description>&lt;p&gt;I believe computer science plays as integral of a part to a well-rounded liberal arts education as does mathematics and linguistics. Why? A liberal arts education is designed to help you think in new and better ways. Computer science teaches novel ways of thinking, reasoning, and approaching problems that are hard to get anywhere else.&lt;/p&gt;
&lt;p&gt;I took a class on pedagogy when I encountered this puzzle. I answered the question easily, and I caught myself using reasoning patterns from work in programming coming to the forefront.&lt;/p&gt;
&lt;p&gt;Consider the following problem: suppose you have four cards, each of which has a letter on one side, and a number on the other. The cards are arranged like so:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;+-------+  +-------+  +-------+  +-------+
|       |  |       |  |       |  |       |
|   A   |  |   2   |  |   B   |  |   3   |
|       |  |       |  |       |  |       |
+-------+  +-------+  +-------+  +-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Suppose the cards follow the rule that, if a card has a vowel on one side, the other side &lt;em&gt;must&lt;/em&gt; be an even number. What is the smallest number of cards you need to turn over to verify that the rule holds for these cards? Which cards?&lt;/p&gt;
&lt;p&gt;Give yourself a second to think about it, and try and figure it out.&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Answer&lt;/summary&gt;
The answer is 2, and the cards are A and 3
&lt;/details&gt;
&lt;p&gt;Did you get that? I translated the rule into the logical implication &lt;em&gt;if vowel → then even number&lt;/em&gt;. It says nothing about the opposite side of a card if the number is even. Thus, we only need to check cards &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The point of the exercise that we were doing was to showcase how difficult reasoning with abstract symbols is. After showing this example with the cards, our instructor gave us another equivalent problem, but this time using familiar terms around conditions on the legal drinking age. The point was that familiar analogies reduce cognitive load, thereby freeing the students&amp;rsquo; minds for grasping bigger and more important ideas.&lt;/p&gt;
&lt;p&gt;Yet &lt;em&gt;I&lt;/em&gt; found it easy to answer the first and more abstract problem. I&amp;rsquo;m not a genius or anything—I&amp;rsquo;ve just practiced this kind of reasoning with computer science. Anyone can do that.&lt;/p&gt;
&lt;p&gt;Computer science teaches abstract reasoning in a way that nothing else can. I suppose once you get far enough into mathematics you get to experience a lot of the same sorts of ideas—but only math majors ever make it that far. Programming forces you to confront abstract reasoning about conditions and rules and how they combine from the outset.&lt;/p&gt;
&lt;p&gt;Moreover, teaching programming can be fun! You don&amp;rsquo;t have to go all out into gamification to elicit delight in seeing a computer follow your instructions. The feedback loop between writing code and getting a response is so tight; I think students have an easier time in computer science pushing themselves to reason through problems because they can get fast immediate and real feedback from the computer.&lt;/p&gt;
&lt;p&gt;I think more people should learn programming to learn how to think like a programmer. We also need to do a better job designing our CS courses in high school and university to focus on this kind of transferable skill, and we need to de-emphasize whatever &lt;code&gt;$hot_new_framework&lt;/code&gt; is being pushed by industry in the classroom.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Real Mail Client with Outlook</title>
      <link>https://lambdaland.org/posts/2023-05-03_email_with_outlook/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-05-03_email_with_outlook/</guid>
      <description>&lt;p&gt;I recently managed to get access to my Outlook email from Emacs. This took some doing as my university had disabled app passwords. I &lt;a href=&#34;https://lambdaland.org/posts/2022-08-28_keep_email_federated&#34;&gt;consider Outlook to be harmful&lt;/a&gt;, but inasmuch as companies and schools continue to enforce OAUTH-only authentication with email systems, it is good to find workarounds.&lt;/p&gt;
&lt;p&gt;This is how I set up email sending/receiving on my computer running macOS with &lt;a href=&#34;https://davmail.sourceforge.net/index.html&#34;&gt;DavMail&lt;/a&gt;. I also use &lt;a href=&#34;https://linux.die.net/man/1/mbsync&#34;&gt;mbsync&lt;/a&gt; (confusingly also known as isync) to actually fetch my email, and &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/&#34;&gt;mu/mu4e&lt;/a&gt; to index and read mail. &lt;a href=&#34;https://douglasrumbaugh.com/post/davmail-authentication/&#34;&gt;Douglas Rumbaugh has an awesome blog post&lt;/a&gt; that I followed to get this working. You should read that. This will mostly be my specific configuration settings as well as some tips and tricks.&lt;/p&gt;
&lt;h2 id=&#34;davmail-configuration&#34;&gt;
  DavMail configuration
  &lt;a class=&#34;anchor&#34; href=&#34;#davmail-configuration&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I just installed DavMail using &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install davmail
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I tried installing the cask version, but that never worked for me. Oh well. Command line is better anyway.&lt;/p&gt;
&lt;h3 id=&#34;config-file&#34;&gt;
  Config file
  &lt;a class=&#34;anchor&#34; href=&#34;#config-file&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Now comes the tricky part: we need to point DavMail the right direction to fetch a token. Start with the following in a config file: (I used &lt;code&gt;~/.davmail.properties&lt;/code&gt; as my config file)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;# Disallow access to the davmail server from remote hosts (i.e., other
# computers on the network)
davmail.allowRemote=false

# Don&amp;#39;t use SSL (between email client and davmail)
davmail.ssl.nosecurecaldav=false
davmail.ssl.nosecureimap=false
davmail.ssl.nosecureldap=false
davmail.ssl.nosecuresmtp=false

# Ports to run the different services on. You&amp;#39;ll need these to connect
# your clients. If you have several Exchange accounts, each one will need
# to run on different ports
davmail.caldavPort=5000
davmail.imapPort=5001
davmail.ldapPort=5002
davmail.smtpPort=5003

# Connection details for your exchange account. Odds are good that the
# url listed here will work for you. If not, see if your University/employer
# has any details on the correct host URL to connect to their email services
# with.
davmail.url=https://outlook.office365.com/EWS/Exchange.asmx

# Set the authentication mode to manual
davmail.mode=O365Manual

# Run davmail in server mode
davmail.server=true
davmail.enableKeepAlive=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s snarfed verbatim from the Douglas Rumbaugh post. The &lt;code&gt;davmail.url&lt;/code&gt; worked for me, and will probably work for you. My university uses a Duo-2FA powered authentication system, and that&amp;rsquo;s still the right URL. Go figure.&lt;/p&gt;
&lt;p&gt;With that in place, fire up DavMail on the terminal like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;davmail ~/.davmail.properties        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# put the path to your config file here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sets up a mail server &lt;em&gt;proxy&lt;/em&gt; running locally on your computer.&lt;/p&gt;
&lt;h2 id=&#34;email-client-config&#34;&gt;
  Email client config
  &lt;a class=&#34;anchor&#34; href=&#34;#email-client-config&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Douglas Rumbaugh has some examples for mbsync, which is what I use too. I like using the built-in macOS &lt;code&gt;security&lt;/code&gt; tool to store my passwords in my system keychain, so I don&amp;rsquo;t have to type a gpg decryption key every time I want to sync.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;security add-generic-password -a umail -s mbsync -w   &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# this will prompt for the secret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I put the login I use for my school account in there.&lt;/p&gt;
&lt;p&gt;Now, inside my &lt;code&gt;.mbsyncrc&lt;/code&gt; I can do this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;IMAPAccount uni
Host 127.0.0.1
Port 1143
User XXXXXXXX@XXXXX.edu
PassCmd &amp;#34;security find-generic-password -a umail -s mbsync -w&amp;#34;
SSLType None
AuthMechs LOGIN

IMAPStore uni-remote
Account uni

MaildirStore uni-local
Path ~/Mail/Umail/
Inbox ~/Mail/Umail/INBOX
SubFolders Verbatim

Channel uni
Far :uni-remote:
Near :uni-local:
Patterns *
SyncState *
Create Both
Sync All
Expunge Near
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fetching-the-secret-token&#34;&gt;
  Fetching the secret token
  &lt;a class=&#34;anchor&#34; href=&#34;#fetching-the-secret-token&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;With DavMail running and an IMAP-speaking client ready to go, you are prepared to fetch a secret token.&lt;/p&gt;
&lt;p&gt;Sync your mail through DavMail—in my case, by running &lt;code&gt;mbsync -a uni&lt;/code&gt;. You should see a link pop up in the DavMail log output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Please open the following link:
https://login.microsoftonline.com/common/oauth2/authorize?&amp;lt;...&amp;gt;
 proceed through authentication steps and paste back the final url that contains authentication code (blank page)
Authentication code:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Follow the instructions on the page—I finished doing a DUO push. Once that was done, I got redirected to a blank screen. &lt;strong&gt;COPY THE URL&lt;/strong&gt; of that page, and dump it into a text editor to pull out the key you will need from the query string.&lt;/p&gt;
&lt;p&gt;The key will look something like &lt;code&gt;{AES}&amp;lt;really long base64 encoded string&amp;gt;&lt;/code&gt;, and for me it was sandwiched between a few of the query parameters.&lt;/p&gt;
&lt;p&gt;With that key in hand, you can either paste it into the terminal, or you might have to open the DavMail config file. Douglas&amp;rsquo;s instructions said pasting the whole URL worked for him, but it never did for me.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what my config file looked like in the end:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;davmail.ssl.keystoreType=
davmail.ssl.keystorePass=
davmail.proxyPassword=
davmail.oauth.tenantId=
davmail.oauth.clientId=
davmail.smtpPort=1025
davmail.enableKerberos=false
davmail.folderSizeLimit=
davmail.forceActiveSyncUpdate=false
davmail.imapAutoExpunge=true
davmail.useSystemProxies=false
davmail.proxyUser=
davmail.caldavEditNotifications=false
davmail.ssl.nosecuresmtp=false
davmail.caldavPastDelay=0
davmail.ssl.keyPass=
log4j.logger.httpclient.wire=WARN
davmail.noProxyFor=
davmail.server=true
davmail.popMarkReadOnRetr=false
davmail.ssl.nosecureimap=false
davmail.disableTrayActivitySwitch=false
davmail.caldavAutoSchedule=true
davmail.enableProxy=false
davmail.proxyPort=
davmail.logFileSize=
davmail.mode=O365Manual
davmail.smtpSaveInSent=true
davmail.bindAddress=
davmail.ssl.nosecurepop=false
davmail.ssl.pkcs11Library=
log4j.rootLogger=WARN
davmail.ssl.keystoreFile=
log4j.logger.davmail=DEBUG
davmail.ssl.clientKeystoreType=
davmail.clientSoTimeout=
davmail.ssl.pkcs11Config=
davmail.ssl.clientKeystorePass=
davmail.imapPort=1143
davmail.url=https://outlook.office365.com/EWS/Exchange.asmx
log4j.logger.org.apache.http.conn.ssl=WARN
davmail.sentKeepDelay=0
davmail.ssl.nosecureldap=false
davmail.imapAlwaysApproxMsgSize=false
davmail.ssl.nosecurecaldav=false
davmail.popPort=1110
davmail.defaultDomain=
davmail.showStartupBanner=true
log4j.logger.httpclient=WARN
davmail.proxyHost=
davmail.ldapPort=1389
davmail.server.certificate.hash=
log4j.logger.org.apache.http.wire=WARN
davmail.disableGuiNotifications=false
davmail.imapIdleDelay=
davmail.allowRemote=false
davmail.disableUpdateCheck=false
log4j.logger.org.apache.http=WARN
# FIXME: make sure the username is correct here; for me it was &amp;#34;uXXXXXXX@umail.utah.edu&amp;#34;
davmail.oauth.USERNAME.refreshToken={AES}THIS IS WHERE THE SECRET KEY GOES!!!
davmail.caldavPort=1080
davmail.enableKeepAlive=true
davmail.ssl.clientKeystoreFile=
davmail.logFilePath=
davmail.carddavReadPhoto=true
davmail.keepDelay=30
davmail.oauth.redirectUri=
davmail.caldavAlarmSound=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try re-running your email sync, and see if it works!&lt;/p&gt;
&lt;h2 id=&#34;configuring-emacs-for-sending-mail&#34;&gt;
  Configuring Emacs for sending mail
  &lt;a class=&#34;anchor&#34; href=&#34;#configuring-emacs-for-sending-mail&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I use mu4e, but I think the &lt;code&gt;smtpmail-*&lt;/code&gt; variables are also used by &lt;code&gt;gnus&lt;/code&gt; and &lt;code&gt;notmuch&lt;/code&gt; for sending mail—I could be wrong though, so if I am, someone please correct me. :)&lt;/p&gt;
&lt;p&gt;I use the following in my mu4e &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e/Contexts.html&#34;&gt;work context&lt;/a&gt;; adjust as needed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;make-mu4e-context
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Work&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:match-func&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;lambda&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;when&lt;/span&gt; msg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;string-prefix-p &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/Umail&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-message-field msg &lt;span style=&#34;color:#81a1c1&#34;&gt;:maildir&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:vars&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;user-mail-address &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;ashton.wiersdorf@utah.edu&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;user-full-name&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Ashton Wiersdorf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-compose-signature &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;SIGNATURE GOES HERE&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;;                               ↓ this is a neat function ↓&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; (message-send-mail-function . message-send-mail-with-mailclient)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-get-mail-command &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;mbsync uni&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-bookmarks &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Inbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:query&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;maildir:/Umail/INBOX&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:key&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;105&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Flagged&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:query&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;g:f AND NOT flag:trashed&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:key&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Unread messages&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:query&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;flag:unread AND NOT flag:trashed&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:key&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;117&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Today&amp;#39;s messages&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:query&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;date:today..now&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:key&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Last 7 days&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:query&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;date:7d..now&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:key&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;119&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Messages with images&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:query&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;mime:image/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:hide-unread&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:key&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;112&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Drafts&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:query&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;maildir:/Umail/Drafts&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:key&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;message-send-mail-function &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; smtpmail-send-it&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;smtpmail-smtp-server &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;smtpmail-smtp-user &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;XXXXXXXX@XXXXXXXXX.edu&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; base username email, not my nice first.last@utah.edu alias&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;smtpmail-stream-type &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; plain&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;smtpmail-smtp-service &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1025&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-drafts-folder &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/Umail/Drafts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-sent-folder &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/Umail/Sent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-trash-folder &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/Umail/Trash&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mu4e-refile-folder &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/Umail/Archive&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I also had to add the following to my &lt;code&gt;~/.authinfo.gpg&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;machine localhost port 1025 login XXXXXXXX@XXXXXXX.edu password XXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the URL is &lt;code&gt;localhost&lt;/code&gt; —this is because we are using DavMail as a &lt;em&gt;proxy&lt;/em&gt; for Outlook.&lt;/p&gt;
&lt;p&gt;If you have not set up your authsources, might be a good time to do that to manage secrets with Emacs. I have this in my config:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;setq&lt;/span&gt; auth-sources &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;~/.authinfo.gpg&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;David Wilson has an &lt;a href=&#34;https://www.youtube.com/watch?v=nZ_T7Q49B8Y&#34;&gt;awesome video on how to set up gpg&lt;/a&gt; to manage passwords with Emacs. I&amp;rsquo;d check out all his videos because he covers some seriously great stuff in the Emacs and the Guix space.&lt;/p&gt;
&lt;p&gt;Anyway, email with Outlook sucks—we wouldn&amp;rsquo;t have to do any of this crap if app passwords were a thing. But if there is no other way, then DavMail can bring a little sanity back to your email workflow.&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;info&#34;&gt;
&lt;p&gt;Update 2023-09-24: I used to have my affiliate link for Fastmail here. I&amp;rsquo;ve genuinely enjoyed their services and have received no financial compensation for the little recommendation I gave them here. However, I&amp;rsquo;ve decided to remove the affiliate link because I don&amp;rsquo;t think it&amp;rsquo;s appropriate for my blog.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I personally use &lt;a href=&#34;https://fastmail.com/&#34;&gt;Fastmail&lt;/a&gt;, and I&amp;rsquo;ve enjoyed it. There are &lt;a href=&#34;https://drewdevault.com/2020/06/19/Mail-service-provider-recommendations.html&#34;&gt;some good alternatives&lt;/a&gt; too. If you have the choice of email provider, just use something that respects your privacy and lets you use your own domain. Above all, never use Outlook if you can avoid it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Praise for the pragmatic third camp</title>
      <link>https://lambdaland.org/posts/2023-03-16_appreciation_for_business_programmers/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-03-16_appreciation_for_business_programmers/</guid>
      <description>&lt;p&gt;
Some years ago I came across &lt;a href=&#34;https://josephg.com/blog/3-tribes/&#34;&gt;a blog post&lt;/a&gt; that described programmers as being in one of three camps. It&amp;#39;s a fun, short post, so I encourage you to go read that real quick, but the gist of it is that programmers generally fall into one of three categories according to what they primarily value:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Applied mathematicians, who appreciate elegant solutions to problems. Program execution on von Neumann machines is incidental. These programmers like high-level languages and mathematically correct reasoning about programs.&lt;/li&gt;
&lt;li&gt;Bit hackers, who like making the machine run as efficiently as possible. Without a von Neumann machine, programs are pointless. These programmers like low-level languages that let them get into the guts of things.&lt;/li&gt;
&lt;li&gt;Product makers, who care about the ideals of the first and second camps in as much as they help them accomplish the task of delivering more features. Most industry programmers probably fall into this category. They like high-level languages as long as performance doesn&amp;#39;t suffer too much and that it&amp;#39;s pragmatic. (E.g. JavaScript, Ruby, Python, Go, etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The author of the post talks a little bit about the tension between the camps. I won&amp;#39;t reproduce it here, but it can be amusing, so you should give it a read.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll go ahead and add one more camp to the list: the code monkey for whom coding is just a job. They care about the quality of their work in as much as it allows them to hit their deadlines and collect a paycheck. They don&amp;#39;t care too much about what language they use, as long as it&amp;#39;s the one they learned in school or their bootcamp. They&amp;#39;re generally not curious about learning new languages, understanding how things are implemented, or making a good UI.&lt;/p&gt;
&lt;p&gt;
Most people I&amp;#39;ve worked with have fallen into the first three camps, fortunately. I&amp;#39;ve encountered a few who fall into the fourth camp I just outlined, and they&amp;#39;re miserable to work with if you care about anything. When you work with someone from camps 1–3, there&amp;#39;s some passion there to channel to make a better program, for whatever your metric of &amp;#34;better&amp;#34; is—and you can usually come to some consensus so that a program is better on multiple axes. But with the fourth, there&amp;#39;s nothing there to push on.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve found it to be a helpful paradigm: whenever I have a disagreement about someone about what constitutes &lt;em&gt;good&lt;/em&gt; or &lt;em&gt;valuable&lt;/em&gt; programming, I consider what kinds of things they value. (In a way, it&amp;#39;s a little like Jonathan Haidt&amp;#39;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Moral_foundations_theory&#34;&gt;Moral Foundations Theory&lt;/a&gt; for programmers.) Maybe you can think back to some disagreement you had and see the value mismatch manifesting.&lt;/p&gt;
&lt;p&gt;
The other day I experienced a burst of appreciation for camp 3—the pragmatic makers—more so than I had ever felt before. I was fighting with a crappy health insurance website. Instead of a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; dropdown element, they had built a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with some &lt;code&gt;on-click&lt;/code&gt; handler to make a faux dropdown. The website was janky, bloated, slow, and difficult to navigate. It must have been made by programmers in camp 4.&lt;/p&gt;
&lt;p&gt;
I realized that the only camp that stands a chance of fighting this kind of crappy experience online is those programmers in camp 3: the soldiers who care about their craft enough to make the user happy. I realized that &lt;em&gt;I&lt;/em&gt; would never ever want to build a better insurance site because &lt;em&gt;that&amp;#39;s not an interesting problem to me&lt;/em&gt;, but there are those who have different motivations than I do, and these people can channel those motivations into hammering out better experiences for all of us.&lt;/p&gt;
&lt;p&gt;
So, here&amp;#39;s to the pragmatists—the people who care about the end and not so much the means. I&amp;#39;m going to stay in my camp working on more elegant tools for you to use. It&amp;#39;s nice that there&amp;#39;s some symbiosis between the three groups. We should all recognize that we need each other.&lt;/p&gt;
&lt;p&gt;
Except for camp 4. You&amp;#39;re the reason why we have crappy insurance portals.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metric Worship, or: How a bad manager wrecked a (small) company</title>
      <link>https://lambdaland.org/posts/2023-02-21_metric_worship/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-02-21_metric_worship/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
The story
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I once worked as a part of a company with four employees, all of us programmers. We formed a sort of daughter company with a bigger—though still modest-sized—company that handled our payroll and whatnot. Our work directly helped the parent company, but we were organizationally independent development-wise. I really liked working with that small team: we had a one-hour meeting each week to plan out our work, and a short, casual stand-up each morning to get things rolling. Almost all my time was spent building features and squishing bugs. I got a lot of really good feedback on all my pull-requests, as everyone there really cared about making a good-quality product.&lt;/p&gt;
&lt;p&gt;
Then we got acquired by a big, old, ossified company.&lt;/p&gt;
&lt;p&gt;
We got a new manager. Corporate dictated that all teams follow a two-week sprint, orchestrated through JIRA, and that every minute of our work be tracked. We now had three or four &amp;#34;SCRUM ceremonies&amp;#34; a week, each of which lasted between one to three hours. Our new manager had a baroque system to track our velocity and carefully calculated how many story points our team could complete a week.&lt;/p&gt;
&lt;p&gt;
My team&amp;#39;s interactions with our manager could be summarized in this meme:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://lambdaland.org/img/jira_scrum_crap.jpeg&#34; alt=&#34;/img/jira_scrum_crap.jpeg&#34; title=&#34;/img/jira_scrum_crap.jpeg&#34; /&gt;&lt;figcaption&gt;
Metric-worshiping SCRUM manager encounters a programmer who cares
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
Maybe I was (or am) a bit naïve, but it was such a deep shock for me to be forced to work at the cadence of someone who cared more about metrics than about the quality of the actual product. There were some funny moments we had with our new manager and company:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Managers got worried about what the programmers would do in a three-hour window between the end of one sprint and the start of another. Clearly, work may only happen during a sprint!&lt;/li&gt;
&lt;li&gt;The new company bragged about having gotten their 4-week-long release cycle down to the blazing speed of only 2-weeks. Someone from my company asked, &amp;#34;but we do CI/CD and deploy multiple times a day!&amp;#34; Management didn&amp;#39;t know how to work with such a tight release cycle. This was a SaaS product, mind you, so daily deployments was an easy way to squish bugs quickly.&lt;/li&gt;
&lt;li&gt;I was working part-time, and over 50% of my work hours were now spent in meetings determining how the rest would go.&lt;/li&gt;
&lt;li&gt;I had to clock every minute I spent on a ticket, and my manager got visibly frustrated when I forgot, because now his spreadsheet would be broken.&lt;/li&gt;
&lt;li&gt;I once forgot to move a ticket into the &amp;#34;done&amp;#34; column, and my manager got visibly flustered. I guess I had wrecked his precious little metrics.&lt;/li&gt;
&lt;li&gt;My manager frequently bragged about having worked all weekend. What was this guy even doing? He&amp;#39;s a middle manager! Tweaking spread sheets and &amp;#34;grooming the backlog&amp;#34;, I guess.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, the profound amount of crap I and my team had to put up with (combined with other passive-aggressive hostility from HR and other parts of management) sent my &lt;em&gt;entire&lt;/em&gt; team packing within a matter of weeks. I don&amp;#39;t know who they found to maintain that code base. I&amp;#39;m not sure if &lt;em&gt;anyone&lt;/em&gt; is maintaining it now. I feel sorry for the customers who liked our product. Management didn&amp;#39;t care about the product. All they cared about were their stupid little metrics.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
How did this happen?
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Law_of_the_instrument&#34;&gt;Maslow&amp;#39;s Hammer&lt;/a&gt; suggests one reason why this happens:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If all you have is a hammer, everything looks like a nail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Management at this company had a huge hammer in the form of an overly-complicated JIRA setup. Every problem could be broken apart into little atomic pieces of work, scheduled into sprints, and orchestrated from afar.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also &lt;a href=&#34;https://en.wikipedia.org/wiki/Goodhart%27s_law&#34;&gt;Goodhart&amp;#39;s Law&lt;/a&gt;, which states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any observed statistical regularity will tend to collapse once pressure is placed upon it for control purposes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
When management fixates so much on metrics and ties rewards, praise, and incentives to hitting metrics rather than shipping good things, stuff will go downhill quickly. In our case, it drove out the people who cared. In other cases, mediocrity sets in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Monetary metrics are often a bad proxy for quality
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
It is an incredible privilege to work on something that you care about with people that also care about it. There&amp;#39;s a big difference between people who care about the &lt;em&gt;quality&lt;/em&gt; of something and the people who only know what the monetary value of things are. This isn&amp;#39;t to say that business needs and financial questions are always bad to ask: at one job, many of my bright ideas (so I thought) got shelved because there simply wasn&amp;#39;t enough time and/or programmers to get the thing done, and we were working really hard to give people what they wanted.&lt;/p&gt;
&lt;p&gt;
Now that I write that, the decision-makers in those instances were still completely different than that bad manager I had at the last company: the managers at the new company cared about the experiences that our users were having with our product and wanted to make that a high-quality experience. Their questions had a much better motivation than the bean-counting metric-chasing origins of the bad manager&amp;#39;s decisions.&lt;/p&gt;
&lt;p&gt;
Money can sometimes be an indicator for quality, but not always. Money just points you to what people are willing to pay for. Quality is multi-faceted and there can be many (sometimes competing) approaches to getting at quality. Maybe some of the complexity is why it&amp;#39;s tempting to move away from hard to quantify questions about quality and towards metrics that can be put on a linear scale and compared.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
The two companies
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I wrote a little bit about &lt;a href=&#34;https://lambdaland.org/posts/2022-08-28_keep_email_federated/#headline-2&#34;&gt;the differences between staff and line&lt;/a&gt; workers. I&amp;#39;ve been a line worker my whole life, and so I get frustrated when staff gets in my way to (in my view) the detriment of the end of the institution. There&amp;#39;s probably some needs of the staff that I don&amp;#39;t fully appreciate—I bet a lot of people are just trying to perfect the institution as a thing in itself, which could be a good and needed thing.&lt;/p&gt;
&lt;p&gt;
As I write this, I realize that I, a tool-lover, sometimes focus on making tools better &lt;em&gt;an und für sich&lt;/em&gt;. It&amp;#39;s probably good that I&amp;#39;m in academia where researching and making better tools (e.g. better programming languages) is my objective, rather than trying to make a product to sell. Not that I&amp;#39;m &lt;em&gt;bad&lt;/em&gt; at the latter—I shipped some pretty sweet stuff—it&amp;#39;s just that my decision making might be a little skewed at times. I&amp;#39;ll try and work on that.&lt;/p&gt;
&lt;p&gt;
In any case, focusing in metrics rather than the real quality of your product is bound to frustrate people who care. If you believe that JIRA and better metrics will be the key to making a better product, don&amp;#39;t: metrics have their place, but they can quickly get in the way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What is a type system, really?</title>
      <link>https://lambdaland.org/posts/2023-01-17_what_is_a_type_system_really/</link>
      <pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2023-01-17_what_is_a_type_system_really/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;
  Background
  &lt;a class=&#34;anchor&#34; href=&#34;#background&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This is a question I&amp;rsquo;ve been wrestling with for a little bit. My first experience with a type system was with Java, and I didn&amp;rsquo;t like it. It just felt like an annoying constraint on the kinds of programs I could write. I was coming from Perl, which sports weak dynamic typing, so Java&amp;rsquo;s rigidity came as a bit of a shock.&lt;/p&gt;
&lt;p&gt;After Java I learned some C, which too has types. C&amp;rsquo;s types are different from Java&amp;rsquo;s in a big way: in C they&amp;rsquo;re really just directives to the compiler on how to interpret some bytes. &amp;ldquo;Everything is just &lt;code&gt;void *&lt;/code&gt;&amp;rdquo; is kind of true. In C, bytes can be interpreted however you wish.&lt;/p&gt;
&lt;p&gt;As I matured as a developer, I realized that sometimes I &lt;em&gt;wanted&lt;/em&gt; constraints on what I could program. I wanted to have some way to narrow the scope of possibilities of things my program could do. While that may sound bad at first glance, consider if you could narrow the scope of ways your program would go &lt;em&gt;wrong&lt;/em&gt;. That&amp;rsquo;s what types are designed to do.&lt;/p&gt;
&lt;p&gt;Not all type systems are equally powerful: while Java&amp;rsquo;s type system prevents certain classes of errors, a &lt;code&gt;NullPointerException&lt;/code&gt; crops up here and there to blow your (well-typed!) program out of the water. Languages like Rust or Kotlin sport type systems that prevent &lt;code&gt;NullPointerExceptions&lt;/code&gt; or segfaults from ever cropping up. The trade-off is that these type systems often take a little more time to get used to, and might make it harder to write certain kinds of programs.&lt;/p&gt;
&lt;p&gt;New advances in type systems are mitigating those trade-offs, however. Kotlin&amp;rsquo;s type system does away with &lt;code&gt;NullPointerExceptions&lt;/code&gt; without being too much more complex than Java&amp;rsquo;s, and things like &lt;em&gt;gradual typing&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; make the cost curve of adding static types to a dynamically typed codebase much smoother. The more I learn, the more I see that I can do with types.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-type-system&#34;&gt;
  What is a type system?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-a-type-system&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In one sense types are just sets of values that an expression can take on. Suppose I have a variable of type &lt;code&gt;Int&lt;/code&gt;: this implies the values it will be bound to belong to the set ℤ. This view of types is really good for thinking about how algebraic types work: when I take the &lt;em&gt;product&lt;/em&gt; of two types (e.g. &lt;code&gt;Int × Bool&lt;/code&gt;), I&amp;rsquo;m describing values that belong to the set of ordered pairs &lt;code&gt;{(n,b) | n ∈ ℤ, b ∈ 𝔹}&lt;/code&gt; or the &lt;em&gt;cross-product&lt;/em&gt; of the sets &lt;code&gt;ℤ × 𝔹&lt;/code&gt;. Tuples and structs are usually how product types are realized in a programming language.&lt;/p&gt;
&lt;p&gt;The same goes for sum types and set unions. A &lt;em&gt;sum type&lt;/em&gt; is the union of two or more types; if I have a variable of type &lt;code&gt;Nat + Bool&lt;/code&gt;, then it can be a number &lt;em&gt;or&lt;/em&gt; a boolean. Tagged unions and &lt;a href=&#34;https://en.wikipedia.org/wiki/Enumerated_type&#34;&gt;enums&lt;/a&gt; are typically how you see sum types in programming languages.&lt;/p&gt;
&lt;p&gt;If you consider the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cardinality&#34;&gt;cardinality&lt;/a&gt; of a type, the metaphor continues to work.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; For example, if I have a type called a &lt;code&gt;Byte&lt;/code&gt; that holds an integer between 0 and 255, and I pair it with a boolean in a tuple to produce the type &lt;code&gt;Byte × Bool&lt;/code&gt;, then there will be 256 × 2 = 512 different values that inhabit the type &lt;code&gt;Byte × Bool&lt;/code&gt;. Likewise with a sum type, where a value can be either &lt;code&gt;Byte&lt;/code&gt; or &lt;code&gt;Bool&lt;/code&gt;, then there are 256 + 2 = 258 different inhabitants of the type.&lt;/p&gt;
&lt;p&gt;Every type system that I know of has some set of &lt;em&gt;primitive types&lt;/em&gt; along with ways of combining those types into bigger structures. Primitive types typically include numbers, booleans, and strings, while combining structures usually include records (or structs, i.e. product types) and enumerations (i.e. sum types).&lt;/p&gt;
&lt;h3 id=&#34;static-typing-dynamic-typing-and-type-inference&#34;&gt;
  Static typing, dynamic typing, and type inference
  &lt;a class=&#34;anchor&#34; href=&#34;#static-typing-dynamic-typing-and-type-inference&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Languages with a &lt;em&gt;static type system&lt;/em&gt; are ones where the type of an expression—be it a variable, literal, compound expression, function call, etc.—is discernible without running the program. Haskell, Rust, Java, C, C++, Go, etc. are all statically typed languages.&lt;/p&gt;
&lt;p&gt;In contrast, in a &lt;em&gt;dynamic type system&lt;/em&gt;, the types of expressions are not knowable until runtime. The language implementation has to insert checks before e.g. performing an addition to make sure the types line up right. Perl, Python, Ruby, JavaScript, Scheme, Clojure, etc. are dynamically typed languages.&lt;/p&gt;
&lt;p&gt;Some static languages like Java require you to write down the type of every variable, expression, and function. Others, like Rust and Haskell, do something called &lt;em&gt;type inference&lt;/em&gt;: this is where the type checker is able to infer, based off of the types of literal data as well as the operators in use, what the types for a program should be. This is different than a dynamic type system: just because you didn&amp;rsquo;t write down what type a variable was, doesn&amp;rsquo;t mean it is now dynamically typed. In Rust, Haskell, etc., every expression still has a type—it&amp;rsquo;s just inferred rather than explicitly given by you, the programmer.&lt;/p&gt;
&lt;h3 id=&#34;nominal-vs-dot-structural&#34;&gt;
  Nominal vs. Structural
  &lt;a class=&#34;anchor&#34; href=&#34;#nominal-vs-dot-structural&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Some types are &lt;em&gt;nominal&lt;/em&gt; and others are &lt;em&gt;structural&lt;/em&gt;. These notions describe how two types are considered equal. Nominal types are what you get all over in Java: for two objects to be of the same type, they must both be of the same class. It doesn&amp;rsquo;t matter if you have two classes like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; thing_1&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;boolean&lt;/span&gt; thing_2&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Bar&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; thing_1&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;boolean&lt;/span&gt; thing_2&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though the members of &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; have the same interface and even the same names, a value of type &lt;code&gt;Foo&lt;/code&gt; will never be the same as type &lt;code&gt;Bar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Structural types determine equivalence based off of their algebraic structure. Most types in Haskell, ML, Typed Racket, and others work this way. This is kind of like a generalization of interfaces: if two types &amp;ldquo;implement&amp;rdquo; the &amp;ldquo;same interface&amp;rdquo; of having the same structure, they can be considered equivalent and interchangeable. However, some types in Typed Racket, like those based off of structures, are nominal—you don&amp;rsquo;t have to be all structural or all nominal in your language.&lt;/p&gt;
&lt;p&gt;Most of the time I find it easier to think in terms of structural types. There are times when nominal types make more sense, though. It&amp;rsquo;s nice when your language gives you the flexibility to choose.&lt;/p&gt;
&lt;h2 id=&#34;why-do-we-care-about-type-systems&#34;&gt;
  Why do we care about type systems?
  &lt;a class=&#34;anchor&#34; href=&#34;#why-do-we-care-about-type-systems&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I think most computer scientists are familiar with &lt;a href=&#34;https://en.wikipedia.org/wiki/Halting_problem&#34;&gt;the Halting Problem&lt;/a&gt;, but &lt;a href=&#34;https://en.wikipedia.org/wiki/Rice%27s_theorem&#34;&gt;Rice&amp;rsquo;s Theorem&lt;/a&gt; is &lt;em&gt;slightly&lt;/em&gt; less well-known.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; Rice&amp;rsquo;s theorem states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All non-trivial semantic properties of programs are undecidable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Rice%27s_theorem&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is a semantic property? In contrast with a &lt;em&gt;syntactic property&lt;/em&gt;, which is aspect apparent in the text of the program, a &lt;em&gt;semantic property&lt;/em&gt; deals with what happens when the program runs. For example, &amp;ldquo;does this program halt?&amp;rdquo; is a semantic property, and the same semantic property covered by Turing&amp;rsquo;s Halting Problem. &amp;ldquo;Does this program contain any &lt;code&gt;if&lt;/code&gt; statements?&amp;rdquo; is a syntactic property. &amp;ldquo;Does control reach this point in the program?&amp;rdquo; or &amp;ldquo;What values flow here?&amp;rdquo; are both semantic questions.&lt;/p&gt;
&lt;p&gt;Type systems can turn certain semantic properties into syntactic ones: we can turn questions about the program&amp;rsquo;s runtime behavior (e.g. &amp;ldquo;Does a function taking integers get applied to a boolean causing a type error?&amp;rdquo;) into questions we can answer by examining the syntax of our program—if we have a statically typed language, we can tell—without running the program itself—whether or not no type errors ever occur.&lt;/p&gt;
&lt;p&gt;There will still be programs when it&amp;rsquo;s impossible to decide whether or not the program has a type error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;goldbach-conjecture-true?&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;not a number&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but in these cases we can restrict ourselves to programs that &lt;em&gt;definitely&lt;/em&gt; do not have any type errors.&lt;/p&gt;
&lt;h2 id=&#34;beyond-sets-types-as-a-meta-language&#34;&gt;
  Beyond sets: types as a meta language
  &lt;a class=&#34;anchor&#34; href=&#34;#beyond-sets-types-as-a-meta-language&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Something I&amp;rsquo;ve learned recently is that &amp;ldquo;type system&amp;rdquo; is just what we call meta-languages for our programming languages. The language of types describes the behavior of a program written in another language.&lt;/p&gt;
&lt;p&gt;Consider the following program in Typed Racket:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;: &lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Number Number&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The annotation &lt;code&gt;(: add1 (-&amp;gt; Number Number))&lt;/code&gt; is a proposition that &lt;code&gt;add1&lt;/code&gt; is a function that takes some value belonging to the set ℕ and gives back another thing in the set ℕ.&lt;/p&gt;
&lt;p&gt;Now if we call that function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;seven : Number &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; seven&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the &lt;code&gt;: Number&lt;/code&gt; bit on the first line is a proposition that the variable &lt;code&gt;seven&lt;/code&gt; will take on a value in the set ℕ.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Now, in the meta-language of types, we can check that the type of the argument &lt;code&gt;seven&lt;/code&gt; matches with the type of the parameter &lt;code&gt;n&lt;/code&gt; in &lt;code&gt;add1&lt;/code&gt;. In this case, the types match, so we proceed. If the declared or inferred type of the argument did &lt;em&gt;not&lt;/em&gt; line up, our type checker would complain that we had violated the rules of the meta-language. These rules in the meta-language, of course, correspond to the actual runtime properties of Racket. More on that later in &lt;a href=&#34;#erasure&#34;&gt;§ Erasure&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;types-other-than-values&#34;&gt;
  Types other than values
  &lt;a class=&#34;anchor&#34; href=&#34;#types-other-than-values&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Many object-oriented (OO) languages have a notion of &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; variables. Visibility is another thing type systems enforce. Annotating a variable as being &lt;code&gt;private&lt;/code&gt; is a proposition that it is only accessed in certain parts of the program, which is something the type checker can then ensure is enforced.&lt;/p&gt;
&lt;p&gt;Tainting is another thing you might want from a type system: &lt;em&gt;tainting&lt;/em&gt; refers to marking user-supplied data as &amp;ldquo;tainted&amp;rdquo;, and any attempt to e.g. modify this data or branch off of the value is prohibited, unless the data has been &amp;ldquo;sanitized&amp;rdquo; by e.g. explicitly parsing well-formed data with regular expressions or the like. This is supposed to help protect against injection attacks.&lt;/p&gt;
&lt;p&gt;A type system could have a wrapper type &lt;code&gt;Tainted&amp;lt;A&amp;gt;&lt;/code&gt; that takes some data of any type and protects it from dangerous operations. Then you&amp;rsquo;d have functions like &lt;code&gt;regex_sanitize :: Tainted&amp;lt;String&amp;gt;, Regex → String&lt;/code&gt; for when you want to parse a tainted string to get some data out of it.&lt;/p&gt;
&lt;h2 id=&#34;erasure&#34;&gt;
  Erasure
  &lt;a class=&#34;anchor&#34; href=&#34;#erasure&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;There is usually some kind of check to make sure that the propositions in the meta-language correspond to the program we&amp;rsquo;re describing. Without this check, there wouldn&amp;rsquo;t be anything stopping me from writing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;seven : Number &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;definitely not a number!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;add1&lt;/span&gt; seven&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and the program would still type check if it just blindly trusted the type annotations. Of course, as soon as the program &lt;em&gt;runs&lt;/em&gt;, the runtime would explode at the &lt;code&gt;add1&lt;/code&gt; exception. Removing the types after checking is called &amp;ldquo;type erasure&amp;rdquo;, as the types are erased after type checking and the program gets run as if they had never been there.&lt;/p&gt;
&lt;p&gt;Some languages like Haskell and Java do this. This is safe to do because we&amp;rsquo;re only running programs that we&amp;rsquo;ve proven are well-typed. The upside to this is that we can save a lot of overhead by removing type checks. The downside is that certain kinds of runtime introspection might not be possible. Java, for example, doesn&amp;rsquo;t keep type parameters around on generics. &lt;a href=&#34;https://en.wikipedia.org/wiki/Generics_in_Java#Problems_with_type_erasure&#34;&gt;Wikipedia has a good example&lt;/a&gt; of where &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt; and &lt;code&gt;ArrayList&amp;lt;Float&amp;gt;&lt;/code&gt; both report the same thing under &lt;code&gt;.getClass()&lt;/code&gt; at runtime.&lt;/p&gt;
&lt;p&gt;One place to be careful is when typed and untyped code mix. This is where &lt;em&gt;gradual typing&lt;/em&gt; comes in. Most languages are either statically typed or dynamically typed, but a growing number of languages are either being adapted to support or are being developed out of the box with support for gradual types. In these languages, like Typed Racket, you have to insert runtime checks to make sure code coming from an untyped module into a typed module agrees with the type guarantees.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a lot of hidden complexity around gradual typing. &lt;a href=&#34;https://cs.brown.edu/people/bgreenma/publications/publications.html&#34;&gt;Ben Greenman&lt;/a&gt; has many papers outlining some of the intricacies around the semantics of gradual typing.&lt;/p&gt;
&lt;h3 id=&#34;wat-can-go-wrong&#34;&gt;
  Wat can go wrong
  &lt;a class=&#34;anchor&#34; href=&#34;#wat-can-go-wrong&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;TypeScript is a bit of an odd language. The main page proclaims &amp;ldquo;TypeScript becomes JavaScript via the delete key&amp;rdquo; and just erases all types after type checking. You can call TypeScript modules from JavaScript, and TypeScript doesn&amp;rsquo;t put in any runtime checks. For example, you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; add2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; number&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; b number&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; number &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and get the result:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;9
foobar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TypeScript&amp;rsquo;s type guarantees are only locally sound. As soon as your typed and untyped parts mix, your program will fall back on the very &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;wat-worthy&lt;/a&gt; typing rules of JavaScript.&lt;/p&gt;
&lt;h2 id=&#34;when-layers-mix&#34;&gt;
  When layers mix
  &lt;a class=&#34;anchor&#34; href=&#34;#when-layers-mix&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;How much can you program in this meta language of types? I&amp;rsquo;m still trying to understand this. &lt;em&gt;Dependent types&lt;/em&gt; allow types to depend on values; i.e. you can have a type for &amp;ldquo;list with three integers&amp;rdquo;. Dependent typing, as I understand it, opens up complete programmability of the type system, at the cost of type checking becoming undecidable. These type systems allow you describe the behavior of your programs with incredible precision.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve done a little work with &lt;a href=&#34;https://en.wikipedia.org/wiki/Coq&#34;&gt;Coq&lt;/a&gt;, which supports dependent types. I haven&amp;rsquo;t done enough yet to really understand it well though!&lt;/p&gt;
&lt;h2 id=&#34;types-as-a-design-tool&#34;&gt;
  Types as a design tool
  &lt;a class=&#34;anchor&#34; href=&#34;#types-as-a-design-tool&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Beyond the neat safety properties that type systems give me, I really like using types as a design tool. So often I&amp;rsquo;ll be working on transforming some data or pulling together information from multiple different sources to decide something, and it&amp;rsquo;s easy to get lost in the lines of code. What helps is for me to think of a function in terms of the shape of its inputs and the shape of the needed output. (This is part of the reason why I like &lt;a href=&#34;#nominal-vs-dot-structural&#34;&gt;structural type systems&lt;/a&gt; so much.) With the types in hand, the program almost writes itself.&lt;/p&gt;
&lt;p&gt;Indeed, there are times when the program &lt;em&gt;can&lt;/em&gt; write itself! If you write down the type of a function, it&amp;rsquo;s not hard for an editor to suggest programs that satisfy that type. With more expressive types, the better the suggestions will be. To see an example of this in action, check out &lt;a href=&#34;https://git.sr.ht/~ashton314/microKanren&#34;&gt;the type checker I made with μKanren&lt;/a&gt;, which can accept a type and generate expressions that satisfy it.&lt;/p&gt;
&lt;p&gt;One thing that I like about this kind of program generation is the programs will definitely be &lt;em&gt;correct&lt;/em&gt;, in the sense they&amp;rsquo;ll be well-typed. ML systems like GitHub Copilot are very impressive, but there&amp;rsquo;s always some chance that they&amp;rsquo;ll go completely wrong. Type-driven code suggestions can always be safe!&lt;/p&gt;
&lt;p&gt;Despite how cool type-driven code generation is, and how valuable the safety guarantees that types provide are, I find types to be of greatest aid as a tool for thinking and reasoning about my programs.&lt;/p&gt;
&lt;h2 id=&#34;again-what-are-type-systems&#34;&gt;
  Again, what are type systems?
  &lt;a class=&#34;anchor&#34; href=&#34;#again-what-are-type-systems&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Type systems provide a way of writing down properties of our programs that we would like to be true, and then mechanically checking that those properties hold. Type systems come in all shapes and sizes; some are more expressive than others. Types are also a great tool to use when actually writing code.&lt;/p&gt;
&lt;p&gt;Static type systems provide strong guarantees about program behavior at the expense of some friction in programming: dynamic languages make it easy to throw together a prototype, but can become unwieldy or difficult to maintain once the codebase grows. Gradual typing is an increasingly popular method to get the best of both worlds.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;
  Further reading
  &lt;a class=&#34;anchor&#34; href=&#34;#further-reading&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;d recommend checking out the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_cube&#34;&gt;Lambda Cube&lt;/a&gt;. Other books that I&amp;rsquo;ve read or am reading that have helped me understand types a bit better include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Practical Foundations for Programming Languages&lt;/em&gt;, by Robert Harper&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Types and Programming Languages&lt;/em&gt;, by Benjamin Pierce&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Semantics Engineering with PLT Redex&lt;/em&gt;, by Matthias Felleisen, Robert Findler, and Matthew Flatt&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Programming Languages: Application and Interpretation&lt;/em&gt;, by Shriram Krishnamurthi&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve also written a post about &lt;a href=&#34;https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/&#34;&gt;how to write a type checker&lt;/a&gt; that hopefully should be pretty easy to follow.&lt;/p&gt;
&lt;h2 id=&#34;acknowledgments&#34;&gt;
  Acknowledgments
  &lt;a class=&#34;anchor&#34; href=&#34;#acknowledgments&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks to my advisor &lt;a href=&#34;https://cs.brown.edu/people/bgreenma/&#34;&gt;Ben Greenman&lt;/a&gt; for reading a draft and correcting some inaccuracies in the erasure and gradual typing portions. Thanks also to &lt;a href=&#34;https://solitum.net/&#34;&gt;Scott Wiersdorf&lt;/a&gt; and &lt;a href=&#34;https://github.com/alex0112&#34;&gt;Alex Larsen&lt;/a&gt; for providing feedback and some much-needed polishing.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Gradual typing was first proposed by Jeremy Siek. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Gradual_typing&#34;&gt;Wikipedia page on Gradual Typing&lt;/a&gt; has a decent introduction.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;This should suggest the relationship between sums and products in types and algebra is a deep one!&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Next time someone asks you to write a program that does some static analysis of a semantic property, you can say to them (in your best Vizzini voice of course), &amp;ldquo;you fell for one of the classic blunders! The first is never get involved in a Turing-machine halting problem. The second which is &lt;em&gt;slightly&lt;/em&gt; less well-known, never attempt to use static analysis when semantics are on the line!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;At this point it&amp;rsquo;s generally appropriate to laugh manically before falling over dead from iocane poisoning.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Typed Racket would actually derive the type &lt;code&gt;Positive-Byte&lt;/code&gt; for &lt;code&gt;seven&lt;/code&gt; which is a subtype of Number. Typed Racket&amp;rsquo;s &lt;a href=&#34;https://docs.racket-lang.org/ts-reference/type-ref.html#%28part._.Numeric_.Types%29&#34;&gt;numeric type hierarchy&lt;/a&gt; is quite impressive!&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;The book is available online here: &lt;a href=&#34;https://www.plai.org/&#34;&gt;https://www.plai.org/&lt;/a&gt; The sections on types and type checking are quite excellent.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Make an Emacs Buffer Open the Way You Want</title>
      <link>https://lambdaland.org/posts/2022-12-27_repl_buffer_on_the_right/</link>
      <pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-12-27_repl_buffer_on_the_right/</guid>
      <description>
&lt;p&gt;
Are you tired of having a particular buffer pop open in the wrong direction? Do you wish, for example, that the &lt;a href=&#34;https://www.racket-mode.com/#Edit-buffers-and-REPL-buffers&#34;&gt;Racket REPL&lt;/a&gt; buffer showed up on the right in a vertical split, rather than below in a horizontal one? Look no further. I give you, &lt;code&gt;display-buffer-alist&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-to-list &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;display-buffer-alist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;\\*Racket REPL &amp;lt;/&amp;gt;\\*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;display-buffer-in-direction&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;direction &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; right&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That little snippet will make sure when you hit &lt;code&gt;C-c C-k&lt;/code&gt; inside of a &lt;code&gt;racket-mode&lt;/code&gt; buffer, a REPL will pop up on the right-side instead of on the bottom. I find that much more comfortable to use.&lt;/p&gt;
&lt;p&gt;
The variable &lt;code&gt;display-buffer-alist&lt;/code&gt; is a &lt;span style=&#34;text-decoration: underline;&#34;&gt;fantastically&lt;/span&gt; useful variable. There&amp;#39;s so much to it that I can&amp;#39;t write it up in a blog post. Fortunately, the indomitable Mickey Petersen has written up a &lt;a href=&#34;https://www.masteringemacs.org/article/demystifying-emacs-window-manager&#34;&gt;fantastic article about how Emacs manages windows&lt;/a&gt; which you should definitely check out. Here are just some of the settings that I use:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Configuration for dedicated Eshell buffers
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
If you don&amp;#39;t use &lt;a href=&#34;https://www.masteringemacs.org/article/complete-guide-mastering-eshell&#34;&gt;Eshell&lt;/a&gt; already, it&amp;#39;s definitely worth a look. You might justly wonder, &amp;#34;why should I use something that&amp;#39;s inferior to &lt;code&gt;$TERMINAL_EMULATOR_OF_CHOICE&lt;/code&gt;?&amp;#34; Good question. I still make heavy use of my terminal, but I &lt;em&gt;really&lt;/em&gt; like how I can use completion frameworks like &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt; or &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;Corfu&lt;/a&gt; with &lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;Orderless&lt;/a&gt; to search through history. If you&amp;#39;ve put a bunch of effort into configuring Emacs in those ways, it&amp;#39;s really nice to port that across.&lt;/p&gt;
&lt;p&gt;
I also used Eshell to great effect when I was debugging my implementation of Raft for a class. I had a ton of log messages getting dumped out to the screen, and on my terminal, the lines always wrap. Maybe there&amp;#39;s a setting to enable horizontal scrolling, but I couldn&amp;#39;t find it. With Eshell, that just comes right out of the box.&lt;/p&gt;
&lt;p&gt;
On top of getting long lines to play nice, I can also use the powerful search and filtering operations that I&amp;#39;m used to using to navigate my code to navigate through my terminal history.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot more, but those features have intrigued me enough that I wanted to make it easy to pop open to Eshell whenever I could. Here&amp;#39;s what I use:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Don&amp;#39;t forget to bind these functions to convenient keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;defun&lt;/span&gt; startup-eshell &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Fire up an eshell buffer or open the previous one&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;interactive&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;get-buffer-window&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*eshell*&amp;lt;42&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;delete-window &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;get-buffer-window&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*eshell*&amp;lt;42&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;eshell &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;defun&lt;/span&gt; tab-to-eshell &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Open a tab with eshell. If that tab doesn&amp;#39;t exist, create it. If already in that tab, switch to previous tab.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;interactive&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tab-bar-tab-name-current&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*eshell*&amp;lt;43&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tab-bar-switch-to-prev-tab&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;eshell &lt;span style=&#34;color:#b48ead&#34;&gt;43&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-to-list &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;display-buffer-alist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;\\*eshell\\*&amp;lt;43&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;display-buffer-in-tab&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tab-name &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*eshell*&amp;lt;43&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-to-list &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;display-buffer-alist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;\\*eshell\\*&amp;lt;42&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;display-buffer-in-side-window&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;side &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; left&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;window-width &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;window-height &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; fit-window-to-buffer&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I wanted to be able to open an Eshell buffer on the left side of the window whenever, and I also wanted to be able to make a dedicated tab that I could toggle between easily. With &lt;code&gt;startup-eshell&lt;/code&gt; and &lt;code&gt;tab-to-eshell&lt;/code&gt; respectively, I can do just that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Org-Roam
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I like using &lt;a href=&#34;https://www.orgroam.com&#34;&gt;Org-roam&lt;/a&gt; for note taking. I wanted to make the backlinks buffer always appear in a narrow-ish window on the right. Here&amp;#39;s all the config needed:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Dedicated side window for backlinks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-to-list &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;display-buffer-alist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;\\*org-roam\\*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;display-buffer-in-side-window&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;side &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; right&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;window-width &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0.4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;window-height &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; fit-window-to-buffer&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Things to note
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
There&amp;#39;s a difference between &lt;code&gt;display-buffer-in-side-window&lt;/code&gt; and &lt;code&gt;display-buffer-in-direction&lt;/code&gt;: the first, if I&amp;#39;m not mistaken, makes a &lt;em&gt;dedicated window&lt;/em&gt;, which you can read about on &lt;a href=&#34;https://www.masteringemacs.org/article/demystifying-emacs-window-manager&#34;&gt;Mickey Petersen&amp;#39;s site&lt;/a&gt;. The short of it is, that buffer will stay in that space and will not move, even if you&amp;#39;re used to your windows automatically re-laying out with e.g. &lt;code&gt;evil-mode&lt;/code&gt; enabled.&lt;/p&gt;
&lt;p&gt;
The second is a little gentler, at least in my mind. It asks Emacs to open the buffer in one direction rather than another, and it&amp;#39;s just as if you had done &lt;code&gt;C-x 2&lt;/code&gt; or &lt;code&gt;C-x 3&lt;/code&gt; for up/down or left/right respectively.&lt;/p&gt;
&lt;p&gt;
Yet again, this is another testament to the fantastic power and flexibility of Emacs. This isn&amp;#39;t a &lt;em&gt;life-changing&lt;/em&gt; configuration &lt;em&gt;per se&lt;/em&gt;, but it definitely makes Emacs more comfortable to use for me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What I Like in a Font for Code</title>
      <link>https://lambdaland.org/posts/2022-12-05_what_i_like_in_a_coding_font/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-12-05_what_i_like_in_a_coding_font/</guid>
      <description>
&lt;p&gt;
I&amp;#39;m well aware that I may have a bit of an &lt;a href=&#34;https://lambdaland.org/posts/2022-08-01_a_new_font/&#34;&gt;obsession with fonts&lt;/a&gt;. I don&amp;#39;t think that&amp;#39;s too unusual for someone who works in tech, however. Sites like &lt;a href=&#34;https://www.programmingfonts.org/&#34;&gt;Programming Fonts&lt;/a&gt; exist to let people test drive and compare a bunch of different fonts. Just for fun, I thought I&amp;#39;d write up some of the features I look for in a programming font that I&amp;#39;ve come to deliberately pick out.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Critical letter forms: &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;; &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
These are probably the most important letters to get write in any font that&amp;#39;s meant to be hyper-legible: lowercase &lt;code&gt;l&lt;/code&gt; must be easily distinguishable from an uppercase &lt;code&gt;I&lt;/code&gt; or the number &lt;code&gt;1&lt;/code&gt;, and the lowercase &lt;code&gt;i&lt;/code&gt; should stand out nicely as well.&lt;/p&gt;
&lt;p&gt;
I like to foot of the lowercase &lt;code&gt;l&lt;/code&gt; to be curved to more easily distinguish it from the number &lt;code&gt;1&lt;/code&gt;. For example, this is what the letters look like in my &lt;a href=&#34;https://sr.ht/~ashton314/iosevka-output/&#34;&gt;Iosevka Output&lt;/a&gt; build:&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://lambdaland.org/img/iosevka_output_amb1.png&#34; alt=&#34;/img/iosevka_output_amb1.png&#34; title=&#34;/img/iosevka_output_amb1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
I find that that helps readability. I go back and forth as to whether or not I like the foot of the lowercase &lt;code&gt;i&lt;/code&gt; to be likewise curved. My current font doesn&amp;#39;t have that set, but I used to configure &lt;a href=&#34;https://input.djr.com/&#34;&gt;Input Mono&lt;/a&gt; to work like that.&lt;/p&gt;
&lt;p&gt;
Zeros must be distinct from capital &lt;code&gt;O&lt;/code&gt;. That&amp;#39;s usually pretty easy for a coding font to get right. I personally like the slash—I think that&amp;#39;s what I grew up with. Nothing wrong with a dot though.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Increased pickiness: &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I like double-storey &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; rather than their simpler counterparts. A single-storey &lt;code&gt;a&lt;/code&gt; looks a little too much like a lowercase &lt;code&gt;o&lt;/code&gt;, and I find the &lt;code&gt;g&lt;/code&gt; without two loops looks too much like a lowercase &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://lambdaland.org/img/iosevka_output_amb2.png&#34; alt=&#34;/img/iosevka_output_amb2.png&#34; title=&#34;/img/iosevka_output_amb2.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Width
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Narrow fonts appeal to a lot of people. I don&amp;#39;t get it, however. I like how gentle an extended font is on the eyes. One of the reasons why I liked Input Mono so much was because it had nice, comfy, wide characters. Compare the readability:&lt;/p&gt;
&lt;p&gt;




&lt;div class=&#34;book-tabs&#34;&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-normal-and-narrow&#34; id=&#34;tabs-normal-and-narrow-0&#34; checked=&#34;checked&#34; /&gt;
  &lt;label for=&#34;tabs-normal-and-narrow-0&#34;&gt;Normal&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;img src=&#34;https://lambdaland.org/img/iosevka_output_normal.png&#34; alt=&#34;/img/iosevka_output_normal.png&#34; title=&#34;/img/iosevka_output_normal.png&#34; /&gt;&lt;/div&gt;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-normal-and-narrow&#34; id=&#34;tabs-normal-and-narrow-1&#34;  /&gt;
  &lt;label for=&#34;tabs-normal-and-narrow-1&#34;&gt;Narrow&lt;/label&gt;
  &lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;img src=&#34;https://lambdaland.org/img/iosevka_output_narrow.png&#34; alt=&#34;/img/iosevka_output_narrow.png&#34; title=&#34;/img/iosevka_output_narrow.png&#34; /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I find the wider font to be much more readable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Ligatures
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Nope. Just nope. I like to see exactly what characters are in my files. See &lt;a href=&#34;https://practicaltypography.com/ligatures-in-programming-fonts-hell-no.html&#34;&gt;Matthew Butterick&amp;#39;s take&lt;/a&gt; for more reasons why.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Never surrender your password</title>
      <link>https://lambdaland.org/posts/2022-11-22_never_surrender/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-11-22_never_surrender/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;https://arxiv.org/pdf/2211.05824.pdf&#34;&gt;a study&lt;/a&gt; that &lt;a href=&#34;https://arstechnica.com/information-technology/2022/11/half-of-computer-repairs-result-in-snooping-of-sensitive-data-study-finds/&#34;&gt;Ars Technica reported on&lt;/a&gt;, researchers found that an alarming number of computer repair technicians snooped through clients&amp;#39; devices—and female clients were &lt;em&gt;way&lt;/em&gt; more likely to have their data accessed. Yikes!&lt;/p&gt;
&lt;p&gt;
I once had to take my laptop to get some repairs done. The &lt;code&gt;TAB&lt;/code&gt; key on my 2016 MacBook Pro had started glitching, and that wasn&amp;#39;t going to fly when I was working on code and needed my tab completions and app switching to be seamless. I took my laptop to the Apple-authorized repair service at my school. The surly technician confirmed my warranty and asked me to fill out an intake form for my computer.&lt;/p&gt;
&lt;p&gt;
One of the fields on that form was for the root password to my computer. I noted that this form wasn&amp;#39;t going to be encrypted, and so I declined to give the password to decrypt my hard drive. (To be honest, even if I could have somehow verified that the form &lt;em&gt;were&lt;/em&gt; going to be stored securely, I wouldn&amp;#39;t have given up the password.) The technician got a little huffy and said that they needed to be able to run diagnostics to make sure everything was done correctly, etc. This was hard to believe, since it was a hardware problem that could be handled without any software intervention. I refused again; I told them (and wrote in the notes field of the form for any other support technicians) that I worked nearby and could come enter my password if needed within two minutes of getting a call.&lt;/p&gt;
&lt;p&gt;
The technician didn&amp;#39;t like that, but I was insistent. Eventually they relented. I didn&amp;#39;t have to give up my password and the repairs were completed without any problems. I was  never called to input my password. I doubt something nefarious would have happened at &lt;em&gt;that&lt;/em&gt; campus repair shop, but you never know.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s too much on your hard drive that cannot leak: information about your bank, access to your email, saved passwords, photos, journal entries, etc. Never surrender your password. There may be times when there &lt;em&gt;is&lt;/em&gt; a legitimate need for the master password to run some diagnostics, but you should if at all possible be present to put that password in yourself and monitor closely what is done with your hardware. Go out of your way to find reputable repair shops. It will be worth the privacy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuations—what are they?</title>
      <link>https://lambdaland.org/posts/2022-11-17_continutations/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-11-17_continutations/</guid>
      <description>&lt;p&gt;
I had a friend ask me what &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuation&#34;&gt;continuations&lt;/a&gt; are, and why they&amp;#39;re useful.
There&amp;#39;s a ton of literature about continuations; this is just a simple example meant to showcase something small and hopefully grokkable.&lt;/p&gt;
&lt;p&gt;
You will need to understand a little bit of &lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt;, but if you know any &lt;a href=&#34;http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-2.html#node_toc_start&#34;&gt;Scheme&lt;/a&gt;, that should be good enough. If you just want a quick primer, check out &lt;a href=&#34;https://learnxinyminutes.com/docs/racket/&#34;&gt;Learn X in Y minutes for Racket&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;src src-racket&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;#lang &lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;racket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;;; Export these symbols&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;provide&lt;/span&gt; fail pick non-deterministic-factor&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;;; Global stack of choices (only visible to this module)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; *choices* &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;;; Pop a value off of the alternate choices stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fail&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; *choices*&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8fbcbb&#34;&gt;#f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;next-choice &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;car&lt;/span&gt; *choices*&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;set!&lt;/span&gt; *choices* &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; *choices*&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;next-choice&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This next function &lt;code&gt;pick&lt;/code&gt; is where we capture the continuation. I&amp;#39;ve named it
&lt;code&gt;return-from-pick&lt;/code&gt; to illustrate that when you call this function, it
will jump back to the point in the code where &lt;code&gt;pick&lt;/code&gt; returns.
&lt;strong&gt;However&lt;/strong&gt;, this works even if you use the continuation &lt;em&gt;after&lt;/em&gt; the
thing the called &lt;code&gt;pick&lt;/code&gt; itself has returned.&lt;/p&gt;
&lt;p&gt;
Internally, the continuation is basically &lt;code&gt;stack + program counter&lt;/code&gt;. It answers
the question &amp;#34;where does this value go to when I return it?&amp;#34;&lt;/p&gt;
&lt;p&gt;
We &amp;#34;install&amp;#34; the continuation by calling it like a function. It&amp;#39;s a first-class
value, though, so we can save it in a closure on a stack and call it as many
times as we want.&lt;/p&gt;
&lt;div class=&#34;src src-racket&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;pick vals&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;null?&lt;/span&gt; vals&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fail&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; fallback if there&amp;#39;s nothing to choose&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;my-choice &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;car&lt;/span&gt; vals&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; pick something&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let/cc&lt;/span&gt; return-from-pick        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; capture the continutation right here!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Push the rest of the options into the *choices* stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;other-choice &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cdr&lt;/span&gt; vals&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;set!&lt;/span&gt; *choices* &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;λ&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;return-from-pick other-choice&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; *choices*&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; This is how we return from the `pick&amp;#39; function with a particular value.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;return-from-pick my-choice&lt;span style=&#34;color:#eceff4&#34;&gt;)))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we have to use our operator. Let&amp;#39;s write a factoring function that non-deterministically picks a factor. We test it to make sure that the one we picked works, and if it did, we return it. Otherwise, we tell the computer that we &lt;code&gt;fail&lt;/code&gt; ed.&lt;/p&gt;
&lt;div class=&#34;src src-racket&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;non-deterministic-factor n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Pick some factor, dunno which&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;some-factor &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;pick &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;))])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;; Did we pick a factor?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;zero?&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;modulo&lt;/span&gt; n some-factor&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        some-factor                     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; yes we did!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fail&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;                       &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; oops, that was the wrong one&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you save those snippets into a file called &lt;code&gt;amb.rkt&lt;/code&gt; and try running it, you should see something like:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ racket -it amb.rkt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (non-deterministic-factor 42)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (fail)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (fail)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (fail)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (fail)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (fail)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (fail)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (fail)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;,quit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Moral of the story: we just implemented McCarthy&amp;#39;s non-deterministic/ambiguous
&lt;code&gt;amb&lt;/code&gt; operator which &lt;em&gt;picks&lt;/em&gt; some value, tries it out, then seemingly backtracks
no matter the code to the point where the value gets picked if the &lt;code&gt;fail&lt;/code&gt;
function is ever invoked. Moreover, this was all implemented in &lt;em&gt;userland&lt;/em&gt;: no
special compiler constructs, no macros, no nuffin&amp;#39;.&lt;/p&gt;
&lt;p&gt;
In reality, what we did was we saved the stack and program counter just before we returned from &lt;code&gt;pick&lt;/code&gt; with our choice. When we call &lt;code&gt;fail&lt;/code&gt;, we reinstantiate that stack frame but return a different value. The program proceeds as if we had returned with that value in the first place. (Though note that changes on the heap or the file system, etc. will &lt;em&gt;not&lt;/em&gt; be reverted. It&amp;#39;s only in side-effect free code that the illusion of time travel will be complete. You could stick a &lt;code&gt;print&lt;/code&gt; statement in the &lt;code&gt;fail&lt;/code&gt; function to see just how many times it gets called as the program searches for a path that doesn&amp;#39;t call &lt;code&gt;fail&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;
Continuations can also be used to implement cooperative threading, job queues,
and exception handling if you language doesn&amp;#39;t support those. In each case, you
can extend the language with continuations and functions without the rest of the
code having to worry about it. It&amp;#39;s a very powerful, robust, and non-leaky
abstraction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unix as a tool forge</title>
      <link>https://lambdaland.org/posts/2022-11-07_unix_philosophy/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-11-07_unix_philosophy/</guid>
      <description>
&lt;p&gt;
Wikipedia&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; cites a few different sources on what &amp;#34;Unix Philosophy&amp;#34; is. Peter Salus summarizes it as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Write programs that do one thing and do it well.&lt;/li&gt;
&lt;li&gt;Write programs to work together.&lt;/li&gt;
&lt;li&gt;Write programs to handle text streams, because that is a universal interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That second bullet point is my favorite: making &lt;em&gt;composable&lt;/em&gt; programs rather than monolithic systems. In this way, Unix is designed to be a forge for easily building new tools. The first rule—writing programs that do one thing well—is largely a means to the second. When you have building blocks that take simple shapes, you can compose them easily like Lego pieces.&lt;/p&gt;
&lt;p&gt;
I think that second goal is what makes Unix win: instead of providing you with every tool under the sun, you get a set of composable tools that allow you to construct better tools perfectly tailored to your problem. No one hacking on a PDP-11 thought to make an easy way to publish a blog like this one, but they put the framework in place to let &lt;em&gt;me&lt;/em&gt; put together the tools I need to deploy this very post with a single command.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
How Emacs fits inside of Unix philosophy
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
One might argue that Emacs goes against Unix philosophy, for it can quite literally do pretty much everything.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; But that only violates the first rule—if you consider Emacs to be a tool forge, then Emacs is quite in line with the Unix philosophy. Emacs provides functions that all work on the buffer or bits of text, and these can all be composed to craft a work environment to fit your needs. &lt;a href=&#34;https://git.sr.ht/~ashton314/.dotfiles&#34;&gt;I use&lt;/a&gt; over 100 different packages, and they all play nice together!&lt;/p&gt;
&lt;p&gt;
I have come to view Emacs as my primary forge. It&amp;#39;s my layer on top of Unix, if you will. If I have Emacs customized how I like it, it doesn&amp;#39;t matter too much what operating system lives underneath: I can get a lot of work done. I used to view Emacs just as a tool, and I used it exclusively as a text editor. As time went on, though, I began to value the extreme keyboard-centric control Emacs gave me over my system. That&amp;#39;s why I &lt;a href=&#34;https://lambdaland.org/posts/2020-07-22-gui-emacs/&#34;&gt;moved from the terminal to the GUI&lt;/a&gt; version of Emacs: I wanted to have more modifiers available to bind functions to.&lt;/p&gt;
&lt;p&gt;
Many people use Emacs exclusively as a text editor, and that&amp;#39;s fine. Usually these people have gotten comfortable with the command line, which is just another kind of tool forge. The great thing is both places make building new tools easy. Whatever your toolkit (though I do recommend you add Emacs to it if it&amp;#39;s not already there!) make sure you can build new tools with ease.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Further Reading
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=33522735&#34;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A kind chap sent me a link to &lt;a href=&#34;https://tilde.town/~ramin_hal9001/articles/emacs-fulfills-the-unix-philosophy.html&#34;&gt;this blog post&lt;/a&gt; as well as &lt;a href=&#34;https://amodernist.com/texts/emacs-unix.html&#34;&gt;their own thoughts&lt;/a&gt;, which seemed like good things to link to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Footnotes
&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_philosophy&#34;&gt;https://en.wikipedia.org/wiki/Unix_philosophy&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-2&#34;&gt;&lt;a href=&#34;#footnote-reference-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;Emacs once ran Germany&amp;#39;s flight control software. Please don&amp;#39;t try this at home. &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/lly7po/comment/gnvzisy&#34;&gt;https://www.reddit.com/r/emacs/comments/lly7po/comment/gnvzisy&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Yet another blog revamp</title>
      <link>https://lambdaland.org/posts/2022-10-26_yet_another_blog_theme/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-10-26_yet_another_blog_theme/</guid>
      <description>&lt;p&gt;Yes, it&amp;rsquo;s time to redo my blog again.&lt;/p&gt;
&lt;p&gt;This time I found an ultra light-weight blog theme. This page here is under 100KB!&lt;/p&gt;
&lt;p&gt;I wanted to make something that acts more like a homepage for my research, rather than a blog. I still have all my blog posts, but now the focus will be on a more professional presentation of my work.&lt;/p&gt;
&lt;p&gt;This theme is really what I&amp;rsquo;ve wanted all along: a home page with a max-width for the text, table of contents, and built-in local search!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email, getting work done, and corporations or: Outlook considered harmful</title>
      <link>https://lambdaland.org/posts/2022-08-28_keep_email_federated/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-08-28_keep_email_federated/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s hard to overstate how important email is in our modern world. Even as hip new platforms like Slack &amp;amp;co. gain traction in the workplace, so much communication takes place in a crusty old medium that&amp;#39;s outlived every purported &amp;#34;email killer&amp;#34;. Where does it get its staying power from?&lt;/p&gt;
&lt;p&gt;
Email &lt;a href=&#34;https://en.wikipedia.org/wiki/History_of_email&#34;&gt;predates&lt;/a&gt; much of the Internet as we know it today. Its current incarnation first emerged in the early 80s, though it has roots in earlier forms of digital messaging from as far back as the 60s. &amp;#34;Email&amp;#34; is roughly three related protocols: &lt;a href=&#34;https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol&#34;&gt;SMTP&lt;/a&gt;, &amp;#34;Simple Mail Transfer Protocol&amp;#34;, which deals with the &lt;em&gt;sending&lt;/em&gt; of mail; &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol&#34;&gt;IMAP&lt;/a&gt;, or &amp;#34;Internet Message Access Protocol&amp;#34;, which allows mail clients to fetch mail; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Post_Office_Protocol&#34;&gt;POP3&lt;/a&gt;, or &amp;#34;Post Office Protocol&amp;#34;, an older mail fetching protocol largely superseded by IMAP.&lt;/p&gt;
&lt;p&gt;
One neat thing about email is that you don&amp;#39;t have to use a particular &lt;em&gt;email client&lt;/em&gt; to send and receive messages: it doesn&amp;#39;t matter if you use Gmail&amp;#39;s web interface, their mobile app, or Thunderbird, or Apple&amp;#39;s built-in email program, or even text-based mail clients like &lt;a href=&#34;https://en.wikipedia.org/wiki/Mutt_(email_client)&#34;&gt;mutt&lt;/a&gt;—everyone can still talk to each other.&lt;/p&gt;
&lt;p&gt;
Moreover, different email clients have different strengths: Gmail, for instance, is so simple that your grandma can (and probably does) use it to send you pictures or reminders about the family reunion next weekend. Academics, who typically have to deal with &lt;a href=&#34;https://parentheticallyspeaking.org/articles/bandit-inbox/&#34;&gt;overwhelming heaps of emails&lt;/a&gt;, can use keyboard-driven mail clients to digest all these messages. (See &lt;a href=&#34;https://github.com/rougier/mu4e-dashboard&#34;&gt;Nicolas P. Rougier&amp;#39;s mu4e-dashboard package&lt;/a&gt; for an example of what some academics do.)&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;The point&lt;/strong&gt;: email derives its staying power from how the &lt;em&gt;common platform&lt;/em&gt; (SMTP, IMAP) is decoupled from &lt;em&gt;how one interacts with it&lt;/em&gt;. (mail clients) It is malleable and ubiquitous, and everyone can adapt it for their needs.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Outlook is faux email
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I&amp;#39;m starting a new position as a research assistant at the University of Utah, and I&amp;#39;m elated to be here. However, the university is pushing everyone to use their MS Outlook email system, and they&amp;#39;ve disabled SMTP and IMAP access. The mail client that I use (&lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e/Why-another-e_002dmail-client.html&#34;&gt;mu4e&lt;/a&gt; for those wondering) is built to work with these &lt;em&gt;common&lt;/em&gt;, &lt;em&gt;decades-old&lt;/em&gt; standards of IMAP and SMTP. I can&amp;#39;t use the built-in OS&amp;#39;s mail client or (heaven forbid) the web client nearly as effectively.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll be trying some work-arounds, but I&amp;#39;m not optimistic that anything will be resolved in the near future. So for now I&amp;#39;m stuck using the mail client provided by my operating system for work-related email. It&amp;#39;s really a shame because some brilliant Emacs users have made managing email pleasant and effective.&lt;/p&gt;
&lt;p&gt;
Why would the university block the tools that I need to do my job effectively? I have a theory on that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The theory of two companies
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
This also goes by the name &amp;#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/Staff_and_line&#34;&gt;staff and line&lt;/a&gt;&amp;#34;.&lt;/p&gt;
&lt;p&gt;
Inside every organization there are two smaller companies: company 1 and company 2.&lt;/p&gt;
&lt;p&gt;
Company 1 is concerned with the &lt;em&gt;product&lt;/em&gt; of the organization. In a tech firm for instance, company 1 is usually made up of engineering, product, sales, and marketing. (Broadly speaking.) In a university, company 1 is the faculty who are there to teach and do research.&lt;/p&gt;
&lt;p&gt;
Company 2 is concerned with running the organization. In a tech firm, this includes IT, HR, middle management, etc. In a university, company 2 is comprised of the staff and administration.&lt;/p&gt;
&lt;p&gt;
The primary job of company 2 is to support company 1&amp;#39;s operations. However, as is the nature with any large system, company 2 often begins to put some of its priorities over those of company 1&amp;#39;s. I saw this happen in a tech company I left a few years ago when management mandated that developers track the time they spent on each ticket in our &lt;del&gt;scrum&lt;/del&gt; waterfall system &lt;em&gt;down to the minute&lt;/em&gt;. This wasn&amp;#39;t a move that helped the developers in any way—this was just for management to feel like they had some better control of the situation.&lt;/p&gt;
&lt;p&gt;
Likewise with university email: no one I know would elect to use Outlook as their email platform. It seems the university administration has deemed it better to force everyone into a closed system to avoid the potential of lawsuits. It helps the university as an organization, but it gets in the way of the faculty&amp;#39;s work.&lt;/p&gt;
&lt;p&gt;
I get nervous when company 2 starts putting its priorities over company 1&amp;#39;s. To some extent it&amp;#39;s necessary, but it can be a slippery slope into bureaucratic paralyzation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Today I learned: Vertical monitors and subpixel anti-aliasing</title>
      <link>https://lambdaland.org/posts/2022-08-11_til_vertical_monitors/</link>
      <pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-08-11_til_vertical_monitors/</guid>
      <description>&lt;p&gt;
Something I learned today from a coworker: if you turn your monitor sideways, &lt;a href=&#34;https://en.wikipedia.org/wiki/Subpixel_rendering&#34;&gt;subpixel anti-aliasing&lt;/a&gt; gets completely broken. This isn&amp;#39;t as much of an issue on today&amp;#39;s high-dpi displays, but for anything lower than a 4k screen, the effect can be noticeable.&lt;/p&gt;
&lt;p&gt;
Just a little interesting thing I learned today. Thanks to my good, knowledgeable friend and coworker Jonner Steck!&lt;/p&gt;
&lt;p&gt;
Also, while we&amp;#39;re on the topic of font rendering, I&amp;#39;ve updated &lt;a href=&#34;https://git.sr.ht/~ashton314/iosevka-output&#34;&gt;Iosevka Output&lt;/a&gt; to more closely match Input Mono: the cross-bar on the &lt;code&gt;f&lt;/code&gt; now lines up nicely with the x-height. However, I kept the hook on the &lt;code&gt;f&lt;/code&gt; open; I think it&amp;#39;s more legible than Input in that regard. I&amp;#39;ve finally switched over from preferring Input and seeing Iosevka as weird, to now seeing my custom font as the familiar, good-looking one and the Input, though still very good-looking, is a little less familiar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A New Font</title>
      <link>https://lambdaland.org/posts/2022-08-01_a_new_font/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-08-01_a_new_font/</guid>
      <description>
&lt;p&gt;
This week I created a custom build of the &lt;a href=&#34;https://github.com/be5invis/Iosevka&#34;&gt;Iosevka&lt;/a&gt; font. I&amp;#39;ve used &lt;a href=&#34;https://input.djr.com/&#34;&gt;Input Mono&lt;/a&gt; for a long time now, and was very happy with it. However, it was missing a few glyphs that I wanted to use. Moreover, I didn&amp;#39;t have a license for the Input font to use on e.g. my blog. Iosevka is &lt;a href=&#34;https://github.com/be5invis/Iosevka/blob/master/doc/custom-build.md&#34;&gt;stupendously customizable&lt;/a&gt;, so I thought I&amp;#39;d see if I could get something close to Input&amp;#39;s styles.&lt;/p&gt;
&lt;p&gt;
Iosevka&amp;#39;s default style is &lt;em&gt;extremely&lt;/em&gt; narrow. However, I discovered that the width of Iosevka &lt;em&gt;extended&lt;/em&gt; at 13pt matched Input at 12pt exactly. Here&amp;#39;s a side-by-side comparison: the first picture is with Input Mono, and the second is with my new &lt;a href=&#34;https://git.sr.ht/~ashton314/iosevka-output&#34;&gt;Iosevka Output&lt;/a&gt; font:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://lambdaland.org/img/input_view.png&#34; alt=&#34;/img/input_view.png&#34; title=&#34;/img/input_view.png&#34; /&gt;&lt;figcaption&gt;
Input Mono at 12pt font
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;https://lambdaland.org/img/iosevka_view.png&#34; alt=&#34;/img/iosevka_view.png&#34; title=&#34;/img/iosevka_view.png&#34; /&gt;&lt;figcaption&gt;
Iosevka Output at 13pt font
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
I loose a few lines with the Iosevka font, but that&amp;#39;s a deliberate choice as its ascenders are pretty tall. I originally had &lt;code&gt;leading = 1100&lt;/code&gt; in the build plan, which matched Input exactly, but I decided that this was more legible.&lt;/p&gt;
&lt;p&gt;
It wasn&amp;#39;t that hard either. Turns out, there&amp;#39;s a predefined stylistic set (&lt;code&gt;ss18&lt;/code&gt;) that matches almost all the Input characters well. Some features that I made sure were present:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Double-storey &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;: I find this more legible as I don&amp;#39;t mistake these characters for &lt;code&gt;o&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; respectively.&lt;/li&gt;
&lt;li&gt;Tailed-and-serif &lt;code&gt;l&lt;/code&gt;: the curved bottom differentiates it clearly from &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;I&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&amp;#34;Term&amp;#34;-style spacing: I didn&amp;#39;t like characters such as &lt;code&gt;→&lt;/code&gt; taking up more than a single character&amp;#39;s width. Looks pretty, but messes up some of my UI elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few more tweaks that I&amp;#39;ve made to the font, and I&amp;#39;m likely to tweak it some more. I&amp;#39;m still getting used to this Iosevka style, but I&amp;#39;m going to drive it for a week or so to give it a fair shake. It&amp;#39;s growing on me for sure.&lt;/p&gt;
&lt;p&gt;
If you want to try it out, head over to &lt;a href=&#34;https://git.sr.ht/~ashton314/iosevka-output/refs/0.2.0&#34;&gt;my Sourcehut repo&lt;/a&gt; and download the build artifact.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Building Iosevka
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
You&amp;#39;ll need &lt;code&gt;nodejs&lt;/code&gt; (ugh) and &lt;code&gt;ttfautohint&lt;/code&gt; installed. See the &lt;a href=&#34;https://github.com/be5invis/Iosevka/blob/master/doc/custom-build.md&#34;&gt;docs for custom Iosevka builds&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;
When you clone the Iosevka repository, be sure to not clone all 20 Gb of history:&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  git clone --depth &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; https://github.com/be5invis/Iosevka&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There&amp;#39;s a build plan for my &amp;#34;Iosevka Output&amp;#34; font &lt;a href=&#34;https://git.sr.ht/~ashton314/iosevka-output&#34;&gt;here&lt;/a&gt; on my Sourcehut account. You can also download prebuilt &lt;code&gt;.ttf&lt;/code&gt; files from the &lt;a href=&#34;https://git.sr.ht/~ashton314/iosevka-output/refs&#34;&gt;refs listing&lt;/a&gt;: just click on the tag name to access the build artifacts. At time of writing, there&amp;#39;s only one set of prebuilt fonts under the &lt;a href=&#34;https://git.sr.ht/~ashton314/iosevka-output/refs/0.2.0&#34;&gt;0.2.0&lt;/a&gt; tag—I was still figuring out how to get everything wired up when I pushed the previous two tags.&lt;/p&gt;
&lt;p&gt;
Once you&amp;#39;ve got the build repo cloned, copy my &lt;code&gt;private-build-plans.toml&lt;/code&gt; file into the root of the Iosevka directory, and run according to the directions in the Iosevka project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to write a type checker/type inferrer with good error messages</title>
      <link>https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-07-27_how_to_write_a_type_checker/</guid>
      <description>&lt;p&gt;All the source for this may be found on my &lt;a href=&#34;https://git.sr.ht/~ashton314/type-error-research&#34;&gt;SourceHut repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;synopsis&#34;&gt;
  Synopsis
  &lt;a class=&#34;anchor&#34; href=&#34;#synopsis&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Experimental type checker/inferer for a simple lambda calculus&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;
  Description
  &lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This is a type inference system for a little language. (Described below.) It uses a fusion of type inference algorithms from PLAI, ESP, and μKanren. (See &lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Broadly speaking, our type inference engine works by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;generating &lt;em&gt;typing constraints&lt;/em&gt; from the program&lt;/li&gt;
&lt;li&gt;solving those constraints&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&amp;rsquo;ll describe each of those in more detail.&lt;/p&gt;
&lt;h3 id=&#34;language-description&#34;&gt;
  Language description
  &lt;a class=&#34;anchor&#34; href=&#34;#language-description&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We implement a really simple language that includes features such as the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;                                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; numeric literals&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;#t&lt;/span&gt;                                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; booleans&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;x &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                           &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; single-variable let; binary math operators&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt; y &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+ &lt;/span&gt;y &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;                                 &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; single-argument anonymous functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt; x x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;#t&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;; let-polymorphism; conditionals&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At time of writing, the let-polymorphism &lt;em&gt;works&lt;/em&gt; though it&amp;rsquo;s still a little rough.&lt;/p&gt;
&lt;h3 id=&#34;type-checking-vs-type-inference&#34;&gt;
  Type checking vs type inference
  &lt;a class=&#34;anchor&#34; href=&#34;#type-checking-vs-type-inference&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Type checking&lt;/em&gt; a step in language implementation where type annotations supplied by the user are mechanically checked prior to compiling or execution. Any time when the checker can determine that a value of the wrong type flows to a place (e.g. a variable, argument to a function, etc) it is called a &lt;em&gt;type error&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Type inference&lt;/em&gt; saves programmers from having to write out all type annotations. Most times (though not always) it is possible to &lt;em&gt;infer&lt;/em&gt; what the type of a variable should be. Literal values are really easy, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; foo &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The variable &lt;code&gt;foo&lt;/code&gt; clearly should have some kind of integer type. However, type inference is more powerful than just inferring variable types from their initial values; for example, consider this Rust snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; add_1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;          &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// (lambda x: x + 1) for you Python programmers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What should type should the variable &lt;code&gt;x&lt;/code&gt; have? Well, we know that it gets passed to &lt;code&gt;+&lt;/code&gt;, so definitely some numeric type. Although the programmer doesn&amp;rsquo;t explicitly annotate the parameter &lt;code&gt;x&lt;/code&gt; with its type here, we can tell using information elsewhere in the program. This is the role of type inference.&lt;/p&gt;
&lt;h4 id=&#34;why-do-we-care-about-type-inference&#34;&gt;
  Why do we care about type inference?
  &lt;a class=&#34;anchor&#34; href=&#34;#why-do-we-care-about-type-inference&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Type inference saves us a lot of typing. Moreover, if we are trying to retrofit a type system onto an existing system that has a lot of code written in it already, it would be nice to not have to require users of the language to go back and annotate all their existing code. We can still report type errors as we find them—they would have been caught at runtime anyway—ideally, existing code should just work, and future code should turn out safer.&lt;/p&gt;
&lt;h3 id=&#34;constraint-generation&#34;&gt;
  Constraint generation
  &lt;a class=&#34;anchor&#34; href=&#34;#constraint-generation&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;what-are-constraints&#34;&gt;
  What are constraints?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-are-constraints&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Constraints&lt;/em&gt; are statements about what how types and bits of a program relate to each other. For example, here is a little program with some constraints illustrated:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://lambdaland.org/img/constraint-illustration.png&#34;
    alt=&#34;Figure 1: A little Rust program with some type relationships illustrated.&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;A little Rust program with some type relationships illustrated.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Even though none of the variables have explicit type annotations, we know that &lt;code&gt;x&lt;/code&gt; must be some kind of number, &lt;code&gt;add_1&lt;/code&gt; is a function &lt;code&gt;ℕ→ℕ&lt;/code&gt;, and &lt;code&gt;y_plus_1&lt;/code&gt; must be a number because it&amp;rsquo;s the same as the return value as &lt;code&gt;add_1&lt;/code&gt;. Moreover, whatever &lt;code&gt;y&lt;/code&gt; is, it has to match the input type of &lt;code&gt;add_1&lt;/code&gt; as well.&lt;/p&gt;
&lt;h4 id=&#34;how-do-we-generate-constraints&#34;&gt;
  How do we generate constraints?
  &lt;a class=&#34;anchor&#34; href=&#34;#how-do-we-generate-constraints&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;At time of writing, we only have equality constraints, which state that some particular expression must have the &lt;em&gt;same&lt;/em&gt; type as another type expression. Later we will likely add subtype constraints or union constraints which will involve some form of back-tracking.&lt;/p&gt;
&lt;p&gt;Our algorithm walks through the AST of a program and emits a list of constraints on particular points of the AST. Please see one of the listed &lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Most explanations (PLAI, EPL) of a type inference algorithm dump the generated constraints into a set. Here we diverge somewhat from the literature: we gather the constraints into a list, which keeps the constraints in rough order of when we encountered those constraints in the program. This ordering is important for good error generation later on.&lt;/p&gt;
&lt;p&gt;We will likely play with how these constraints are ordered in the future.&lt;/p&gt;
&lt;p&gt;A good excerpt from PLAI:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are constraints? They are simply statements about the types of expressions. In addition, though the binding instances of variables are not expressions, we must calculate their types too (because a function requires both argument and return types). In general, what can we say about the type of an expression?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That it is related to the type of some identifier.&lt;/li&gt;
&lt;li&gt;That it is related to the type of some other expression.&lt;/li&gt;
&lt;li&gt;That it is a number. [/Or in the case of this interpreter, that it is a boolean./]&lt;/li&gt;
&lt;li&gt;That it is a function, whose domain and range types are presumably further constrained.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;unification&#34;&gt;
  Unification
  &lt;a class=&#34;anchor&#34; href=&#34;#unification&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We use ideas from the &lt;code&gt;unify&lt;/code&gt; algorithm in &lt;a href=&#34;#resources&#34;&gt;μKanren&lt;/a&gt;: we have a &lt;code&gt;walk&lt;/code&gt; function along with a substitution list that we can modify non-destructively. This differs from how PLAI and EPL describe &lt;code&gt;unify&lt;/code&gt;, which often does destructive replacement of variables in the substitution list.&lt;/p&gt;
&lt;p&gt;I think this algorithm has the benefit of being a little simpler to understand, once the purpose of the &lt;code&gt;walk&lt;/code&gt; function is grokked. It does mean that you must invoke &lt;code&gt;(walk ast-chunk substitution-list)&lt;/code&gt; in order to find the type of the AST node.&lt;/p&gt;
&lt;p&gt;See the &lt;code&gt;infer-and-annotate&lt;/code&gt; and &lt;code&gt;patch-annotations&lt;/code&gt; functions for a demonstration of how the substitution list along with the original tagged AST can be used to get the type for every node in the program.&lt;/p&gt;
&lt;h4 id=&#34;constructed-types-or-higher-order-types&#34;&gt;
  Constructed types, or higher-order types
  &lt;a class=&#34;anchor&#34; href=&#34;#constructed-types-or-higher-order-types&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Our simple language doesn&amp;rsquo;t have (yet) types like &lt;code&gt;(listof ℕ)&lt;/code&gt;, but it could if we wanted to let it. Use function calls as a model for how we would handle these cases. From PLAI:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have used numbers as a stand-in for all form of base types; functions, similarly, stand for all constructed types, such as &lt;code&gt;listof&lt;/code&gt; and &lt;code&gt;vectorof&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;error-message-generation&#34;&gt;
  Error message generation
  &lt;a class=&#34;anchor&#34; href=&#34;#error-message-generation&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Our error message generator is sensitive to the order in which type constraints are eliminated during the unification process: we generate the constraints in rough order of when the type of something would be encountered. E.g., when evaluated the form &lt;code&gt;(+ 1 2)&lt;/code&gt;, we generate the constraints for the literal values 1 and 2, then we generate the numerical type constraint that &lt;code&gt;+&lt;/code&gt; imposes on its arguments.&lt;/p&gt;
&lt;p&gt;This seems to do a pretty good job of giving us the information we need.&lt;/p&gt;
&lt;h2 id=&#34;extending-the-language&#34;&gt;
  Extending the language
  &lt;a class=&#34;anchor&#34; href=&#34;#extending-the-language&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Adding new forms to the language only involves modifying the constraint generation and error message production routines. (Along with a few ancillary functions like AST tagging etc.) The &lt;code&gt;unify&lt;/code&gt; routine essentially stays the same.&lt;/p&gt;
&lt;p&gt;When we add type unions we &lt;em&gt;will&lt;/em&gt; have to modify &lt;code&gt;unify&lt;/code&gt; to support some form of back-tracking. We will also have to make some modifications with &lt;code&gt;let&lt;/code&gt; polymorphism.&lt;/p&gt;
&lt;h2 id=&#34;open-tasks&#34;&gt;
  Open Tasks
  &lt;a class=&#34;anchor&#34; href=&#34;#open-tasks&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Basic type inference&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Decent error messages&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; forms&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Type unions&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;let&lt;/code&gt;-polymorphism&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Occurrence typing for handling nullable types&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources&#34;&gt;
  Resources
  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;PLAI&lt;/dt&gt;
&lt;dd&gt;&lt;span class=&#34;underline&#34;&gt;Programming Languages: Application and Interpretation&lt;/span&gt;, Krishnamurthi. See &lt;a href=&#34;https://cs.brown.edu/courses/cs173/2012/book/types.html#%28part._.Type_.Inference%29&#34;&gt;chapter 15 online&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;EPL&lt;/dt&gt;
&lt;dd&gt;&lt;span class=&#34;underline&#34;&gt;Essentials of Programming Languages&lt;/span&gt;, Friedman and Wand. See Chapter 7.&lt;/dd&gt;
&lt;dt&gt;μKanren&lt;/dt&gt;
&lt;dd&gt;For the original paper, and implementation, and other resources, see &lt;a href=&#34;https://git.sr.ht/~ashton314/microKanren&#34;&gt;my repo on Sourcehut&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
</description>
    </item>
    
    <item>
      <title>Adding a Clock to the Tab-Bar in Emacs 28</title>
      <link>https://lambdaland.org/posts/2022-07-20_adding_a_clock_to_emacs/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-07-20_adding_a_clock_to_emacs/</guid>
      <description>&lt;p&gt;Today I figured out how to add a tab-bar to Emacs. I didn&amp;rsquo;t like having it in the mode-line: it gets duplicated for every window and my mode-line space is precious. In contrast, the right side of the tab-bar was always blank. I&amp;rsquo;ve just been using my OS&amp;rsquo;s clock, but I started using non-native fullscreen with Emacs, so I wanted a view of the clock again.&lt;/p&gt;
&lt;p&gt;Add this to your &lt;code&gt;early-init.el&lt;/code&gt; or the like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-to-list &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;tab-bar-format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;tab-bar-format-align-right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;append&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;add-to-list &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;tab-bar-format&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;tab-bar-format-global&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;append&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;setq&lt;/span&gt; display-time-format &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;%a %F %T&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;setq&lt;/span&gt; display-time-interval &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;display-time-mode&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adding that &lt;code&gt;tab-bar-format-global&lt;/code&gt; to the &lt;code&gt;tab-bar-format&lt;/code&gt; list means that whatever would to on the &amp;ldquo;global&amp;rdquo; section of the format line will now appear in the tab bar. The &lt;code&gt;tab-bar-format-align-right&lt;/code&gt; puts the clock at the top-right hand corner, instead of right next to the tab. Here&amp;rsquo;s what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/img/emacs_tab_clock.jpg&#34; alt=&#34;Screenshot of my Emacs buffer while I was composing this post; a custom clock is visible on the right side of the tab-bar&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that this only works in Emacs 28.&lt;/p&gt;
&lt;p&gt;I wrote an ugly hack that uses a posframe to display the time in the right place. I &lt;em&gt;do not&lt;/em&gt; recommend this, but if you&amp;rsquo;re still on Emacs 27 or earlier for whatever reason, this might work for you:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;;;; Hack to display a clock in the tab-bar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;defun&lt;/span&gt; posframe-poshandler-real-top-right &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;info&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;plist-get&lt;/span&gt; info &lt;span style=&#34;color:#81a1c1&#34;&gt;:parent-frame-width&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;plist-get&lt;/span&gt; info &lt;span style=&#34;color:#81a1c1&#34;&gt;:posframe-width&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;plist-get&lt;/span&gt; info &lt;span style=&#34;color:#81a1c1&#34;&gt;:font-width&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;defun&lt;/span&gt; update-posframe-clock &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Update the clock displayed with posframe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;the-time &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;%H:%M:%S&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tab-bar-tabs&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;posframe-show &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*clock*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#81a1c1&#34;&gt;:string&lt;/span&gt; the-time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#81a1c1&#34;&gt;:width&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#81a1c1&#34;&gt;:poshandler&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;posframe-poshandler-real-top-right&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#81a1c1&#34;&gt;:background-color&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;plist-get&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;custom-face-attributes-get &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;tab-bar&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:background&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;posframe-delete &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;*clock*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;display-graphic-p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;run-with-timer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#88c0d0&#34;&gt;#&amp;#39;&lt;/span&gt;update-posframe-clock&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, I recommend you find something better than the above. It will almost certainly break. &lt;em&gt;Caveat emptor&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rules for Social Media</title>
      <link>https://lambdaland.org/posts/2022-07-17_social_media_rules/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-07-17_social_media_rules/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not on many social media platforms these days. I like it like that. I mostly follow some academics and people who post interesting stuff. I post only occasionally, usually to show off my recent hiking exploits. I&amp;rsquo;ve come up with some rules for myself (all subject to change) about what I post.&lt;/p&gt;
&lt;p&gt;A post must meet all the following criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It must be positive and uplifting.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s enough that&amp;rsquo;s negative on the internet. Don&amp;rsquo;t add to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It must be interesting&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a bad judge of this sometimes; I don&amp;rsquo;t want to be that schmuck who&amp;rsquo;s posting drivel for the sake of posting. Sorry if that happens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No politics.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll make a few exceptions here and there, but as a general rule I don&amp;rsquo;t like posting about politics. I do follow some people that I find interesting for political reasons; that expressly does &lt;em&gt;not&lt;/em&gt; mean that I agree with all or any of their views. I will post mostly about technology, academics, jokes, and hiking.&lt;/p&gt;
&lt;p&gt;Why no politics? I try to keep my views nuanced. It is fantastically difficult to convey any degree of nuance in a tweet or two. If I do have something I feel strongly about, I&amp;rsquo;ll post about it in my &lt;a href=&#34;https://lambdaland.org/personal&#34;&gt;personal&lt;/a&gt; section of my blog so I can write something in long-form, but that&amp;rsquo;s it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I won&amp;rsquo;t post often, but when I do, I&amp;rsquo;ll try to make sure it meets a high bar of quality. I&amp;rsquo;m not out to get more followers or anything—I have just had some really good interactions online, and I want to filter for that. Fighting trolls can be fun, but is ultimately unproductive and uninteresting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>microKanren Reading</title>
      <link>https://lambdaland.org/posts/2022-07-04_kanren/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-07-04_kanren/</guid>
      <description>&lt;p&gt;μKanren (&amp;ldquo;micro-Kanren&amp;rdquo;) is a tiny, embeddable logic programming language. It&amp;rsquo;s easy to understand and implement in almost any language. It&amp;rsquo;s a great case study of an embedded language: unlike other common &amp;ldquo;embedded&amp;rdquo; languages like SQL or regex, which normally are represented as just plain-old strings, μKanren takes more advantage of the host language&amp;rsquo;s features.&lt;/p&gt;
&lt;p&gt;I recommend reading &lt;a href=&#34;http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf&#34;&gt;the original paper&lt;/a&gt;: it&amp;rsquo;s short, well-written, and easy to understand.&lt;/p&gt;
&lt;p&gt;I did a write-up which you can read &lt;a href=&#34;https://git.sr.ht/~ashton314/microKanren&#34;&gt;on Sourcehut&lt;/a&gt;. The README is my set of notes that I made while walking through the implementation of the paper, and the repository contains an implementation in &lt;a href=&#34;https://racket-lang.org&#34;&gt;Racket&lt;/a&gt;. I&amp;rsquo;ve included some fun use cases like a type checker/inference engine that takes up only 37 lines of code!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a fun little language, and I might be able to use it at work soon actually. It&amp;rsquo;s definitely specialized for solving a particular class of problem, but you might be surprised how many things fall into that category. Have you used μKanren? &lt;a href=&#34;https://lambdaland.org/about/#contact&#34;&gt;Drop me a line&lt;/a&gt;—I&amp;rsquo;d love to hear about it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog update</title>
      <link>https://lambdaland.org/posts/2022-07-02_update/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-07-02_update/</guid>
      <description>&lt;p&gt;Brief update on the blog: I had been running a custom fork of the &lt;a href=&#34;https://github.com/lxndrblz/anatole&#34;&gt;Anatole&lt;/a&gt; theme; it diverged pretty heavily, and I found a nice way to customize the CSS. Behold! The new-and-improved blog.&lt;/p&gt;
&lt;p&gt;Some of the new extensions to Anatole include the ability to set a static page as your profile; I&amp;rsquo;ll do this and include links to lists of publications and whatnot. This should make my blog a better place for my professional/academic life.&lt;/p&gt;
&lt;p&gt;I have lost my comments and metrics plugins; I&amp;rsquo;m debating about whether or not I will want to re-include them. I wasn&amp;rsquo;t getting too much benefit from them (though it was exciting to see when a post I wrote made it to the front page of HN!) and they&amp;rsquo;re a little bit of a hassle to maintain.&lt;/p&gt;
&lt;p&gt;In other news, I&amp;rsquo;m trying out &lt;a href=&#34;https://sr.ht/~ashton314&#34;&gt;SourceHut&lt;/a&gt; to host some of my projects; stay tuned for a post about μKanren, a tiny logic language that can be embedded into pretty much any language you want. You can read the material that will form the source of my post &lt;a href=&#34;https://git.sr.ht/~ashton314/microKanren&#34;&gt;here on SourceHut&lt;/a&gt; if you are impatient.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Complete and Liveness, Safe and Sound</title>
      <link>https://lambdaland.org/posts/2022-03-02_sound_complete_and_duals/</link>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2022-03-02_sound_complete_and_duals/</guid>
      <description>&lt;p&gt;I have a hard time keeping these terms straight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;liveness vs. safety&lt;/li&gt;
&lt;li&gt;soundness vs. completeness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is intended as a short guide for myself; maybe someone else will find it useful too! Note that this is all to the best of my knowledge and understanding at the present time; if there be faults, they be the faults of myself. I welcome correction and clarification if I am wrong.&lt;/p&gt;
&lt;h2 id=&#34;liveness-vs-safety&#34;&gt;
  Liveness vs. Safety
  &lt;a class=&#34;anchor&#34; href=&#34;#liveness-vs-safety&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Liveness and safety deal with &lt;em&gt;properties&lt;/em&gt; of a system. Contrast that with soundness and completion, which are adjectives about analyses.&lt;/p&gt;
&lt;h3 id=&#34;liveness&#34;&gt;
  Liveness
  &lt;a class=&#34;anchor&#34; href=&#34;#liveness&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;liveness&lt;/em&gt; property of a system is of the form &amp;ldquo;something good will eventually happen.&amp;rdquo; One example is eventual consistency in a concurrent system: we want to know that, after some finite number of steps, our system comes to a consistent state of the world.&lt;/p&gt;
&lt;p&gt;Another example might be with a bank: I want it to be the case that when I move money between accounts, the correct amount of money makes it to the destination account. That is something we want to eventually happen, and that&amp;rsquo;s what makes it a liveness property.&lt;/p&gt;
&lt;h3 id=&#34;safety&#34;&gt;
  Safety
  &lt;a class=&#34;anchor&#34; href=&#34;#safety&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Safety&lt;/em&gt; is the dual of &lt;em&gt;liveness&lt;/em&gt;: in contrast to liveness, a safety property states that &amp;ldquo;something bad does not occur&amp;rdquo;. One example of a safety property is in an operating system, nothing prevents the kernel from preempting a task. We never want to get stuck in a state where the kernel cannot regain control of the processor. If our operating system is safe in this regard, we know that we&amp;rsquo;ll never have the case where a program supersedes the kernel.&lt;/p&gt;
&lt;p&gt;Extending the bank analogy, a safety property might be that we never want money lost in a transaction. The program might occasionally fail to deliver money, but no value is accidentally destroyed during a transfer.&lt;/p&gt;
&lt;h2 id=&#34;soundness-vs-completeness&#34;&gt;
  Soundness vs. Completeness
  &lt;a class=&#34;anchor&#34; href=&#34;#soundness-vs-completeness&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Soundness and completeness refer to whole systems that make some kind of decision, e.g. a type system or some kind of a static analysis.&lt;/p&gt;
&lt;h3 id=&#34;soundness&#34;&gt;
  Soundness
  &lt;a class=&#34;anchor&#34; href=&#34;#soundness&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Soundness&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[A]n argument is sound if it is both valid in form and its premises are true. Soundness also has a related meaning in mathematical logic, wherein logical systems are sound if and only if every formula that can be proved in the system is logically valid with respect to the semantics of the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Soundness&lt;/em&gt; means the system is trustworthy. A sound type system, for example, will never tell you that a program is devoid of type errors when there are in fact type errors. Most type systems typically are sound. This means, however, that there are programs which may not contain a type error but that the type checker cannot prove to be devoid of errors.&lt;/p&gt;
&lt;p&gt;Another term that may be used for soundness is &lt;em&gt;correct&lt;/em&gt;. (Though, I believe, this may be highly context-dependent.)&lt;/p&gt;
&lt;h3 id=&#34;completeness&#34;&gt;
  Completeness
  &lt;a class=&#34;anchor&#34; href=&#34;#completeness&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The dual of &lt;em&gt;soundness&lt;/em&gt;: if a system is complete, it means the system can give an answer for every input. It might make some mistakes in reasoning. E.g. with a complete type system, there is no program which it cannot assign a type to (even if it&amp;rsquo;s a divergent type) but an assertion that a program is type-safe is not necessarily true.&lt;/p&gt;
&lt;p&gt;Why can&amp;rsquo;t we have both soundness and completeness at the same time? Gödel is to blame for that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class Management Reviews: Fall 2021</title>
      <link>https://lambdaland.org/posts/2021-12-18_classroom_management_reviews/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-12-18_classroom_management_reviews/</guid>
      <description>&lt;p&gt;A collection of what worked well and what didn&amp;rsquo;t in classes that I took this semester. This is partially for me to record what things reduced friction for me as a student so that one day, should I become a professor, I&amp;rsquo;ll be able to run the lowest-friction class ever!&lt;/p&gt;
&lt;h2 id=&#34;synopsis&#34;&gt;
  Synopsis
  &lt;a class=&#34;anchor&#34; href=&#34;#synopsis&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The best classes made it easy for me to see a list of everything that was due, when it was due, and what each assignment entailed. Exhaustively-written lab write-ups hosted on GitHub were a highlight. The worst was when I found numerous typos in an assignment.&lt;/p&gt;
&lt;h2 id=&#34;description-of-what-i-like-generally&#34;&gt;
  Description of what I like generally
  &lt;a class=&#34;anchor&#34; href=&#34;#description-of-what-i-like-generally&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I like loading all of my assignments into &lt;a href=&#34;https://orgmode.org&#34;&gt;org-mode&lt;/a&gt;. If you&amp;rsquo;re not familiar with it, you can think of it as a programmable version of Markdown (though they&amp;rsquo;re not &lt;em&gt;really&lt;/em&gt; related) that includes utilities for managing tasks, calendar items, notes, general markup (I write many of my school papers with org-mode) and even spread sheets!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; My school file looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#+TITLE&lt;/span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;: School&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#+FILETAGS&lt;/span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;: :school:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#+TAGS&lt;/span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;: { general(g) cs_460 math_485 music_202 pws_100 research(r) } \n { reading(b) homework(h) test(t) }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt; General&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt; CS 460                                                            &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt; :cs_460:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt; DONE&lt;/span&gt; HW 1 - Set up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DEADLINE: &amp;lt;&lt;span style=&#34;color:#a3be8c&#34;&gt;2021-09-03 Fri 23:59&lt;/span&gt;&amp;gt; CLOSED: [2021-09-03 Fri 23:32]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt; TODO&lt;/span&gt; HW 2 - Networks and Delay
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;DEADLINE: &lt;/span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&amp;lt;2021-09-10 Fri 23:59&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(Description here)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt; MATH 485...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt; MUSIC 202...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt; PWS 100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see top-level headings for each of my classes with assignments as sub-headings marked with &lt;code&gt;TODO&lt;/code&gt; or &lt;code&gt;DONE&lt;/code&gt;.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Org-mode will munge all the assignments and display them for me in a nice calendar view.&lt;/p&gt;
&lt;p&gt;On mobile I use &lt;a href=&#34;https://beorg.app/&#34;&gt;beorg&lt;/a&gt; which is hands-down the best org-mode agenda view for iOS. (Note: &lt;em&gt;agenda&lt;/em&gt; view. This app is best for managing your todo lists. If you want to edit org-mode files when you&amp;rsquo;re using org-mode for markup, there are some other ones that work a little better for that purpose.)&lt;/p&gt;
&lt;p&gt;At the beginning of each semester I usually load all the assignments I can see into my org-mode file. This always involves a good amount of Perl and Emacs macros. Once everything is set up, I almost never miss an assignment.&lt;/p&gt;
&lt;h2 id=&#34;the-good&#34;&gt;
  The Good
  &lt;a class=&#34;anchor&#34; href=&#34;#the-good&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One class had most of the assignments loaded into a spreadsheet that we could download. Easily the shortest time I had to spend to get things into the format that I like. It wasn&amp;rsquo;t complete, however, so I had to update it once or twice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My CS class had the class labs in a repository on GitHub. If the professor pushed out a change to the lab spec, we just had to pull the repo. If there was a typo, we could submit a PR. (There was one that I found, and my professor merged my pr!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Submissions required using &lt;code&gt;tar&lt;/code&gt;. (CS class, obviously, and the professor gave us instructions. I can, however, &lt;a href=&#34;https://xkcd.com/1168/&#34;&gt;remember the flags&lt;/a&gt;.) Yum. Gimme that UNIX goodness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Late days: for one class we had a pool of 10 late days that we could apply to almost any assignment. (Exceptions were exams, which makes sense and we were provided ample clarification on that.) This was nice because it let me budget my time. I could choose to push off a lab to get a more pressing assignment for another class in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-bad&#34;&gt;
  The Bad
  &lt;a class=&#34;anchor&#34; href=&#34;#the-bad&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Typos in assignments. Goodness gracious, &lt;strong&gt;proofread your assignments&lt;/strong&gt;! I got a &lt;code&gt;.doc&lt;/code&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; file that was &lt;em&gt;riddled&lt;/em&gt; with typos. It was all simple stuff like &amp;ldquo;tranport&amp;rdquo; or &amp;ldquo;trasported&amp;rdquo; that a spell checker would have flagged immediately.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-ugly&#34;&gt;
  The Ugly
  &lt;a class=&#34;anchor&#34; href=&#34;#the-ugly&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Proctorio. My botany class used Proctorio and I am &lt;a href=&#34;https://lambdaland.org/posts/2021-01-30_proctorio/&#34;&gt;not cool with that&lt;/a&gt;. I talked to the professor about my concerns—he listened, but wasn&amp;rsquo;t willing to turn off Proctorio. My RSI has been better, but I still don&amp;rsquo;t like having to use a web-interface to enter text. I&amp;rsquo;d much rather type up my answers in Emacs and paste them in. I&amp;rsquo;m grateful that I had a Raspberry Pi that I could use to isolate the ickiness.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
  Conclusion
  &lt;a class=&#34;anchor&#34; href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;It was a pretty good semester, all in all. It was my first semester as a father; my wife was also finishing up, so that made things difficult. We got a lot of help from our parents—&lt;em&gt;especially&lt;/em&gt; my mother-in-law—and I owe them all a debt of gratitude for helping us make it through the semester.&lt;/p&gt;
&lt;p&gt;I also applied to grad schools! I might write more on that later. I&amp;rsquo;m glad to have that out of the way. Now the waiting begins…&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Appologies to org-mode. This is a pretty sorry description. Just know that org-mode is very, &lt;em&gt;very&lt;/em&gt; powerful.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;I also have states for &lt;code&gt;IN_PROGRESS&lt;/code&gt;, &lt;code&gt;BLOCKED&lt;/code&gt;, and &lt;code&gt;WONT_FIX&lt;/code&gt;.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;I would administer a strike for using a &lt;code&gt;.doc&lt;/code&gt; or &lt;code&gt;.docx&lt;/code&gt;, but this was not a CS or math class. The &lt;code&gt;.doc&lt;/code&gt; instead of &lt;code&gt;.docx&lt;/code&gt; is suspect though.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Foundations of High-Modernist Ideology in Metropolis</title>
      <link>https://lambdaland.org/posts/2021-12-07_metropolis_essay/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-12-07_metropolis_essay/</guid>
      <description>&lt;p&gt;&lt;em&gt;The following is from a essay from a class on German literature and film.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Fritz Lang’s movie &lt;em&gt;Metropolis&lt;/em&gt; is primarily about the struggle between the oppressed working class and the ruling elite. What drives this tension, however, is a particular view of technology and technological progress that exacerbates the problems the film focuses on. This mentality is called &lt;em&gt;high modernist ideology&lt;/em&gt; by Scott in his book &lt;em&gt;Seeing Like a State&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is high modernism, then? It is best conceived as a strong (one might even say muscle-bound) version of the beliefs in scientific and technical progress that were associated with industrialization in Western Europe and in North America from roughly 1830 until World War I. At its center was a supreme self-confidence about continued linear progress, the development of scientific and technical knowledge, the expansion of production, the rational design of social order, the growing satisfaction of human needs, and, not least, an increasing control over nature (including human nature) commensurate with scientific understanding of natural laws.&lt;/p&gt;
&lt;p&gt;(Scott, 89)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that this is different from the literary definition of high modernism. For the purposes of this paper, &lt;em&gt;high modernist ideology&lt;/em&gt; is understood as a belief that rational, scientific systems will solve all of mankind’s ailments. &lt;em&gt;Metropolis&lt;/em&gt; is situated right at the tail end of the reign of high modernist ideology, and illustrates some of the failings of that mentality.&lt;/p&gt;
&lt;p&gt;In this paper we will examine how &lt;em&gt;Metropolis&lt;/em&gt; illustrates the dangers of high modernist thinking in how it portrays man’s subservient relationship to machinery and the fragility of the city of Metropolis resulting from top-down, rational planning. Ironically, even though these themes of centralized failure have been common place in film for more than a century now,&lt;sup&gt;&lt;a id=&#34;fnr.1&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34; role=&#34;doc-backlink&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; the dream of a perfectly organized Utopia persists in our culture today. &lt;em&gt;Metropolis&lt;/em&gt; therefore remains an important case study of the dangers and failings of high modernism.&lt;/p&gt;
&lt;h1 id=&#34;man-serves-the-machine&#34;&gt;
  Man Serves the Machine
  &lt;a class=&#34;anchor&#34; href=&#34;#man-serves-the-machine&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;The opening of &lt;em&gt;Metropolis&lt;/em&gt; shows a stark example of men working as slaves to the machine. Freder goes down to the lower levels to see how the workers live. He passes workers mechanically going from pose to pose to keep the machines running. Their jerky, repetitive motions cast the human workers merely as organic components of each machine that they tend.&lt;/p&gt;
&lt;p&gt;When Freder arrives at the M-Machine, he witnesses an explosion that kills or seriously maims several workers, all because one worker was unable to reach a particular valve in time. The machine was obviously not designed to be ergonomic and was lacking critical safety features that would have prevented such a devastating accident. The machine’s complexity and human-hostile design make  accidents like this essentially inevitable. The massive requirements that the machines impose on the humans shows the high modernist idea that humans should submit themselves to rational ideas, and that human nature can be overcome by rational, technical means.&lt;/p&gt;
&lt;p&gt;Yet this submission to rational, mechanical systems is in itself an irrational one. Freder’s vision of Moloch gobbling up workers who dutifully march into the gaping jaws of the machine speaks to the almost fanatic devotion certain planners of large systems had to rationality. The vision closes and Freder sees some workers wordlessly&lt;sup&gt;&lt;a id=&#34;fnr.2&#34; class=&#34;footref&#34; href=&#34;#fn.2&#34; role=&#34;doc-backlink&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; collecting the bodies of the injured and dead, whilst others take up their posts to keep the machine working. There’s some redundancy in how the human workers are allocated to account for mechanical failures or accidents, but there’s no redundancy &lt;em&gt;in the machines&lt;/em&gt; to account for human failures.&lt;/p&gt;
&lt;p&gt;We get other hints throughout the film of the submission of men to the machine. Metropolis looks to be absolutely unlivable. In the upper levels, we do see crowds gathered for entertainment and sport, but the city streets are either entirely devoted to automobiles, or are so foreboding and unwelcoming that no pedestrian-centric economy could ever flourish there. The streets are sterile and perfectly regular; the buildings are all blocks and perfectly featureless. This prefigures some of the architecture and city planning that was present during the DDR: massive apartment complexes built out of prefabricated concrete slabs were often placed far away from the city center, so as to make the Plattenbau districts feel stifling. The straight lines might look good on paper, but maps and city plans are of necessity a simplification over what real life looks like. Life flourishes in the hand-crafted and in the unique. Top-down imposed grids crush what makes life interesting and livable in the city.&lt;/p&gt;
&lt;h1 id=&#34;the-fragility-of-monoculture-and-centralized-planning&#34;&gt;
  The Fragility of Monoculture and Centralized Planning
  &lt;a class=&#34;anchor&#34; href=&#34;#the-fragility-of-monoculture-and-centralized-planning&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;After the accident at the M-Machine, Freder rushes to tell his father, the architect and ruler of Metropolis, about what he saw. In his office at the top of the New Tower of Babel, Jon Frederson controls the city from a central vantage point: aides digest and bring him information, while others record his decisions and carry out his orders. He is the very model of a high modernist: his rationality has brought order and prosperity to the citizens of the upper levels, and everyone above is free to spend their time as they please. It seems that the city is working perfectly well. However, Metropolis turns out to be very fragile.&lt;/p&gt;
&lt;p&gt;Frederson’s control begins unraveling when his aids fail to bring him the information that he wants, and continues when Rotwang plots against him. Eventually the city collapses when the striking workers’ protest goes further than he had foreseen. The destruction of the Heart Machine causes the lower levels of the city to flood and the upper levels to loose power. Cars halt in the streets, and elevators plummet down their shafts. The apparently well-ordered city with bumper-to-bumper cars moving smoothly down the streets suffers cardiac arrest: broken elevators and stopped cars hinder the protagonists as they try to reach safety.&lt;/p&gt;
&lt;p&gt;This fragility has a good analogue from the mistakes of high modernist ideology. &lt;em&gt;Scientific forestry&lt;/em&gt; came about in the 1700s in Germany as a way to improve lumber yield. A plot of forest would be cleared of all “junk” trees and underbrush, and new trees of a single species were planted in straight lines. The ground was cleared to make way for the saplings, and each year there was a neat rotation between different parcels of land from which mature wood could easily and quickly be harvested. Initially, this was a great success: the wood was strong, straight, and plentiful. There was no junk wood that interfered, and lumber outputs could be reliably predicted.&lt;/p&gt;
&lt;p&gt;It was not, however, without its drawbacks. In a book published in 1986, Richard Plochmann describes how yields dropped after the first few batches (Lang and Pye). The reasons for the drop are complex, but the cause was simple: the “clean” forest that produced such predictable quantities of lumber was a monoculture: there was no variety to protect against a pest that targeted a single species of tree. The soil fauna that are critical to a flourishing forest died off, and the trees withered when they didn’t get the nutrients that they needed.&lt;/p&gt;
&lt;p&gt;One of the hallmarks of high modernist ideology is that problems can be solved by large, complex systems, be they mechanical, political, or bureaucratic. Such aspirations usually fail to take account of the difficulties in getting complex systems to run for long periods of time without encountering significant failures. &lt;em&gt;Metropolis&lt;/em&gt; vividly illustrates the fall of Jon Frederson’s pride as the fragility in the massive system he created causes everything to fail around him.&lt;/p&gt;
&lt;h1 id=&#34;mediation&#34;&gt;
  Mediation
  &lt;a class=&#34;anchor&#34; href=&#34;#mediation&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Amidst the warnings of the dangers of high modernist ideology, the message of &lt;em&gt;Metropolis&lt;/em&gt; is tentatively hopeful: “the mediator between the hands and the head must be the heart!” By the end of the movie, we see the robot masquerading as a human unmasked and destroyed, and the beginnings of greater understanding between the architect of the city, and those that are actually required to live in the city and maintain it. This ultimately is also the cure for high modernist ideology: the designers of complex systems must take into account the needs and the experiences of those who would suffer the brunt of its effects. &lt;em&gt;Metropolis&lt;/em&gt; casts this lesson in the discourse of class struggle, but it can also apply to those who design cities, automobiles, software, and other systems.&lt;/p&gt;
&lt;h1 id=&#34;works-cited&#34;&gt;
  Works Cited
  &lt;a class=&#34;anchor&#34; href=&#34;#works-cited&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Scott, James C. Seeing like a State: How Certain Schemes to Improve the Human Condition Have Failed. Nachdr., Yale Univ. Press, 2008.&lt;/p&gt;
&lt;p&gt;Lang, Chris, and Oliver Pye. “Blinded by Science: The Invention of Scientific Forestry and Its Influence in the Mekong Region.” Chrislang.Org, 1 Nov. 2000, &lt;a href=&#34;https://chrislang.org/2000/11/01/blinded-by-science-the-invention-of-scientific-forestry-and-its-influence-in-the-mekong-region/&#34;&gt;https://chrislang.org/2000/11/01/blinded-by-science-the-invention-of-scientific-forestry-and-its-influence-in-the-mekong-region/&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;footnotes&#34;&gt;
  Footnotes
  &lt;a class=&#34;anchor&#34; href=&#34;#footnotes&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; href=&#34;#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Other films with central-point-of-failure plots include Star Wars, (the thermal exhaust port on the Death Star) The Lord of the Rings, (cast it into the fire!) Batman Begins, (the train with the microwave generator) etc.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.2&#34; href=&#34;#fnr.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; The failure of Texas’s power grid is an extremely interesting case study about the dangers of fragile systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programs and Intent</title>
      <link>https://lambdaland.org/posts/2021-11-09_programs_and_intent/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-11-09_programs_and_intent/</guid>
      <description>&lt;p&gt;What does this program do? At the most reduced level, one could say that a program&amp;rsquo;s behavior is defined by the effect it has on the hardware running it. That&amp;rsquo;s not very useful however; when we&amp;rsquo;re programming, we often have to deal with legacy code and tease out the original intent of the code.&lt;/p&gt;
&lt;p&gt;Saying that the meaning of a program is entirely encapsulated by the code is saying that the intent and the implementation are the same. They so rarely are!&lt;/p&gt;
&lt;p&gt;Today I found some Elixir code that looked like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;@spec&lt;/span&gt; all_have_key?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[%{}],&lt;/span&gt; needed_key &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; boolean&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; all_have_key?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; needed_key&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;any?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn&lt;/span&gt; k &lt;span style=&#34;color:#81a1c1&#34;&gt;-&amp;gt;&lt;/span&gt; k &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; needed_key &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;all?&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(Note, I just threw that together—possible syntax errors in there.)&lt;/p&gt;
&lt;p&gt;What is this code trying to do? It&amp;rsquo;s trying to check that each map in a list has a given key and return true or false on that condition. I don&amp;rsquo;t think the code even had a &lt;code&gt;@spec&lt;/code&gt; to help explain that: all I had was the function name (which was not as clear as &lt;code&gt;all_have_key&lt;/code&gt;) and the source.&lt;/p&gt;
&lt;p&gt;After a few moments of reflection, I rewrote it to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;@spec&lt;/span&gt; all_have_key?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[%{}],&lt;/span&gt; needed_key &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;t&lt;span style=&#34;color:#eceff4&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt; boolean&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; all_have_key?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;lst&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; needed_key&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;has_key?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d08770&#34;&gt;&amp;amp;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; needed_key&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;all?&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That big long complicated bit has a built-in function. The built-in function is more efficient because it doesn&amp;rsquo;t traverse the entire list of keys searching for a match: with a map, you get O(1) lookup time.&lt;/p&gt;
&lt;p&gt;So what does a program mean? I&amp;rsquo;m pretty confident that I preserved the intended meaning of this program. But what&amp;rsquo;s a better way to express that intent?&lt;/p&gt;
&lt;p&gt;Tests are useful, but they don&amp;rsquo;t capture everything. While I think this function was tested, no test can ever ensure 100% preservation of intent. &lt;em&gt;Tests can only find witnesses of meaning mismatches.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Type systems are helpful too. But types come in varying degrees of precision: some languages give you an &lt;code&gt;Int&lt;/code&gt;, while others give you &lt;code&gt;Int&lt;/code&gt; or &lt;code&gt;Nat&lt;/code&gt; or &lt;code&gt;∈ {1, 2, 3}&lt;/code&gt;. More powerful type systems let you express more of your intent in a way that can be mechanically checked, but they tend to also be more burdensome.&lt;/p&gt;
&lt;p&gt;This is an open question that I know there&amp;rsquo;s a lot of ongoing research around. I&amp;rsquo;m excited to see what I find!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Models of Programming</title>
      <link>https://lambdaland.org/posts/2021-09-25_models_of_programming_draft2/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-09-25_models_of_programming_draft2/</guid>
      <description>&lt;p&gt;&lt;em&gt;Last week I was studying outside of a lecture hall where someone was teaching an introductory course on computer programming. There was a lot that I overheard that I disagreed with; this essay is an attempt to help me crystallize what exactly I disagreed with.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What is programming? What is &lt;em&gt;good&lt;/em&gt; programming? What &lt;em&gt;should&lt;/em&gt; programming be like? How you answer depends a lot on what you value. What &lt;em&gt;I&lt;/em&gt; value in programming has not always been the same, and I think I&amp;rsquo;m the better for having toured around the space a little bit. I recognize that there&amp;rsquo;s still a lot to explore; nonetheless, I present my admittedly limited perspective on some broad ways that people think about programming—especially in academia and pedagogy—and some of the strengths and weaknesses of each.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;One way of thinking about programming is that you are ordering a computer to do your bidding: you, the programmer, sit at the helm of your CPU, afloat on a sea of data, and you have various levers and knobs that you can pull and twist to make the CPU get from point A to point B: load this value into memory slot &lt;code&gt;i&lt;/code&gt;. Now add five to it. Now print that back out. Etc. This is called &lt;em&gt;imperative programming&lt;/em&gt;, because you tell the computer every step it should take.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m doubtful that there&amp;rsquo;s much deep insight into programming this way.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; It&amp;rsquo;s like writing a recipe for a horrendously unimaginative cook. If you&amp;rsquo;re teaching students how to program like this, they might get an appreciation for being detail-oriented and sweating the minutiae—that&amp;rsquo;s well and good—but I think that&amp;rsquo;s about where it stops.&lt;/p&gt;
&lt;p&gt;Another way of thinking about programming is that you, the programmer, teach the computer to solve progressively more complicated problems by composing bits of behavior together. Programs start behaving more like the &lt;a href=&#34;https://www.youtube.com/watch?v=r6sGWTCMz2k&#34;&gt;Fourier series&lt;/a&gt;: the aggregation of simple, easy-to-understand components yields a robust and flexible result.&lt;/p&gt;
&lt;p&gt;Where it really starts getting interesting is when you bring more powerful programming languages into the mix: languages that let you do more than just give the computer a dumb set of instructions to dutifully and meticulously slog through. Languages like Scheme (and related languages like Racket, Clojure, and—I&amp;rsquo;d argue—Elixir) give you the tools to build up models of the problem you&amp;rsquo;re trying to solve. You begin to think about the fundamental nature of the problems at hand and how to proceed from there. Whereas in the first case, you&amp;rsquo;re more focused on how to get the computer to do something. Reversing your tack can lead you down a wrong path for a long time without you knowing it.&lt;/p&gt;
&lt;p&gt;Besides, high-level, functional programming languages make great pedagogical tools for more reasons than just the power they give you in modeling your program. Many of these languages put emphasis on building programs up from small, composable units with no side-effects that are easy to reason about, test, and put together. Not only do you learn how to sweat the details, you also learn how to orchestrate many simple pieces into complex solutions that &lt;em&gt;fit&lt;/em&gt; the problem at hand. It&amp;rsquo;s the difference of being taught the rudiments of cooking and learning how to compose dishes that fit together into a complete meal meant to delight and nourish.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s some effort to achieve these ends when courses opt to focus on object-oriented principles. Sure, you learn about decomposing your problems along domain lines, but there&amp;rsquo;s often much more focus on mutation which can trip beginners up. Local-reasoning dissolves, and your layers of abstraction leak.&lt;/p&gt;
&lt;p&gt;Furthermore, OO is emphatically &lt;em&gt;not&lt;/em&gt; a good fit for so many problems! Nevertheless, a great deal of effort has been expended by thousands of researchers to find &amp;ldquo;best-practice &lt;em&gt;patterns&lt;/em&gt;&amp;rdquo; for each and every scenario. We&amp;rsquo;ve drifted back a little towards the rote recipe-following instruction. Abstract mathematics provides a much richer modeling domain—indeed, computability theory was born from the Lambda Calculus, and it has proved to be a very fruitful field for general modeling.&lt;/p&gt;
&lt;p&gt;Abstract mathematics isn&amp;rsquo;t a &lt;em&gt;prerequisite&lt;/em&gt; to learning how to program (though it &lt;em&gt;does&lt;/em&gt; turn out to be very useful the further one goes) but that doesn&amp;rsquo;t prevent us from teaching a more mathematically-oriented way of thinking about problem decomposition. There are many excellent books that do this, from the celebrated &lt;em&gt;&lt;a href=&#34;https://sarabander.github.io/sicp/&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;&lt;/em&gt; by Abelson and Sussman to &lt;em&gt;&lt;a href=&#34;https://htdp.org&#34;&gt;How to Design Programs&lt;/a&gt;&lt;/em&gt; by Felleisen et. al.&lt;/p&gt;
&lt;p&gt;My hope is that programming courses in higher-education settings (and high school settings!) will move away from imperative and even object-oriented programming towards a more functional approach.&lt;/p&gt;
&lt;h2 id=&#34;low-level-knowledge&#34;&gt;
  Low-level knowledge
  &lt;a class=&#34;anchor&#34; href=&#34;#low-level-knowledge&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;d like to qualify an earlier claim: imperative programming has little benefit from a pedagogical standpoint.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Now, that&amp;rsquo;s not entirely true, because there comes a point where you &lt;em&gt;need&lt;/em&gt; to know the low-level details of how a computer works, and assembly is an imperative language. C is a great language for learning systems programming, because it exposes you to &lt;em&gt;all&lt;/em&gt; the nuts and bolts of memory, interrupts, system calls, etc. There are a lot of footguns in this area, and that&amp;rsquo;s because physics is a beast. I still don&amp;rsquo;t think it&amp;rsquo;s a good idea to &lt;em&gt;start&lt;/em&gt; with this stuff, much like a budding chef doesn&amp;rsquo;t need to know the details of the chemical reactions taking place in the oven, but there comes a point where knowing the underlying chemistry becomes indispensable.&lt;/p&gt;
&lt;p&gt;Now, there&amp;rsquo;s a very &lt;em&gt;wrong&lt;/em&gt; way to teach programming, and that way is by using something as ungainly as C++.&lt;/p&gt;
&lt;p&gt;C++ is a pedagogically worthless language. It bogs a budding student down with historical baggage like header files and cryptic imports whilst drowning said student in the complexities of an abuse and archaic syntax, with nothing but an error message that&amp;rsquo;s as clear and useful as a lead-filled balloon used as a flotation device. It&amp;rsquo;s impossible to get a pleasing, mathematically-sound model of your domain in C++. Heck, you can&amp;rsquo;t even model something in an OO way whilst following the literature on that. Almost all effort is consumed in attempting to appease a persnickety compiler.&lt;/p&gt;
&lt;p&gt;Since getting the syntax and the ceremony right is so much of C++, it turns into a guess-and-check game, where the student keeps tweaking things until it works. &lt;em&gt;This is not the way. You don&amp;rsquo;t learn anything about &lt;strong&gt;why&lt;/strong&gt; things are the way they are.&lt;/em&gt; This is similar to &lt;a href=&#34;https://blog.plover.com/prog/Java.html&#34;&gt;one argument I&amp;rsquo;ve heard about how Java suffers from a similar problem&lt;/a&gt;. We shouldn&amp;rsquo;t be teaching students how to solve programs in a given language. Rather, we should be &lt;a href=&#34;https://htdp.org/2021-5-4/Book/part_preface.html&#34;&gt;giving them tools to think about the problems&lt;/a&gt; they face and how to solve them.&lt;/p&gt;
&lt;h2 id=&#34;apply--essay&#34;&gt;
  &lt;code&gt;(apply + essay)&lt;/code&gt;
  &lt;a class=&#34;anchor&#34; href=&#34;#apply--essay&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The thing that set me off from that lecture was that the instructor was suggesting students use pass-by-reference in function calls &lt;em&gt;without&lt;/em&gt; even mentioning the headache that can come from side-effects and breaking referential transparency in functions. It&amp;rsquo;s the kind of thing that a beginner doesn&amp;rsquo;t need to know to program, but misuse can lead to some really nasty bugs. Anyway, programming with mutation is better avoided—best not to encourage techniques that students will have to unlearn when they encounter a pure language.&lt;/p&gt;
&lt;p&gt;To sum up, I think the best way to start out thinking about programming is by considering how to model problem domains as best as possible, and functional languages give you the most and best tools to do that with. OO is an improvement over imperative programming, but do &lt;em&gt;not&lt;/em&gt; use C++!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;There&amp;rsquo;s something there for sure… I&amp;rsquo;ll come back to this.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;See, I &lt;em&gt;told&lt;/em&gt; you I&amp;rsquo;d come back to it!&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>A programmable programming language? I&#39;ll drink to that!</title>
      <link>https://lambdaland.org/posts/2021-08-21_racket_mug/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-08-21_racket_mug/</guid>
      <description>&lt;p&gt;My wife and I got a chance to go to a place that lets you paint pottery and then have it fired. The pottery is all pre-made; you just get to paint it.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been a very long time since I&amp;rsquo;ve worked with a physical art medium, so the mug looks kinda dumpy. I did alright with the Racket logo on the bottom-inside of the mug though!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/img/racket_mug0.jpeg&#34; alt=&#34;A poorly-painted blue mug&#34; /&gt;
&lt;img src=&#34;https://lambdaland.org/img/racket_mug1.jpeg&#34; alt=&#34;A passable freehanded Racket logo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m working on some fun projects with Racket. It&amp;rsquo;s been a really enjoyable language to work with. If you haven&amp;rsquo;t given it a whirl, I recommend checking it out. The docs on the &lt;a href=&#34;https://racket-lang.org&#34;&gt;official Racket site&lt;/a&gt; are very good, and there are some absolutely &lt;em&gt;stellar&lt;/em&gt; gentle introductions to the language like &lt;a href=&#34;https://htdp.org&#34;&gt;How to Design Programs&lt;/a&gt; that I would recommend.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ode to Used Book Stores</title>
      <link>https://lambdaland.org/posts/2021-08-03_used_books/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-08-03_used_books/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;When I get a little money I buy books; and if any is left I buy food and clothes.&lt;br&gt;
— Erasmus of Rotterdam&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Used bookstores are my arch nemesis.&lt;/p&gt;
&lt;p&gt;I have two such stores in disturbingly close proximity to me. The first is Boomerang Books—within a short walk of my house and right next to Burgers Supreme (almost as dangerous)—and they carry textbooks at a fifth of the original price. Last time I went there I walked out with a book on graph theory I most certainly don&amp;rsquo;t need. The second is Pioneer Book. My wife and I went there on a date a couple of months ago. I walked out with a dozen books.&lt;/p&gt;
&lt;p&gt;My wallet has suffered.&lt;/p&gt;
&lt;p&gt;What keeps me hooked is that my wallet has suffered &lt;em&gt;much less&lt;/em&gt; than it would if they were not used books, though!&lt;/p&gt;
&lt;p&gt;The serendipity is what gets me. I was walking up the stairs when I passed a copy of &lt;em&gt;Walden&lt;/em&gt; be Emerson that was waiting to be sorted and shelved. I picked it up and added it to the pile.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure how much more my bookshelf can take. The books are already stacked two deep. I just need to make time, dig in, and start reading. Maybe I can give back some of those wonderful books after I&amp;rsquo;ve finished them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Control-Flow Analysis</title>
      <link>https://lambdaland.org/posts/2021-05-20_cfa/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-05-20_cfa/</guid>
      <description>&lt;p&gt;Control-Flow Analysis is a popular technique for performing static analysis of many different kinds of programming languages.
It&amp;rsquo;s most often needed in cases where you have some kind of dynamic dispatch: either where you have first-class functions or when you have objects and you call one of their methods.&lt;/p&gt;
&lt;p&gt;Imagine for a moment that you were given a program which you were asked to analyze manually.
You might start by going to the top of the program, running through each branch, and keeping track of the values variables could take.
If the program is too complex to hold entirely in your head, you might start by writing down some abstractions to simplifiy remembering.
For example, instead of remembering that the variable &lt;code&gt;x&lt;/code&gt; holds the value of &lt;code&gt;12&lt;/code&gt;, you might just remember that it is a number.
Thus, when you saw some assignment to &lt;code&gt;x&lt;/code&gt;, such as &lt;code&gt;x := x + 1&lt;/code&gt;, you could skip over that and just think that &lt;code&gt;x&lt;/code&gt; is still a number.&lt;/p&gt;
&lt;p&gt;If you came across a loop, you probably wouldn&amp;rsquo;t trace &lt;em&gt;each&lt;/em&gt; execution through the loop: just one or two passes would be enough to tell you some interesting facts. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;i is {i}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a simple loop like this, it&amp;rsquo;s easy to show how the program will always make progress and complete the loop.
For more complicated loops, proving progress might be impossible.
(It might also be &lt;em&gt;wrong&lt;/em&gt;: we do get programs with infinite loops.)&lt;/p&gt;
&lt;p&gt;In these cases, we can just check to see if we&amp;rsquo;ve returned to a state that&amp;rsquo;s identical to a state that we&amp;rsquo;ve seen before:
if &lt;code&gt;x&lt;/code&gt; was a number, it should still be a number, etc.
If the variables&amp;rsquo; (abstract) values are the same, we can conclude that there &lt;em&gt;might&lt;/em&gt; be a loop and move on.
It&amp;rsquo;s not guaranteed to be &lt;em&gt;accurate&lt;/em&gt;, but it is a strategy that&amp;rsquo;s guaranteed to &lt;em&gt;terminate&lt;/em&gt;.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s more to CFA than what I&amp;rsquo;ve outlined here, but this should give you an idea. Stay tuned for more!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This is the classic completeness/consistency trade-off introduced by Kurt Gödel. A &lt;em&gt;consistent&lt;/em&gt; evaluation of a program leaves in a state where there are programs that we cannot compute because we can&amp;rsquo;t tell if they halt. (The Halting Problem) A &lt;em&gt;complete&lt;/em&gt; analysis, which is what we are interested in here, must sacrifice on consistency, and return inaccurate, though still useful results.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Using a Raspberry Pi for Proctorio</title>
      <link>https://lambdaland.org/posts/2021-01-30_proctorio/</link>
      <pubDate>Sat, 30 Jan 2021 21:38:04 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2021-01-30_proctorio/</guid>
      <description>&lt;p&gt;For one of my classes I am required to take a short weekly exam via Proctorio. There&amp;rsquo;s &lt;a href=&#34;https://www.theverge.com/2020/10/22/21526792/proctorio-online-test-proctoring-lawsuit-universities-students-coronavirus&#34;&gt;been some controversy&lt;/a&gt; surrounding this software. Although it claims it&amp;rsquo;s trustworthy, it&amp;rsquo;s not open-source, so no one can verify their claims. So naturally, I was reluctant to install it on my primary machine. Enter: the spare raspberry pi I have sitting around.&lt;/p&gt;
&lt;p&gt;All it took was a USB webcam hooked up to a raspberry pi. For this project I wanted to maximize comparability, so I chose stock Ubuntu. I installed Chromium and the Proctorio plugin, and I was all set.&lt;/p&gt;
&lt;p&gt;Proctorio slowed my machine to a crawl, but it didn&amp;rsquo;t effect taking my test that much. The I only time this was annoying was when I realized halfway through that I needed to switch my keyboard layout.&lt;/p&gt;
&lt;p&gt;I wish I didn&amp;rsquo;t have to use Proctorio. I don&amp;rsquo;t trust them. They say my information is encrypted, but they also do some kind of eye tracking to flag suspicious behavior. (Among other metrics.) Is this computation being run on my machine? This seems more like a job that would get farmed off to a server somewhere. in that case, it could not be encrypted.&lt;/p&gt;
&lt;p&gt;That is just some speculation. Perhaps they really are a reputable company that I can trust with my data. But until I can verify that myself, I&amp;rsquo;ll keep it on a burner computer that I can fully wipe once I&amp;rsquo;m done.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FreeBSD on a Raspberry Pi 4 with 4GB of RAM</title>
      <link>https://lambdaland.org/posts/2020-12-23_freebsd_rpi4/</link>
      <pubDate>Mon, 28 Dec 2020 22:30:29 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-12-23_freebsd_rpi4/</guid>
      <description>&lt;p&gt;This is the story of how I managed to get FreeBSD running on a Raspberry Pi 4 with 4GB of RAM, though I think the setup story is pretty similar for those with 2GB and 8GB.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I also managed to get Rust built from source, (kind of) which is nice because the default Rust installer doesn&amp;rsquo;t seem to work for FreeBSD running on a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s anything awry with these steps, please &lt;a href=&#34;https://lambdaland.org/about/#contact&#34;&gt;contact me&lt;/a&gt; so I can fix it.&lt;/p&gt;
&lt;h1 id=&#34;installing-freebsd&#34;&gt;
  Installing FreeBSD
  &lt;a class=&#34;anchor&#34; href=&#34;#installing-freebsd&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;First, get yourself a Raspberry Pi 4 and an SD card. (I don&amp;rsquo;t know how to boot from a hard disk; if anyone figures that out, please &lt;a href=&#34;https://lambdaland.org/about/#contact&#34;&gt;let me know&lt;/a&gt;.) Next, download the FreeBSD image &lt;a href=&#34;https://download.freebsd.org/ftp/snapshots/arm64/aarch64/ISO-IMAGES/13.0/&#34;&gt;from the 13.0 snapshot repository&lt;/a&gt;. I used what was the most recent version as of 2020-12-23 (FreeBSD-13.0-CURRENT-arm64-aarch64-RPI3-20201210-7578a4862f0.img.xz).&lt;/p&gt;
&lt;p&gt;FreeBSD doesn&amp;rsquo;t make Pi 4-specific snapshots, so you just have to use the RPI 3 version.&lt;/p&gt;
&lt;p&gt;Unpack the zip file, and flash that to your SD card:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xz -d FreeBSD-13.0-CURRENT-arm64-aarch64-RPI3-20201210-7578a4862f0.img.xz

sudo dd bs=1m if=FreeBSD-13.0-CURRENT-arm64-aarch64-RPI3-20201210-7578a4862f0.img of=/dev/DISK_NUMBER conv=sync
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plug that into your Pi, and make sure it boots up.&lt;/p&gt;
&lt;h1 id=&#34;get-freebsd-to-recognize-all-the-ram-available&#34;&gt;
  Get FreeBSD to recognize all the RAM available
  &lt;a class=&#34;anchor&#34; href=&#34;#get-freebsd-to-recognize-all-the-ram-available&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;You can check how much RAM the OS thinks it has like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sysctl hw.physmem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After upgrading the boot system, I got 4124610560 (4GB). Prior to this, this returned a much lower number (though I can&amp;rsquo;t remember what it was).&lt;/p&gt;
&lt;p&gt;First, on your FreeBSD pi, you&amp;rsquo;ll want to install the following packages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pkg install sysutils/rpi-firmware
sudo pkg install u-boot-rpi4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Not sure how necessary that first one is, actually. Didn&amp;rsquo;t seem to hurt things though.)&lt;/p&gt;
&lt;p&gt;After you&amp;rsquo;re done installing the &lt;code&gt;u-boot-rpi4&lt;/code&gt; package, you will want to &lt;em&gt;copy&lt;/em&gt; a file from your FreeBSD machine to something you can use to modify the SD card. (In my case, I used the same machine as the one I used to flash the SD card in the first place.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;me@non-freebsd:~ $ rsync -aivz root@generic:/usr/local/share/u-boot/u-boot-rpi4/u-boot.bin .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;strong&gt;NOTE&lt;/strong&gt;: If you want to use rsync, you&amp;rsquo;ll have to install rsync on your FreeBSD machine with &lt;code&gt;pkg install rsync&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Shut down your Raspberry Pi, pull out the SD card, and mount it onto that machine you just copied the u-boot.bin file to. Open up the &lt;code&gt;MSDOSBOOT&lt;/code&gt; image, and find the &lt;code&gt;u-boot.bin&lt;/code&gt; file in the root of the image. Delete it, and move the one you copied from your pi into its place. Eject the SD card, and replace it into your Pi. Boot it up!&lt;/p&gt;
&lt;p&gt;You can check to make sure that your Raspberry Pi now enjoys the full amount of RAM available on your machine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sysctl hw.physmem
hw.physmem: 4124610560
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;installing-rust&#34;&gt;
  Installing Rust
  &lt;a class=&#34;anchor&#34; href=&#34;#installing-rust&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;I love &lt;a href=&#34;https://rust-lang.org&#34;&gt;Rust&lt;/a&gt;. Unfortunately, FreeBSD running on an ARM system (like a Raspberry Pi) is in &lt;a href=&#34;https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-3&#34;&gt;Tier 3 support&lt;/a&gt;, so I had to do some work to get it built myself.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;
  Prerequisites
  &lt;a class=&#34;anchor&#34; href=&#34;#prerequisites&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You will need to have all 4GB of RAM available. I tried this before getting the 4GB thing working, and builds kept failing.&lt;/p&gt;
&lt;p&gt;Building everything from source takes &lt;em&gt;forever&lt;/em&gt;, so go ahead and install the following with &lt;code&gt;pkg&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;perl (I think you need to specify a version with this one; just get the latest version)&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;llvm&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;cmake&lt;/li&gt;
&lt;li&gt;libgit2&lt;/li&gt;
&lt;li&gt;ninja&lt;/li&gt;
&lt;li&gt;pkgconf&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ports-tree&#34;&gt;
  Ports Tree
  &lt;a class=&#34;anchor&#34; href=&#34;#ports-tree&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll want to get the ports tree on your machine so you can build Rust. Make sure you &lt;a href=&#34;https://lambdaland.org/posts/2020-02-12-freebsd-on-a-raspberry-pi/#setting-up-the-clock&#34;&gt;set your clock&lt;/a&gt; so it&amp;rsquo;s the right time, then you can install the port tree:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;portsnap fetch
portsnap extract
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That last command will take a while to run.&lt;/p&gt;
&lt;h2 id=&#34;start-building&#34;&gt;
  Start Building
  &lt;a class=&#34;anchor&#34; href=&#34;#start-building&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Rust takes a &lt;em&gt;very&lt;/em&gt; long time to build and consumes a lot of CPU. My build has been running &lt;em&gt;all day&lt;/em&gt; and it hasn&amp;rsquo;t finished yet. You&amp;rsquo;ll want to throttle up your fan on your Raspberry Pi if you&amp;rsquo;ve got one; thermal throttling can kick in pretty quickly when all four cores are going at 100%.&lt;/p&gt;
&lt;p&gt;This should get the build started:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/ports/lang/rust
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should run for a few hours at least. Like, on the order of 18 hours or so. (Download speeds are not the bottleneck, at least not for me!)&lt;/p&gt;
&lt;p&gt;And, for me, unfortunately, the build died near the end with this error:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;       Fresh walkdir v2.3.1
       Fresh cmake v0.1.44
Traceback (most recent call last):=====&amp;gt;                               ] 35/76: serde_json(build), cmake, walkdir, ryu(build)
  File &amp;#34;x.py&amp;#34;, line 11, in &amp;lt;module&amp;gt;
    bootstrap.main()
  File &amp;#34;/usr/ports/lang/rust/work/rustc-1.48.0-src/src/bootstrap/bootstrap.py&amp;#34;, line 1066, in main
    bootstrap(help_triggered)
  File &amp;#34;/usr/ports/lang/rust/work/rustc-1.48.0-src/src/bootstrap/bootstrap.py&amp;#34;, line 1039, in bootstrap
    build.build_bootstrap()
  File &amp;#34;/usr/ports/lang/rust/work/rustc-1.48.0-src/src/bootstrap/bootstrap.py&amp;#34;, line 824, in build_bootstrap
    run(args, env=env, verbose=self.verbose)
  File &amp;#34;/usr/ports/lang/rust/work/rustc-1.48.0-src/src/bootstrap/bootstrap.py&amp;#34;, line 153, in run
    raise RuntimeError(err)
RuntimeError: failed to run: /usr/ports/lang/rust/work/bootstrap/bin/cargo build --manifest-path /usr/ports/lang/rust/work/rustc-1.48.0-src/src/bootstrap/Cargo.toml --verbose --frozen
*** Error code 1

Stop.
make[1]: stopped in /usr/ports/lang/rust
*** Error code 1

Stop.
make: stopped in /usr/ports/lang/rust
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, I did notice that there was a &lt;code&gt;rustc&lt;/code&gt; binary hanging out in &lt;code&gt;/usr/ports/lang/rust/work/bootstrap/bin/rustc&lt;/code&gt;, along with binaries for &lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustdoc&lt;/code&gt; et. al. I think something in the standard lib (maybe &lt;code&gt;serde&lt;/code&gt;) failed to build for some reason, but I tried compiling a little &amp;ldquo;Hello, World!&amp;rdquo; program, and that worked just fine. I don&amp;rsquo;t know how well other things will work.&lt;/p&gt;
&lt;p&gt;If anyone manages to get everything working &lt;em&gt;please tell me how you did it&lt;/em&gt; and I will update this post for the benefit of anyone coming after. :)&lt;/p&gt;
&lt;h3 id=&#34;update-2020-12-28&#34;&gt;
  UPDATE 2020-12-28
  &lt;a class=&#34;anchor&#34; href=&#34;#update-2020-12-28&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;I managed to compile &lt;a href=&#34;https://github.com/ashton314/super_pipe&#34;&gt;a little rust program I made&lt;/a&gt;, and this includes serde. I&amp;rsquo;m not sure how well the filesystem watcher works; I&amp;rsquo;ll try that out some time and see how it goes. I just had to add &lt;code&gt;/usr/ports/lang/rust/work/bootstrap/bin&lt;/code&gt; to my path, and I was able to run &lt;code&gt;cargo build&lt;/code&gt; and then &lt;code&gt;cargo run&lt;/code&gt; with no problems.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;See &lt;a href=&#34;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=247012&#34;&gt;this thread&lt;/a&gt; for some help on 8GB Raspberry Pis&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Dr. Loopback, Or: How I Learned to Stop DOSing Myself and Love the Pi-Hole</title>
      <link>https://lambdaland.org/posts/2020-12-11-raspberry-pi-dos/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-12-11-raspberry-pi-dos/</guid>
      <description>&lt;p&gt;I noticed that my Internet was acting strangely: whenever I visited a web page, my browser would hang for a good second or two before it started loading anything. Zoom calls worked without a problem for school, so this tipped me off that something was wrong with the DNS lookup or the handshake.&lt;/p&gt;
&lt;p&gt;Sure enough, I popped open my &lt;a href=&#34;https://pi-hole.net/&#34;&gt;Pi-Hole&lt;/a&gt; admin console, and was greeted with this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/img/pi_hole_before.png&#34; alt=&#34;Pi-Hole Admin Console&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The green number in the &lt;code&gt;Total Queries&lt;/code&gt; box would jump by 10, 20, or sometimes even 100 every second.&lt;/p&gt;
&lt;p&gt;I tried turning off, disconnecting, and rebooting my various computers and devices to see if it was just some rogue process messing everything up. No change. I rebooted my router. No change. I updated and restarted the Pi-Hole. Still no change.&lt;/p&gt;
&lt;p&gt;I noticed that a &lt;em&gt;lot&lt;/em&gt; of requests to the domain &lt;code&gt;lb._dns-sd._udp.0.0.0.10.in-addr.arpa&lt;/code&gt;. I did a web search and found &lt;a href=&#34;https://discourse.pi-hole.net/t/many-requests-to-lb-dns-sd-udp-0-1-168-192-in-addr-arpa/18241&#34;&gt;a single post on a forum&lt;/a&gt; that suggested turning off conditional forwarding on the Pi-Hole.&lt;/p&gt;
&lt;p&gt;I went into admin settings, turned off conditional forwarding, and was rewarded with this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/img/pi_hole_after.png&#34; alt=&#34;Pi-Hole Admin Console&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now my pi isn&amp;rsquo;t overloaded with DNS requests, and my Internet is as snappy as it used to be.&lt;/p&gt;
&lt;p&gt;What happened, I think, was that a device on my network would try and lookup some name. The router would forward this request to the pi, which would then forward it back to the router, which would then send it back to the pi, etc. Boom. Infinite loop, and all my DNS requests got bogged down.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not very good with networking; that&amp;rsquo;s probably my biggest weakness. I learned a thing today, though!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RMS Does Not See the Future of Emacs</title>
      <link>https://lambdaland.org/posts/2020-11-future-of-emacs/</link>
      <pubDate>Fri, 27 Nov 2020 23:32:47 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-11-future-of-emacs/</guid>
      <description>&lt;p&gt;I am an avid &lt;a href=&#34;https://emacs.org&#34;&gt;Emacs&lt;/a&gt; user. I&amp;rsquo;m using it right now to compose this post. I use it every single day for everything from work to school to personal notes. Most of my activity on GitHub comes from me tweaking little things in my configuration files. I now have an editor that perfectly fits my hands. Emacs is a big part of my life.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m afraid it&amp;rsquo;s dying.&lt;/p&gt;
&lt;p&gt;Richard Stallman, one of the principle creators of Emacs and the head of the GNU Project, has made several choice in the past several months that I consider to be detrimental to the Emacs community and harmful for Emacs&amp;rsquo; further growth. RMS doesn&amp;rsquo;t seem to care that much about making Emacs appealing to new users, and I think this is a mistake. Emacs derives its strength from being uniquely customizable and extensible; the more people we get using Emacs, the more good extensions, packages, tutorials, etc. will be available for Emacs. Some of the growth-hostile things include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shutting down suggestions for making Emacs start with a sensible set of defaults that would make it significantly easier for beginners to get started&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Purging links to the most popular (and most useful!) Emacs package repositories, Melpa and Marmalade, just because they &lt;em&gt;might&lt;/em&gt; contain links to sites with non-free Javascript&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Ignoring community-driven development and exercising veto rule in cases where I personally think it was unwarranted&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can appreciate strong leadership; I think for creating most things, having a single leader drive the development of a product gives it focus and direction that otherwise might kill it off. (I think Python is a good example of this at work.) In this case with Emacs, however, I think RMS is badly out of touch and should focus on what we as a community can do to make Emacs more robust so that future generations of programmers will have a strong motivation to use Emacs—a desire to run free software motivates precious few people in their selection of their tools. We should make it more appealing for its features and performance as well.&lt;/p&gt;
&lt;p&gt;Some areas where Emacs stands to improve are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Beginner-friendliness&lt;/strong&gt; The default Emacs theme looks awful. No computer user used to the comforts of macOS or Windows would want to go near that ugly beast. It should have a pretty-looking theme by default. One idea would be to make it so that a new user can select some pre-built themes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; There are some exciting things happening with gccemacs on this front. I&amp;rsquo;m not running that right now, as compiling Emacs master on macOS is a little persnickety. Improving its rendering engine would help too. I recognize that that is a big undertaking, and unfortunately I have little to offer in this regard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ease of contribution&lt;/strong&gt; Why not host Emacs development on a self-hosted GitLab instance? Or use some other issue tracker? I understand that there are some advantages for mailing lists, but the set of programmers who are a.) familiar with that work flow, and b.) prefer it, is dwindling. An issue/PR-style flow makes a lot more sense for most developers, and I think it would go a long way to enriching community involvement in Emacs&amp;rsquo; core development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just my thoughts, and will likely evolve over time. Unfortunately I cannot devote as much time as I would like to improving Emacs, though I do enjoy &lt;a href=&#34;https://github.com/ashton314/gilded-select&#34;&gt;learning to write packages&lt;/a&gt; when I have the time.&lt;/p&gt;
&lt;p&gt;Good luck, all you Emacs maintainers out there. You&amp;rsquo;re heroes.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/819452/&#34;&gt;https://lwn.net/Articles/819452/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-mirror/emacs/commit/5daa7a5fd4aced33a2ae016bde5bb37d1d95edf6&#34;&gt;https://github.com/emacs-mirror/emacs/commit/5daa7a5fd4aced33a2ae016bde5bb37d1d95edf6&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://ergoemacs.org/misc/rms_emacs_tyrant_2018-03.html&#34;&gt;http://ergoemacs.org/misc/rms_emacs_tyrant_2018-03.html&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The Social Dilemma</title>
      <link>https://lambdaland.org/posts/2020-10-27-social-dilemma/</link>
      <pubDate>Tue, 27 Oct 2020 23:40:29 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-10-27-social-dilemma/</guid>
      <description>&lt;p&gt;I just finished watching &lt;a href=&#34;https://www.thesocialdilemma.com/&#34;&gt;The Social Dilemma&lt;/a&gt;, and here&amp;rsquo;s my hot take: &lt;em&gt;The Social Dilemma&lt;/em&gt; is an emotive, accessible introduction to problems that, without exaggeration, pose an existential threat to life as we know it. If you can, watch it.&lt;/p&gt;
&lt;p&gt;Having read &lt;a href=&#34;https://lambdaland.org/posts/2020-08-16-book-review-technopoly-v2&#34;&gt;Technopoly&lt;/a&gt; by Neil Postman, I didn&amp;rsquo;t feel like &lt;em&gt;The Social Dilemma&lt;/em&gt; was revelatory in saying that technologies have unintended side-effects. What&amp;rsquo;s different about &lt;em&gt;The Social Dilemma&lt;/em&gt; is that it is really accessible and it highlights real, present, concrete problems caused by Facebook, Twitter, Instagram, etc. (I think if Neil Postman had been alive to witness Facebook and Twitter, he would have been scared silly.)&lt;/p&gt;
&lt;p&gt;Social media is perhaps unique in that there has never been a technology so complex that requires so little effort or expertise on the part of the end-user. Prior to the invention of the personal computer, the most complex piece of technology a lay person used was a car. Even though it is relatively easy to drive, a car still requires you to have some knowledge of its inner workings: knowing when to change the oil or coolant or when to get the tires replaced or the brakes checked is part of operating a car successfully.&lt;/p&gt;
&lt;p&gt;Not so with social media. All you need to know is how to type your name and scroll. The complexity behind Facebook&amp;rsquo;s implementation is orders of magnitude greater than that in any car. Yet Facebook is so easy to use that even the most illiterate, technologically inept person can figure it out. Therein lies some of the danger: Facebook, Google, Instagram, etc. all employ technologies&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to influence your behavior, and end users are entirely oblivious to their workings and effects.&lt;/p&gt;
&lt;p&gt;So what do we do?&lt;/p&gt;
&lt;p&gt;At the end of &lt;em&gt;The Social Dilemma&lt;/em&gt;, many of the experts and creators of these technologies suggested that we need governmental regulation. I&amp;rsquo;m persuaded that our best bet lies in some kind of regulation, because market forces do nothing to incentivize their creators to fix the problems of polarization and misinformation. Exactly &lt;em&gt;how&lt;/em&gt; that regulation should be enacted is an open question. Perhaps social media should be regulated like alcohol or tobacco: e.g. stricter limits on when someone can start using it, and visible warnings about the psychological effects that it has. Removing or severely curbing political advertisements, especially when paid for by parties &lt;em&gt;other&lt;/em&gt; than the candidate in question, might have an interesting effect as well.&lt;/p&gt;
&lt;p&gt;As for myself, I&amp;rsquo;ve gotten off of Facebook entirely. I&amp;rsquo;ve taken conscious steps to make it more difficult for me to get on Twitter. When I sleep, my phone is in a different room. Whenever I notice myself reaching for an app when I have nothing to do, I turn it off, delete it, or otherwise force myself to be more deliberate about my technology habits.&lt;/p&gt;
&lt;p&gt;When I have kids, I intend on acquainting them with the workings of computers and algorithms. While I don&amp;rsquo;t expect (or want) all of my kids to become computer scientists, I want them all to be aware of the mechanisms at play to help them be on their guard for addictive and manipulative technologies like social media.&lt;/p&gt;
&lt;p&gt;I am deeply worried about where things are going, and I do not think the solution to misinformation and polarization is more technology or AI or some other technological solution. It cannot be. They can help if employed correctly, but they cannot function as the cure. I think the only possible solutions will come from better regulation to shift the incentives of these massive technology companies and better education so that people can be more mindful, more deliberate, and less vulnerable to addiction or deception.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Note that &amp;ldquo;technology&amp;rdquo; is more than a physical device. Technology includes things like writing or a mathematical formula. See &lt;a href=&#34;https://lambdaland.org/posts/2020-08-16-book-review-technopoly-v2#what-is-technology&#34;&gt;my post on &lt;em&gt;Technopoly&lt;/em&gt;&lt;/a&gt; for a little more detail on this subject.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Thoughts on Goals in Programming Language Design</title>
      <link>https://lambdaland.org/posts/2020-08-04-thoughts-on-pl-design-goals/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-08-04-thoughts-on-pl-design-goals/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been thinking about programming languages a lot recently. A question I asked myself was: why do we work on, refine, and create new programming languages?&lt;/p&gt;
&lt;p&gt;I thought of several reasons, but they seemed to boil down into two broader reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Better abstractions and more automation&lt;/strong&gt;: some languages automate and ease some tedious tasks like memory management, concurrency, or type annotations. Almost all languages give you some ways of creating abstractions that let you reason with concepts in your problem domain, but different languages do this in different ways.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;More precisely describe what you want&lt;/strong&gt;: languages like Haskell let you describe the behavior of your program very precisely with an expressive type system. This lets you write &lt;em&gt;correct&lt;/em&gt; programs with a high degree of confidence.&lt;/p&gt;
&lt;p&gt;Other languages give you a different level of control: C lets you manipulate bits at arbitrary memory locations and evaluate them as you please. You can get very good performance from a well-tuned C program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;rsquo;s some overlap between these domains for sure, but these goals often seem to conflict one another: the first objective seems optimal for &lt;em&gt;drafting&lt;/em&gt; programs. The second group is more tuned for long-running projects or programs with specific constraints. Permissive languages like Perl, Ruby, and most Lisps seem designed with the first objective in mind and are very easy to use when exploring an idea. They can be expressive and concise. More demanding languages, like Rust or Haskell, seem optimized for a long-lived project or a program with intensive system resource constraints or performance requirements. Maybe some people can draft in Rust, but I find it more difficult to whip up something in Rust than Perl or Elixir.&lt;/p&gt;
&lt;p&gt;Can we reconcile these two goals? Maybe. I think the further away you get away from the machine—trading some fine-grained control for abstraction—the closer the goals can converge. You can have a language well-suited for discovering an idea, which can then let you evolve your program into a more correct, reliable version.&lt;/p&gt;
&lt;p&gt;In the end, I don&amp;rsquo;t think there is a perfect language. But some languages are more perfect than others! Hopefully I&amp;rsquo;ll strike on something interesting in my fumbling about with PL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transitioning to GUI&#39;d Emacs on macOS</title>
      <link>https://lambdaland.org/posts/2020-07-22-gui-emacs/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-07-22-gui-emacs/</guid>
      <description>&lt;p&gt;I went on an adventure today. I left behind the stable comforts of the terminal and compiled bleeding-edge Emacs that uses a native window system.&lt;/p&gt;
&lt;p&gt;This is a big deal for me. As long as I can remember, I&amp;rsquo;ve used Emacs from within a terminal. I&amp;rsquo;ve decided to give the GUI&amp;rsquo;d Emacs a whirl.&lt;/p&gt;
&lt;h2 id=&#34;my-journey&#34;&gt;
  My Journey
  &lt;a class=&#34;anchor&#34; href=&#34;#my-journey&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m running macOS Catalina (10.15.5). Originally I tried using the pre-built packages via brew (&lt;code&gt;brew cask install emacs&lt;/code&gt;) and those available at &lt;a href=&#34;https://emacsformacosx.com&#34;&gt;Emacs for Mac OS X&lt;/a&gt;. However, all these pre-built binaries crashed on Catalina. I guess it&amp;rsquo;s a problem with Catalina. 🙄&lt;/p&gt;
&lt;p&gt;So, I decided to try building from source. I cloned the Emacs source code directly from &lt;a href=&#34;https://git.savannah.gnu.org/git/emacs.git&#34;&gt;Savannah&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://git.savannah.gnu.org/git/emacs.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I cd&amp;rsquo;d into that directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd emacs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you&amp;rsquo;ve got the bleeding-edge development Emacs. You might want to check out and pull a different branch or tag. I decided to check out the &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/g9vdd0/bringing_gnu_emacs_to_native_code_at_the_european/&#34;&gt;native-compilation&lt;/a&gt; branch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout feature/native-comp
$ git pull origin feature/native-comp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I&amp;rsquo;m pretty sure those are the right commands; stuff got a little funky while I was building.)&lt;/p&gt;
&lt;p&gt;I exported a magic&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; environment variable that I got from a &lt;a href=&#34;https://emacs.stackexchange.com/a/54433/19088&#34;&gt;helpful Emacs StackExchange post&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ export LIBXML2_CFLAGS=&amp;quot;-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libxml2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After exporting that variable, I ran &lt;code&gt;configure&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./configure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I ran &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will create a binary at &lt;code&gt;src/emacs&lt;/code&gt; that you can run to test to make sure that all is working as it should. If you&amp;rsquo;re satisfied with that emacs configuration, you can bundle it up into a stand-alone application:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create &lt;code&gt;Emacs.app&lt;/code&gt; inside of the &lt;code&gt;nextstep/&lt;/code&gt; directory. You are free to move that around:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mv nextstep/Emacs.app /Applications/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also went into &lt;code&gt;System Preferences &amp;gt; Security&lt;/code&gt; and gave Emacs Full Disk Access. I heard of some people having difficulty accessing iCloud files from Emacs and this cleared it up. I haven&amp;rsquo;t had any difficulty—I just wanted Emacs to have full access anyway.&lt;/p&gt;
&lt;h2 id=&#34;niceties&#34;&gt;
  Niceties
  &lt;a class=&#34;anchor&#34; href=&#34;#niceties&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I still use the terminal a &lt;em&gt;lot&lt;/em&gt; (though I might use it less directly if I can get comfortable with &lt;code&gt;ansi-term&lt;/code&gt; mode) so I made a few shortcuts for myself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I symlinked &lt;code&gt;/usr/local/bin/emacs&lt;/code&gt; to &lt;code&gt;/Applications/Emacs.app/Contents/MacOS/Emacs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ cd /usr/local/bin
 $ ln -s /Applications/Emacs.app/Contents/MacOS/Emacs emacs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; is already in my &lt;code&gt;PATH&lt;/code&gt;, so now I can just type &lt;code&gt;emacs&lt;/code&gt; on the command line and it will fire it up just as it used to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I created an alias like this in my &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; alias &#39;e&#39;=&#39;emacs -nw&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That way, when I&amp;rsquo;m in a terminal and type &lt;code&gt;e &amp;lt;filename&amp;gt;&lt;/code&gt; it will open up the file in Emacs &lt;em&gt;in the terminal&lt;/em&gt;. I might change that behavior at some point in the future, but that will help me transition for the time being.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I installed the &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell&#34;&gt;exec-path-from-shell package&lt;/a&gt; so that Emacs could fire off processes like &lt;code&gt;elixir&lt;/code&gt; when using &lt;code&gt;lsp-mode&lt;/code&gt;. Otherwise, you get errors like this inside the &lt;code&gt;*lsp::stderr*&lt;/code&gt; buffer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; line 66: exec: elixir: not found
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
  Conclusion
  &lt;a class=&#34;anchor&#34; href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Why did I do this? Because I was a little bored. I also wanted to experiment with some of the more extensive key binding opportunities that a full-bodied Emacs offers.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll write updates to my blog as time goes on. I might decide to switch back to regular-old Emacs in the terminal. Right now, however, I&amp;rsquo;m enjoying the GUI&amp;rsquo;d version.&lt;/p&gt;
&lt;p&gt;You can see my Emacs config on &lt;a href=&#34;https://github.com/ashton314/.dotfiles&#34;&gt;my GitHub&lt;/a&gt;. Feel free to drop me a line if you have any questions.&lt;/p&gt;
&lt;h2 id=&#34;update-2020-07-23&#34;&gt;
  UPDATE 2020-07-23
  &lt;a class=&#34;anchor&#34; href=&#34;#update-2020-07-23&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;After using Emacs 28.0.5 for a day, here&amp;rsquo;s what I came away with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No crashes. Things did start getting a little strange when I tried selecting text with the mouse in ansi-term without switching from character-mode to line-mode; I ended up killing that ansi-term session and creating a new one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I really missed having frames all in the same place and switching between them with &lt;code&gt;C-x 5 o&lt;/code&gt;. I found a &lt;em&gt;very&lt;/em&gt; acceptable replacement; as of Emacs 27, you can enable the built-in &lt;code&gt;tab-bar-mode&lt;/code&gt; and switch between &amp;ldquo;tabs&amp;rdquo; with &lt;code&gt;C-x t o&lt;/code&gt;, create new ones with &lt;code&gt;C-x t 2&lt;/code&gt;, etc. It looks just like switching between frames does in the terminal, minus the display of which tab you&amp;rsquo;re on. I haven&amp;rsquo;t figured out how to turn that on yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the tab-bar stuff, I created a tab and fired up ansi-term. I was able to switch back and forth between my editor tab and the console tab as I would between iTerm tabs or if I were using &lt;code&gt;C-z&lt;/code&gt; to suspend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inputting special characters via the keyboard has changed. No longer can I hit &lt;code&gt;alt-shift--&lt;/code&gt; to insert an em-dash. Instead, I turn on TeX mode input (&lt;code&gt;C-\ TeX RET&lt;/code&gt;) and I can type the TeX character sequence (in the case of an em-dash, you just type a normal dash three times) and it will be inserted into the buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, I&amp;rsquo;m finding this switch a decently comfortable one. I&amp;rsquo;m not giving up very much, and I&amp;rsquo;m gaining a decent amount. I&amp;rsquo;ve had some difficulty getting all the colors in the theme how I like them—I might just give up for a bit and see if I get used to them.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I&amp;rsquo;m not entirely sure what it does. I know that it didn&amp;rsquo;t work before using this environment variable, and now it works after I tried using it.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Programming Languages and Typography</title>
      <link>https://lambdaland.org/posts/2020-06-15-languages-and-fonts/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-06-15-languages-and-fonts/</guid>
      <description>&lt;p&gt;An analogy occurred to me this evening as I was thinking about programming language design:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Choosing good keywords and function names is like picking a good font; the ideas conveyed may be the same, but a change can drastically impact legibility and enjoyment of use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PHP does a spectacular job of providing a &lt;em&gt;bad&lt;/em&gt; example. It&amp;rsquo;s like the Comic Sans of programming languages. Now there are &lt;a href=&#34;https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/&#34;&gt;many reasons why PHP is not a good language&lt;/a&gt;—I&amp;rsquo;d like to investigate this particular aspect of its design here briefly.&lt;/p&gt;
&lt;p&gt;There are ~55 &lt;a href=&#34;https://www.php.net/manual/en/ref.array.php&#34;&gt;functions in PHP that start with &lt;code&gt;array_&lt;/code&gt;&lt;/a&gt;. Why? Why would you need to call the &lt;code&gt;map&lt;/code&gt; operator &lt;code&gt;array_map&lt;/code&gt;? Or &lt;code&gt;array_filter&lt;/code&gt;, etc. Most other languages just call it &lt;code&gt;map&lt;/code&gt; and leave it at that.&lt;/p&gt;
&lt;p&gt;You might argue that that is a superficial difference: you are still doing the same thing so the expressive power of PHP is the same as whatever other languages you are comparing it to. I disagree. That extra clutter of the &lt;code&gt;array_&lt;/code&gt; prefix &lt;em&gt;should not&lt;/em&gt; be there and it&amp;rsquo;s purely clutter.&lt;/p&gt;
&lt;p&gt;A bad font changes the tone and the perception of a body of text. Likewise, shoddy selection of keywords and names in a language changes it&amp;rsquo;s tone and feel.&lt;/p&gt;
&lt;p&gt;Other examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;PHP&amp;rsquo;s &lt;code&gt;function&lt;/code&gt; keyword and other similar atrocities&lt;/li&gt;
&lt;li&gt;Common Lisp (the length of its function names are a shortcoming)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ll continue fleshing this iut more, but these are my thoughts at the present&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computers and Abstractions</title>
      <link>https://lambdaland.org/posts/2020-05-20-computers-and-abstractions/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-05-20-computers-and-abstractions/</guid>
      <description>&lt;p&gt;Computers are funny things. At the lowest level they&amp;rsquo;re just a pile of ones and zeros that we assign meaning to. It&amp;rsquo;s something you can easily take for granted, but there&amp;rsquo;s a disconnect with how we talk about how things operate at the hardware level and then again at the software level.&lt;/p&gt;
&lt;p&gt;Since writing a compiler, I&amp;rsquo;ve been able to bridge that gap in part. The fundamental idea is that we represent some meaning in a concrete, though still high-level form. Example: we might represent an entry in a contact book with a struct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;defstruct&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:string&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:integer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The critical step is this: we find a way to &lt;em&gt;consistently represent that entity in the physical realm&lt;/em&gt;. We pack up a bunch of ones and zeros next to each other that are spaced apart at the right distances. Operations on bits in that neighborhood have to obey the rules we put in place. (E.g. treat the bits representing the age as a single thing, the bits representing the name can be broken up along character boundaries, etc.) Once our operations are complete, assuming our rules—our invariants—were never violated, then we can ascribe new meaning to the resulting mass of ones and zeros.&lt;/p&gt;
&lt;p&gt;Perhaps this isn&amp;rsquo;t that profound. Or maybe it&amp;rsquo;s more profound than my attempt to talk about it shoes. I&amp;rsquo;m sure I&amp;rsquo;ll gain more insight about this phenomenon as time goes on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting Fresh</title>
      <link>https://lambdaland.org/posts/2020-05-09-starting-fresh/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-05-09-starting-fresh/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been building a &lt;a href=&#34;https://github.com/ashton314/lambda-x86&#34;&gt;compiler&lt;/a&gt; for a small lambda calculus that compiles to x86. It&amp;rsquo;s pretty broken, and I decided to start from scratch. I checked out a new branch in Git, and then &lt;strong&gt;deleted&lt;/strong&gt; the entirety of my compiler before I had a chance to do anything else.&lt;/p&gt;
&lt;p&gt;It hurt. But it was a good kind of hurt.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t usually just blow everything away like that. Even this time, I&amp;rsquo;m keeping many of my auxiliary functions. I&amp;rsquo;m not rewriting the parser or some of my x86-helper routines. Those can stay.&lt;/p&gt;
&lt;p&gt;I just wanted a blank slate. It&amp;rsquo;s nice having Git because I know I can always go back, but I&amp;rsquo;m not sure I will. I might glance back at my old branch occasionally, but by and large I&amp;rsquo;m starting fresh.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Fresh starts are important. I think one silver lining found among the clouds of this COVID-19 madness is that this is a chance to start fresh for so many people. Yes, it&amp;rsquo;s hard, and yes, there is lots of sadness, uncertainty, and grief. Take advantage of your life being paused and let this be a fresh start for &lt;em&gt;something&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;My wife is working on a writing habit. I&amp;rsquo;m working on developing research-oriented habits. I&amp;rsquo;m trying to read a paper every day—it&amp;rsquo;s not going &lt;em&gt;super&lt;/em&gt; well, but I am improving!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s dark enough outside. Look for the silver lining and start fresh.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSD on a Raspberry Pi</title>
      <link>https://lambdaland.org/posts/2020-02-12-freebsd-on-a-raspberry-pi/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2020-02-12-freebsd-on-a-raspberry-pi/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a FreeBSD guy. My first computer was a FreeBSD machine that my dad had running in a closet. I learned how to use Emacs as well as the command line on that black-screen white-text no-mouse interface. That&amp;rsquo;s how real programmers spend their childhood! 😎 😜&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve only heard good things about FreeBSD. While not known as particularly desktop-friendly (various Linux distros win here) I&amp;rsquo;ve heard tales of its rock-solid stability. I wanted to try running on FreeBSD again, just to see what all the fuss was about.&lt;/p&gt;
&lt;h1 id=&#34;installing&#34;&gt;
  Installing
  &lt;a class=&#34;anchor&#34; href=&#34;#installing&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Installing was relatively straight forward. I followed the instructions
&lt;a href=&#34;https://wiki.freebsd.org/action/show/arm/Raspberry%20Pi?action=show&amp;amp;redirect=FreeBSD%2Farm%2FRaspberry&amp;#43;Pi&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once I got the card flashed (took about an hour) and booted, I reset the
passwords for users &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;freebsd&lt;/code&gt;. Note that at time of writing
WiFi wasn&amp;rsquo;t supported; I had to hard-link an Ethernet cable. It found
the connection without any trouble, so that was nice.&lt;/p&gt;
&lt;h1 id=&#34;initial-setup&#34;&gt;
  Initial Setup
  &lt;a class=&#34;anchor&#34; href=&#34;#initial-setup&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;setting-up-the-clock&#34;&gt;
  Setting up the clock
  &lt;a class=&#34;anchor&#34; href=&#34;#setting-up-the-clock&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebsd.org/doc/handbook/network-ntp.html&#34;&gt;https://www.freebsd.org/doc/handbook/network-ntp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The clock is necessary to start working with the ports. Set the config
variables in &lt;code&gt;/etc/rc.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;ntpd_enable=YES
ntpd_sync_on_start=YES  # This one might not be necessary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should be able to just run this without rebooting. (I ended up
rebooting, but I think I did things out of order.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service ntpd start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;installing-the-port-tree&#34;&gt;
  Installing the port tree
  &lt;a class=&#34;anchor&#34; href=&#34;#installing-the-port-tree&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebsd.org/doc/handbook/ports-using.html&#34;&gt;https://www.freebsd.org/doc/handbook/ports-using.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run the following: (I think you can do this in any directory)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;portsnap fetch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;portsnap extract
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;installing-the-critical-tools-emacs-and-git&#34;&gt;
  Installing the critical tools: Emacs and Git
  &lt;a class=&#34;anchor&#34; href=&#34;#installing-the-critical-tools-emacs-and-git&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;I tried going into &lt;code&gt;/usr/ports/editors/emacs/&lt;/code&gt; and running
&lt;code&gt;make install&lt;/code&gt;, but I must have had an option wrong because it tried
installing&amp;hellip; I think the entire X Windowing System. Yikes.&lt;/p&gt;
&lt;p&gt;I gave up after about a day and instead ran &lt;code&gt;pkg install emacs-nox&lt;/code&gt; and
&lt;code&gt;pkg install git&lt;/code&gt;; those ran pretty quickly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switching from Helm to Ivy</title>
      <link>https://lambdaland.org/posts/2019-12-13-switching-to-ivy-from-helm/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2019-12-13-switching-to-ivy-from-helm/</guid>
      <description>&lt;p&gt;Yet again, I&amp;rsquo;ve tweaked my &lt;a href=&#34;https://github.com/ashton314/.dotfiles&#34;&gt;emacs configuration&lt;/a&gt;. The big change this time is switching to &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy&lt;/a&gt; from &lt;a href=&#34;https://emacs-helm.github.io/helm/&#34;&gt;Helm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to say right off the bat that Helm is a great tool. I used it for several months and enjoyed it. Once thing that I love about helm is how discoverable it makes commands and functions. helm also got me into using bookmarks. I don&amp;rsquo;t keep many bookmarks; I tend to collect a few when working on a multi-file project long-term. The bookmark that I use most consistently is to my &lt;code&gt;.emacs&lt;/code&gt; file; these days I&amp;rsquo;m fiddling constantly with my settings.&lt;/p&gt;
&lt;p&gt;I switched to Ivy because I found its completion options to be &lt;em&gt;killer&lt;/em&gt; when using &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt;: being able to fuzzy match branch names was sooo nice. I&amp;rsquo;ve also liked how Ivy handled completing file names. I &lt;em&gt;feel&lt;/em&gt; faster. I&amp;rsquo;m not sure if I&amp;rsquo;m that much faster navigating around my file tree with it, but it does feel nice. There&amp;rsquo;s so much that Ivy makes better: any function using &lt;code&gt;completing-read&lt;/code&gt; benefits from Ivy&amp;rsquo;s fuzzy matching.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been a gradual process; there&amp;rsquo;s a lot that Helm does out-of-the-box that Ivy took some tweaking to get right. For example, sorting candidates for &lt;code&gt;M-x&lt;/code&gt; by most recently used was one of my favorite features of Helm. I had to install &lt;a href=&#34;https://melpa.org/#/ivy-prescient&#34;&gt;Ivy Prescient&lt;/a&gt; to get the behavior I wanted. On top of that, I needed &lt;a href=&#34;https://github.com/abo-abo/swiper#counsel&#34;&gt;Counsel&lt;/a&gt; to show the key bindings next to their functions in &lt;code&gt;M-x&lt;/code&gt;. Finally, I like to be able to fuzzy match anywhere within the command name, so I took out the leading &lt;code&gt;^&lt;/code&gt; in counsel with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;use-package&lt;/span&gt; counsel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ivy-configure &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;counsel-M-x&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:initial-input&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;
  Conclusion
  &lt;a class=&#34;anchor&#34; href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Both Helm and Ivy are fantastic packages. They&amp;rsquo;ve changed the way I use Emacs and I feel like they&amp;rsquo;ve made me substantially more productive and happy. If you haven&amp;rsquo;t used either, you might want to start off with Helm for a nice out-of-the-box experience with loads of features and sensible defaults. However, if you just would like to be able to fuzzy-match things, Ivy is your library. It&amp;rsquo;s fast, clean, and configurable. The only problem is that it sometimes requires configuration before it&amp;rsquo;s exactly how you like it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Macros with Elixir</title>
      <link>https://lambdaland.org/posts/2019-02-27-macros-with-elixir/</link>
      <pubDate>Wed, 27 Feb 2019 16:36:53 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2019-02-27-macros-with-elixir/</guid>
      <description>&lt;p&gt;I gave a presentation at the Utah Elixir Meetup this February. Here&amp;rsquo;s the recording of my presentation:&lt;/p&gt;
&lt;figure class=&#34;kg-card kg-embed-card&#34;&gt;&lt;iframe width=&#34;480&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/8gZP3oixr4A?feature=oembed&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8gZP3oixr4A&#34;&gt;Watch on YouTube&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I&amp;rsquo;ve posted the slides as an HTML file, along with some materials to follow along with, on my &lt;a href=&#34;https://github.com/ashton314/elixir-macro-demo&#34;&gt;GitHub account&lt;/a&gt;. Check it out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Citations with Pandoc</title>
      <link>https://lambdaland.org/posts/2019-02-06-citations-with-pandoc/</link>
      <pubDate>Wed, 06 Feb 2019 05:03:26 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2019-02-06-citations-with-pandoc/</guid>
      <description>&lt;p&gt;Today I figured out how to get &lt;a href=&#34;https://pandoc.org&#34;&gt;Pandoc&lt;/a&gt; to automatically generate MLA citations for me!&lt;/p&gt;
&lt;p&gt;I used Pandoc and the Biblatex bibliography format. What&amp;rsquo;s nice about this is that you can enter in all the information you know about the source, keep it nice and organized in a file, and then change the citation style on the fly. Imagine if you thought you had to use MLA, but then realized you needed to switch to APA citation styles. You can do that instantly with Pandoc and Biblatex.&lt;/p&gt;
&lt;p&gt;First, you&amp;rsquo;ll need &lt;a href=&#34;https://pandoc.org&#34;&gt;pandoc&lt;/a&gt; and &lt;a href=&#34;http://hackage.haskell.org/package/pandoc-citeproc&#34;&gt;pandoc-citeproc&lt;/a&gt;. (Instructions to install are on the Pandoc website. If you&amp;rsquo;re running macOS, you can use &lt;a href=&#34;brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install with &lt;code&gt;brew install pandoc&lt;/code&gt; and &lt;code&gt;brew install pandoc-citeproc&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Next, create a bibliography file. Pandoc can work with many different formats, outlined &lt;a href=&#34;https://pandoc.org/MANUAL.html#citations&#34;&gt;in their documentation&lt;/a&gt;, but I&amp;rsquo;ll show an example with Biblatex, the bibliography database format used with LaTeX.&lt;/p&gt;
&lt;p&gt;Example markdown file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Irresponsible Encryption
author: Ashton Wiersdorf
date: \today
bibliography: research/refs.bib
link-citations: true
cls: Modern Language Association 8th edition
---

Imagine a world where every phone call was tapped, where every purchase online could compromise your credit card, and where every one of your online accounts could be hacked. Imagine if every email you sent were scanned, analyzed, and the findings sold to the highest bidder. Imagine if your health, financial, and shopping records were public. That would be the end of our modern life as we know it. That is a real possiblity we are facing. (Especially if you use Gmail—Google has scanned the contents of emails in the past to serve targeted ads. [See @scroogled_blog]) Governments across the world—from the United States to Australia—are pushing or have passed legislation that mandates &amp;quot;exceptional access mechanisms&amp;quot;—means by which they can break encryption if they have a warrant to do so. They point to cases where criminals—from drug dealers to terrorists—have used encryption to conceal evidence against themselves. However, what they are asking for would have its consequences.



\pagebreak

# References
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how I have &lt;code&gt;bibliography: research/refs.bib&lt;/code&gt; at the top of the file. That lets Pandoc know where to go to find the biblography file. Then you can have a database file like this stored in &lt;code&gt;research/refs.bib&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@online{scroogled_blog,
	Annotation = {Ars Technica reports on this---the scary part is that Google was scanning emails in the first place.},
	Author = {Diane Greene},
	Crossref = {ars_scroogled},
	Date = {2017-06-23},
	Title = {As G Suite gains traction in the enterprise, G Suite&#39;s Gmail and consumer Gmail to more closely align},
	Url = {https://blog.google/products/gmail/g-suite-gains-traction-in-the-enterprise-g-suites-gmail-and-consumer-gmail-to-more-closely-align/},
	Urldate = {2019-02-05},
	Bdsk-Url-1 = {https://blog.google/products/gmail/g-suite-gains-traction-in-the-enterprise-g-suites-gmail-and-consumer-gmail-to-more-closely-align/}}

@online{ars_scroogled,
	Author = {Ron Amadeo},
	Date = {2017-06-23},
	Title = {Scroogled no more: Gmail won&#39;t scan e-mails for ads personalization},
	Url = {https://arstechnica.com/gadgets/2017/06/gmail-will-no-longer-scan-e-mails-for-ad-personalization/},
	Urldate = {2019-02-05},
	Bdsk-Url-1 = {https://arstechnica.com/gadgets/2017/06/gmail-will-no-longer-scan-e-mails-for-ad-personalization/}}

...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each entry has a &lt;em&gt;cite key&lt;/em&gt;: something that lets you refer to the citation from within your document. Note how in the markdown file I wrote &lt;code&gt;[See @scroogled_blog]&lt;/code&gt;. That gets replaced with the following in the final product:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…Google has scanned the contents of emails in the past to serve targeted ads. (See Greene 2017)…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And at the end of the paper, I get a nice-looking citation like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Greene, Diane. 2017. “As G Suite Gains Traction in the Enterprise, G Suite’s Gmail and Consumer Gmail to More Closely Align.” June 23, 2017. &lt;a href=&#34;https://blog.google/products/gmail/g-suite-gains-traction-in-the-enterprise-g-suites-gmail-and-consumer-gmail-to-more-closely-align/&#34;&gt;https://blog.google/products/gmail/g-suite-gains-traction-in-the-enterprise-g-suites-gmail-and-consumer-gmail-to-more-closely-align/&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To generate the finished product, I simply run &lt;code&gt;pandoc --filter pandoc-citeproc paper.md -o paper.pdf&lt;/code&gt;. Poof! Nicely formatted and automatic citations!&lt;/p&gt;
&lt;p&gt;To change the citation style, simply alter what is on the line starting with &lt;code&gt;cls:&lt;/code&gt; in the header. You can find a list of valid styles &lt;a href=&#34;https://www.zotero.org/styles&#34;&gt;here&lt;/a&gt;, with more information &lt;a href=&#34;https://citationstyles.org/authors/&#34;&gt;here&lt;/a&gt;. Good luck with your papers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marked Man</title>
      <link>https://lambdaland.org/posts/2019-01-24-marked-man/</link>
      <pubDate>Thu, 24 Jan 2019 03:54:51 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2019-01-24-marked-man/</guid>
      <description>&lt;p&gt;Marked Man (mm) is a little program I wrote to view Markdown files like UNIX man pages. (Because who wants to leave their terminal just to open a file?)&lt;/p&gt;
&lt;p&gt;It uses &lt;a href=&#34;https://pandoc.org&#34;&gt;Pandoc&lt;/a&gt; to convert between Markdown and the &lt;code&gt;groff&lt;/code&gt; format. As a happy side-effect, this program can read basically &lt;em&gt;anything&lt;/em&gt; as a man page: HTML, LaTeX, Word files (seriously), ePub, etc. Anything that Pandoc can read, Marked Man can handle.&lt;/p&gt;
&lt;h2 id=&#34;installing&#34;&gt;
  Installing
  &lt;a class=&#34;anchor&#34; href=&#34;#installing&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m working on getting this set up with &lt;a href=&#34;brew.sh&#34;&gt;Homebrew&lt;/a&gt;. For now, check out my GitHub repository &lt;a href=&#34;https://github.com/ashton314/homebrew-mm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semester Finished</title>
      <link>https://lambdaland.org/posts/2018-12-14-semester-finished/</link>
      <pubDate>Fri, 14 Dec 2018 07:08:48 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2018-12-14-semester-finished/</guid>
      <description>&lt;p&gt;I finished the semester! This is how I feel:&lt;/p&gt;
&lt;figure class=&#34;kg-card kg-embed-card&#34;&gt;&lt;iframe width=&#34;480&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/QUAItQmq-LU?feature=oembed&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/figure&gt;
&lt;p&gt;Don&amp;rsquo;t you?&lt;/p&gt;
&lt;p&gt;Well, I still have finals. But those are easy compared to the projects I&amp;rsquo;ve had to push out. I&amp;rsquo;ll probably write about my escapades later. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Editors, or The Tools of my Trade</title>
      <link>https://lambdaland.org/posts/2018-12-06-editor-apology/</link>
      <pubDate>Thu, 06 Dec 2018 06:02:09 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2018-12-06-editor-apology/</guid>
      <description>&lt;p&gt;I spend a fair portion of every day writing programs. As with all professions, using the right tools makes a huge difference in my productivity and general happiness. Having good tools helps me keep my gumption up.&lt;/p&gt;
&lt;p&gt;One of my favorite books is &lt;em&gt;Zen and the Art of Motorcycle Maintenance&lt;/em&gt;. Contrary to what the title suggests, this book is actually not about motorcycles. It’s about a lot of things; one topic is about tools and caring about your trade.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… By far the most frustrating gumption trap is inadequate tools. Nothing’s quite so demoralizing as a tool hang-up. Buy good tools as you can afford them and you’ll never regret it.‌‌(ibid. p.g. 291)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me, my most important tool is my text editor: manipulating source code is what I spend ALL DAY doing. I’ve selected &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Emacs&#34;&gt;Emacs&lt;/a&gt; as my primary text editor.&lt;/p&gt;
&lt;p&gt;Lots of programmers use what’s called an &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt; If programming were cooking, then an IDE would be a knife that has a sink, a strainer, and a toaster-oven built into it.&lt;/p&gt;
&lt;p&gt;I find IDE’s visually distracting. Everything is done with buttons that you click. Emacs has so much more screen devoted to content.&lt;/p&gt;
&lt;p&gt;Emacs and Vim &lt;em&gt;do&lt;/em&gt; have steeper learning curves. This is in part because the absence buttons make the features only discoverable via manuals. When working with an IDE, the presense of buttons hints at the existence of certain features.&lt;/p&gt;
&lt;p&gt;I find it a shame when people don&amp;rsquo;t read, prefering a video tutorial or the like. Emacs’s features are very discoverable, but not in the way most people are used to. The &lt;code&gt;apropos-function&lt;/code&gt; command is terribly useful—if you think a certain command &lt;em&gt;should&lt;/em&gt; exist, searching all available function names for a particular string has helped me find both what I&amp;rsquo;ve gone looking for, and what I didn&amp;rsquo;t know I wanted!&lt;/p&gt;
&lt;p&gt;The advantage to using keyboard only navigation is that hundreds of commands are immediately available all the time, without having to dig through menus or such. It takes me the same amount of time to access complicated commands as it does moving around a file.&lt;/p&gt;
&lt;p&gt;Again, from &lt;em&gt;Zen and the Art of Motorcycle&lt;/em&gt; &lt;em&gt;Maintenance:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…One of the first warning signs of impatience is frustration at not being able to lay your hand on the tool you need right away.‌‌(ibid. p.g. 286)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moving a mouse takes me out of my flow, which slows me down and leads to gumption traps. If something takes longer, I&amp;rsquo;m more reluctant to do it. That means my productivity drops.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now, you might have used a word processor for text editing all your life. Or perhaps you&amp;rsquo;re comfortable with your IDE. I encourage you to stretch beyond what you&amp;rsquo;re comfortable with, and learn Emacs. An investment in a powerful text editor will change how you consider how you program. Editing will become more fluid, and the barrier of buttons and menus will fade away.&lt;/p&gt;
&lt;h2 id=&#34;learning-emacs&#34;&gt;
  Learning Emacs
  &lt;a class=&#34;anchor&#34; href=&#34;#learning-emacs&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;There is an index of learning resources &lt;a href=&#34;https://www.emacswiki.org/emacs/LearningEmacs&#34;&gt;here&lt;/a&gt;. If you&amp;rsquo;re just looking for a cheat sheet, check &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsCrashCourse&#34;&gt;this link&lt;/a&gt; out. Also, see &lt;a href=&#34;https://ashton.wiersdorf.org/emacs-tips-and-tricks/&#34;&gt;my cheat sheet&lt;/a&gt;. (I update this one occasionally.)&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re coming from an IDE and miss feature X, you might be able to find the corresponding Emacs feature &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsForDevStudioUsers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;picture-credit&#34;&gt;
  Picture Credit
  &lt;a class=&#34;anchor&#34; href=&#34;#picture-credit&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I found this via a Google Image search; the origional file came from &lt;a href=&#34;https://batsov.com/articles/2011/11/11/blogging-like-a-hacker-evolution/&#34;&gt;this blog post&lt;/a&gt;, which I think resonates with mine quite well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Induction and Side-Effects</title>
      <link>https://lambdaland.org/posts/2018-10-08-induction-and-side-effects/</link>
      <pubDate>Mon, 08 Oct 2018 18:23:28 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2018-10-08-induction-and-side-effects/</guid>
      <description>&lt;p&gt;Today in my proofs class (MATH 290 at BYU) we talked about the concept &lt;a href=&#34;https://en.wikipedia.org/wiki/Mathematical_induction&#34;&gt;induction&lt;/a&gt;. I like this, because it sounds a lot like recursion.&lt;/p&gt;
&lt;p&gt;On the Wikipedia article, there&amp;rsquo;s an excerpt from a book that illustrates the principle with an analogy using a ladder:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mathematical induction proves that we can climb as high as we like on a ladder, by proving that we can climb onto the bottom rung (the basis) and that from each rung we can climb up to the next one (the step).
— &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Concrete_Mathematics&#34;&gt;Concrete Mathematics&lt;/a&gt;&lt;/em&gt;, page 3 margins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem with this, however, is that climbing a ladder has side-effects! Namely, when you climb up a step, you get tired. Eventually, there comes a point where you get so tired that you collapse from exhaustion, fall off the ladder and smack into the hard, uncaring ground of reality below.&lt;/p&gt;
&lt;p&gt;This will happen to you too if your recursive functions have side effects: you code will be &lt;em&gt;really&lt;/em&gt; hard to debug, and eventually, a bug somewhere in the state of your system will deftly shove your process off the call stack to crash on the cold, hard, uncaring silicon below.&lt;/p&gt;
&lt;p&gt;Photo by Robin Joshua on Unsplash&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Life Hacks: Text Notifications</title>
      <link>https://lambdaland.org/posts/2018-08-11-life-hacks-text-notifications/</link>
      <pubDate>Sat, 11 Aug 2018 17:49:48 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2018-08-11-life-hacks-text-notifications/</guid>
      <description>&lt;h1 id=&#34;life-hacks-text-notifications&#34;&gt;
  Life Hacks: Text Notifications
  &lt;a class=&#34;anchor&#34; href=&#34;#life-hacks-text-notifications&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;So many notifications come to us in the form of an audible alert, and this can sometimes be inconvenient. Who likes having their phone go off in church? The problem is that sound propagates regardless of the intended target. Touch, on the other hand, is an inherently personal sensation. Setting your phone to vibrate lets you know you&amp;rsquo;re being alerted, without notifying everyone else in the room as well.&lt;/p&gt;
&lt;p&gt;Unless you read Braille, touch has far less bandwidth than sound. However, you can pack a small amount of information into a vibration, like who&amp;rsquo;s calling or texting you. There&amp;rsquo;s a sweet feature on iPhones that lets you set custom vibration patterns for your contacts. Here&amp;rsquo;s how to set it up:&lt;/p&gt;
&lt;p&gt;Go to your &amp;ldquo;Contacts&amp;rdquo; app. I&amp;rsquo;ve got a version of my personal contact card that I AirDrop to people when they want my contact information. I&amp;rsquo;ll use that to demonstrate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/content/images/2018/08/IMG_4858.jpg&#34; alt=&#34;My contact card&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hit &lt;code&gt;Edit&lt;/code&gt; in the top right corner, then scroll down until you see &lt;code&gt;Text Tone&lt;/code&gt;. Click on that.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/content/images/2018/08/IMG_4859.jpg&#34; alt=&#34;The contact edit screen&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see a bunch of options where you can set a custom ringtone for that person. You can &lt;em&gt;also&lt;/em&gt; set a custom vibration pattern. Right now, mine is set to &amp;ldquo;Default&amp;rdquo;. Go ahead an click on that.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/content/images/2018/08/IMG_4860.jpg&#34; alt=&#34;Vibration edit screen&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are a bunch of standard patterns you can choose from. You can also create some custom ones! I have a lot of custom vibrations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/content/images/2018/08/IMG_4864.jpg&#34; alt=&#34;My custom vibrations&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Down at the very bottom of the list is an option to create a new one. Tapping on that will give you a screen like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/content/images/2018/08/IMG_4862.jpg&#34; alt=&#34;Screenshot of new vibration editor&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is what setting a new vibration pattern looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/content/images/2018/08/IMG_4863.jpg&#34; alt=&#34;Creating a new vibration in progress&#34; /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I encode the initials of my most frequent contacts in &lt;a href=&#34;https://en.wikipedia.org/wiki/Morse_code&#34;&gt;Morse Code&lt;/a&gt;. It lets me know who&amp;rsquo;s texting me without having to take my phone out of my pocket. It helps me know if I should answer immediately, or if the conversation can wait for a minute or two. It took me a week or two to be able to distinguish between the texts, but now I can recognize who is texting or calling me immediately!&lt;/p&gt;
&lt;p&gt;Does anyone know if Android supports the same? Let me know, and I&amp;rsquo;ll post about that here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note to people from Facebook: I won&amp;rsquo;t know if you tell me via one of the contact methods I talked about &lt;a href=&#34;https://ashton.wiersdorf.org/2018/06/23/leaving-facebook/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drafting</title>
      <link>https://lambdaland.org/posts/2017-11-18-drafting/</link>
      <pubDate>Sat, 18 Nov 2017 01:27:13 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2017-11-18-drafting/</guid>
      <description>&lt;p&gt;I once asked my dad over email how to improve my the potency of my words and thoughts. His reply came back as one word:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Revision.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good writing does not emerge spontaneously; it comes as one practices writing. A &amp;ldquo;draft&amp;rdquo; is a pass of writing a particular work. It&amp;rsquo;s like sketching in art: when an artist starts a painting, they usually start with a rough sketch outlining where the ﬁgures will be, what the landscape will be like, etc. These sketches are composed of many lines: each coming closer to their ﬁnal position.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.leonardodavinci.net/images/drawings/rearing-horse.jpg&#34; alt=&#34;Rearing Horse by Leonardo da Vinci&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When I draft, I start out with a few different freewrites. I usually start with a stream of consciousness to get my ideas out on paper and to sort of flesh out what I actually want to talk about. Then I will beat out a very rough draft. After this initial draft, I usually will have a good idea of how I want to treat the subject matter. I will do things like read my paper aloud to hear how it flows, check for grammatical inconsistencies, look for more concise phrases that convey my ideas more clearly. Occasionally I will decide that I need to change how I structure my argument entirely. In these situations I will often do a complete rewrite.&lt;/p&gt;
&lt;p&gt;I usually use something akin to &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_versioning#Degree_of_compatibility&#34;&gt;semantic versioning&lt;/a&gt;—the first version number of my draft indicates the major write of the paper, (e.g. 0.0.1 for the rough draft, 1.0.0 for the first full draft after the rough draft, 2.0.0 for the next full rewrite, etc.) the second number might indicate significant changes in the text, but not complete structural changes, and the third number indicates minor changes, such as spelling and grammar errors.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t follow this system too rigorously; it&amp;rsquo;s just a kind of fun thing I use to keep track of my drafts. My brain is messy some times, and I&amp;rsquo;m okay with that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rapid Website Development with Mojolicious and Polymer</title>
      <link>https://lambdaland.org/posts/2017-11-09-quick-website-programming-with-mojolicious-and-polymer/</link>
      <pubDate>Thu, 09 Nov 2017 06:19:12 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2017-11-09-quick-website-programming-with-mojolicious-and-polymer/</guid>
      <description>&lt;p&gt;My girlfriend works for BYU SA—it&amp;rsquo;s the division of BYU that&amp;rsquo;s responsible for planning and running events. As part of her job, she has to review song lyrics and make sure that the song is okay to play at BYU functions.&lt;/p&gt;
&lt;p&gt;This can get rather irksome. Imagine reading text &lt;em&gt;looking&lt;/em&gt; for vulgar words or phrases. Yuck. I took some time this evening to write a little website that checks &lt;a href=&#34;http://metrolyrics.com&#34;&gt;MetroLyrics&lt;/a&gt; for any vulgar words or phrases. I have an extensible blacklist which gets initialized at server start by some phrases from &lt;a href=&#34;https://www.frontgatemedia.com/a-list-of-723-bad-words-to-blacklist-and-how-to-use-facebooks-moderation-tool/&#34;&gt;FrontGate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I coded this up with &lt;a href=&#34;http://mojolicious.org&#34;&gt;Mojolicious&lt;/a&gt; and &lt;a href=&#34;https://www.polymer-project.org&#34;&gt;Polymer Web Components&lt;/a&gt;. Polymer might have been a little overkill, but it saved me from writing lots of boring jQuery to set variable.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the site looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lambdaland.org/content/images/2017/11/Screen-Shot-2017-11-08-at-11.12.02-PM.png&#34; alt=&#34;Sing Clearly&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can look at the code for the repository &lt;a href=&#34;https://github.com/ashton314/sing_clearly&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This all took about 3 hours, the last of which was spent mostly getting some of the finer points of the user interface to work.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d be happy to get some contributions to my project, if anyone is feeling a little bored. ;-) Some more robust song searching would be nice, as well as better heuristics for bad phrases and whatnot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eh, Docker, we have a problem here…</title>
      <link>https://lambdaland.org/posts/2017-10-26-eh-blog-we-have-a-problem-here/</link>
      <pubDate>Thu, 26 Oct 2017 01:07:34 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2017-10-26-eh-blog-we-have-a-problem-here/</guid>
      <description>&lt;p&gt;&lt;em&gt;Quick note for those who don&amp;rsquo;t know about Docker:&lt;/em&gt; &lt;a href=&#34;https://www.docker.com/what-docker&#34;&gt;Docker&lt;/a&gt; is a program that lets me take packaged-up programs (called &lt;em&gt;images&lt;/em&gt; or &lt;em&gt;containers&lt;/em&gt;) and run them without having to worry much about dependencies.&lt;/p&gt;
&lt;p&gt;Today I decided to upgrade my version of &lt;a href=&#34;https://ghost.org/&#34;&gt;Ghost Blog&lt;/a&gt;. I&amp;rsquo;m using the &lt;a href=&#34;https://hub.docker.com/_/ghost/&#34;&gt;Docker image&lt;/a&gt; on a Digital Ocean droplet. Updating should be simple, I thought. I would take down the blog then spin it back up again after pulling down the latest Docker image. I ran &lt;code&gt;docker stop ghost-blog&lt;/code&gt;, removed the container with &lt;code&gt;docker rm ghost-blog&lt;/code&gt; then ran &lt;code&gt;docker pull ghost:latest&lt;/code&gt;. The container came down without a problem.&lt;/p&gt;
&lt;p&gt;Then the trouble began.&lt;/p&gt;
&lt;p&gt;I tried restarting the image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d --name ghost-blog -p 80:2368 -v /home/ghost/blog-data:/var/lib/ghost/content ghost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when I ran &lt;code&gt;docker ps&lt;/code&gt;, no docker containers were running. I tried looking at the log of the &lt;code&gt;ghost-blog&lt;/code&gt; container and was greeted with this message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar: /var/lib/ghost/content.orig: Cannot open: No such file or directory
tar: Error is not recoverable: exiting now
tar: This does not look like a tar archive
tar: Exiting with failure status due to previous errors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hhmmm… I tried creating &lt;code&gt;/var/lib/ghost/content.orig&lt;/code&gt;, but that didn&amp;rsquo;t help. I then copied my &lt;code&gt;blog-data/&lt;/code&gt; folder, blew the old folder away, then tried running again, but to no avail.&lt;/p&gt;
&lt;p&gt;I was out of ideas, so I decided to inquire at the great oracle of &lt;a href=&#34;https://duckduckgo.com/?q=docker&amp;#43;ghost&amp;#43;tar%3A&amp;#43;%2Fvar%2Flib%2Fghost%2Fcontent.orig%3A&amp;#43;Cannot&amp;#43;open%3A&amp;#43;No&amp;#43;such&amp;#43;file&amp;#43;or&amp;#43;directory&amp;#43;tar%3A&amp;#43;Error&amp;#43;is&amp;#43;not&amp;#43;recoverable%3A&amp;#43;exiting&amp;#43;now&amp;#43;tar%3A&amp;#43;This&amp;#43;does&amp;#43;not&amp;#43;look&amp;#43;like&amp;#43;a&amp;#43;tar&amp;#43;archive&amp;#43;tar%3A&amp;#43;Exiting&amp;#43;with&amp;#43;failure&amp;#43;status&amp;#43;due&amp;#43;to&amp;#43;previous&amp;#43;errors&amp;amp;bext=msl&amp;amp;atb=v43-6_s&amp;amp;ia=web&#34;&gt;DuckDuckGo&lt;/a&gt;. The &lt;a href=&#34;https://github.com/docker-library/ghost/issues/69&#34;&gt;first result&lt;/a&gt; was this lovely issue on GitHub that covered &lt;em&gt;exactly&lt;/em&gt; the problem I was facing.&lt;/p&gt;
&lt;p&gt;I created the directory specified and was able to fire up the docker container without a problem. I think I must have made an incompatible upgrade. ¯_(ツ)_/¯&lt;/p&gt;
&lt;h3 id=&#34;backup-woes&#34;&gt;
  Backup Woes
  &lt;a class=&#34;anchor&#34; href=&#34;#backup-woes&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Running around as the root user of a system is always dangerous. I was painfully reminded of that today when I accidentally deleted my backup folder instead of moving its contents to the original location. 🤦🏻‍♂️Oops.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fortunately&lt;/em&gt;, I had made another backup of all my content saved as a JSON file on my laptop. I fired up the docker container, opened to the website in a web browser, and imported all my old files. Day saved. 😌&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Unfortunately&lt;/em&gt; I lost all my configurations. Not that there was a &lt;em&gt;lot&lt;/em&gt;, but I did loose the Disqus integration as well as some settings for me as an administrator. Alas. I&amp;rsquo;ll fix the comments sometime later. Probably &lt;em&gt;after&lt;/em&gt; midterms…&lt;/p&gt;
&lt;p&gt;So, lessons: make backups. Then don&amp;rsquo;t delete the backups.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;am&lt;/em&gt; enjoying the Ghost blog. It&amp;rsquo;s pretty minimal and doesn&amp;rsquo;t get in my way. I just wish I had been a little more careful today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs Tips and Tricks</title>
      <link>https://lambdaland.org/posts/2017-09-23-emacs-tips-and-tricks/</link>
      <pubDate>Sat, 23 Sep 2017 22:09:43 +0000</pubDate>
      
      <guid>https://lambdaland.org/posts/2017-09-23-emacs-tips-and-tricks/</guid>
      <description>&lt;h1 id=&#34;emacs-tips-and-tricks&#34;&gt;
  Emacs Tips and Tricks
  &lt;a class=&#34;anchor&#34; href=&#34;#emacs-tips-and-tricks&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;to-learn-about&#34;&gt;
  To Learn About
  &lt;a class=&#34;anchor&#34; href=&#34;#to-learn-about&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;☒ Company-mode (completion framework for lots of stuff)&lt;/li&gt;
&lt;li&gt;☒ YASnippets (templates)&lt;/li&gt;
&lt;li&gt;☒ Auto-YASnippets (something like that—I installed it for temporary
templates)&lt;/li&gt;
&lt;li&gt;☒ Alchemist mode (integrates with company mode—tooling for Elixir)&lt;/li&gt;
&lt;li&gt;☐ What do &lt;code&gt;M-.&lt;/code&gt; and &lt;code&gt;M-,&lt;/code&gt; do?&lt;/li&gt;
&lt;li&gt;☐ &lt;code&gt;font-lock-add-keywords&lt;/code&gt; would let me add new keywords to a
language&lt;/li&gt;
&lt;li&gt;☐ hi-lock&lt;/li&gt;
&lt;li&gt;☐ highlight-phrase, unhighlight-regex&lt;/li&gt;
&lt;li&gt;☒ &lt;a href=&#34;https://www.emacswiki.org/emacs/Registers&#34;&gt;Registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;☐ Auto-loading packages to make startup time shorter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;things-that-make-me-happy&#34;&gt;
  Things that make me happy
  &lt;a class=&#34;anchor&#34; href=&#34;#things-that-make-me-happy&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Undo in region (just highlight something and hit undo)&lt;/li&gt;
&lt;li&gt;Generate Backus-Nauer Forms with a slightly modified syntax with
&lt;code&gt;ebnf-eps-buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;helm&#34;&gt;
  Helm
  &lt;a class=&#34;anchor&#34; href=&#34;#helm&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You can filter buffers by pattern with Helm. Type: &lt;code&gt;@pattern&lt;/code&gt; to find
buffers matching &lt;code&gt;pattern&lt;/code&gt;. If you want to have spaces in the pattern,
you must escape them with a backslash.&lt;/p&gt;
&lt;h3 id=&#34;searching-with-the-silver-searcher&#34;&gt;
  Searching with the Silver Searcher
  &lt;a class=&#34;anchor&#34; href=&#34;#searching-with-the-silver-searcher&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;You’ll need &lt;code&gt;helm-ag&lt;/code&gt;. After searching, you get the following
keybindings:&lt;/p&gt;
&lt;h5 id=&#34;key-bindings&#34;&gt;
  Key Bindings
  &lt;a class=&#34;anchor&#34; href=&#34;#key-bindings&#34;&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 19%&#34; /&gt;
&lt;col style=&#34;width: 80%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open other window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;C-l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Search in parent directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c C-e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Switch to edit mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;C-x C-s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Save ag results to buffer(Ask save buffer name if prefix key is specified)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c C-f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable helm-follow-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c &amp;gt;&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to next file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c &amp;lt;&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to previous file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c ?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show help message&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;edit-mode-keymap&#34;&gt;
  Edit mode keymap
  &lt;a class=&#34;anchor&#34; href=&#34;#edit-mode-keymap&#34;&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c C-c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Commit changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c C-k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c C-d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mark delete line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;C-c C-u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unmark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;saved-buffer-keymap&#34;&gt;
  Saved buffer keymap
  &lt;a class=&#34;anchor&#34; href=&#34;#saved-buffer-keymap&#34;&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;RET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to current line posion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;C-o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to current line posion in other window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Update result&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;registers&#34;&gt;
  Registers
  &lt;a class=&#34;anchor&#34; href=&#34;#registers&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Any letter can be a register. (Uppercase and lowercase are distinct.) In
the follinwg examples, &lt;code&gt;&amp;lt;r&amp;gt;&lt;/code&gt; represents a register name.&lt;/p&gt;
&lt;p&gt;Working with the point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-x r SPC &amp;lt;r&amp;gt;&lt;/code&gt; Store point in register (mnemonic: C-SPC saves
current mark)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x r j &amp;lt;r&amp;gt;&lt;/code&gt; Jump to point saved in register (mnemonic: &lt;em&gt;j&lt;/em&gt;ump)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Working with text:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-x r s &amp;lt;r&amp;gt;&lt;/code&gt; &lt;em&gt;S&lt;/em&gt;ave region into register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x r i &amp;lt;r&amp;gt;&lt;/code&gt; &lt;em&gt;I&lt;/em&gt;nsert contents of register (also works for numbers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Working with numbers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-u NUMBER C-x r n &amp;lt;r&amp;gt;&lt;/code&gt; Save a &lt;em&gt;n&lt;/em&gt;umber&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-u NUMBER C-x r + &amp;lt;r&amp;gt;&lt;/code&gt; Increment register &lt;code&gt;&amp;lt;r&amp;gt;&lt;/code&gt; by &lt;code&gt;NUMBER&lt;/code&gt; (if
&lt;code&gt;C-u NUMBER&lt;/code&gt; omitted, increments by 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-x C-k r &amp;lt;r&amp;gt;&lt;/code&gt; Save last kbd macro to register&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;special-modes&#34;&gt;
  Special Modes
  &lt;a class=&#34;anchor&#34; href=&#34;#special-modes&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;racket&#34;&gt;
  Racket
  &lt;a class=&#34;anchor&#34; href=&#34;#racket&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Start everything off right with &lt;code&gt;M-x run-geiser RET racket RET&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-c C-d TAB&lt;/code&gt; Open up documentation for command under point&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;calc&#34;&gt;
  Calc
  &lt;a class=&#34;anchor&#34; href=&#34;#calc&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TAB&lt;/code&gt; rotate&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-mode&#34;&gt;
  Web Mode
  &lt;a class=&#34;anchor&#34; href=&#34;#web-mode&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;I do a fair amount of web programming. &lt;code&gt;web-mode&lt;/code&gt; is awesome! There are
way too many keystrokes for me to list. Here are my favorite, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-c C-e /&lt;/code&gt; Close element. (Mnemonic: C-&lt;em&gt;element&lt;/em&gt; / (for closing
HTML tags))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-c C-f&lt;/code&gt; Fold. Collapses current tag and subtree. Same keystroke to
unfold.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;markdown-mode&#34;&gt;
  Markdown Mode
  &lt;a class=&#34;anchor&#34; href=&#34;#markdown-mode&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-c C-]&lt;/code&gt; Complete markup of element. (e.g. sticks “###” at the
&lt;em&gt;end of a line&lt;/em&gt; on a h3 element&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TAB&lt;/code&gt; When called on a heading, collapses/expands the heading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Shift-TAB&lt;/code&gt; Cycles global folding/visibility&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Text keys: (all start with &lt;code&gt;C-c C-s&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-c C-s s&lt;/code&gt; Make current word/region bold (&lt;code&gt;s&lt;/code&gt; is for strong)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-c C-s e&lt;/code&gt; Italics. (&lt;code&gt;e&lt;/code&gt; for emphasis)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bookmarks&#34;&gt;
  Bookmarks
  &lt;a class=&#34;anchor&#34; href=&#34;#bookmarks&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I installed the &lt;code&gt;bm&lt;/code&gt; module. Run &lt;code&gt;bm-toggle&lt;/code&gt; to book mark a line
visually.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Native bookmarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x r m&lt;/code&gt; New bookmark. Prompts for a name. Mnemonic: “&lt;em&gt;m&lt;/em&gt;ark”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x r b&lt;/code&gt; Jump to a bookmark. Mnemonic: “&lt;em&gt;b&lt;/em&gt;ookmark”, or “&lt;em&gt;b&lt;/em&gt;ack to
&lt;em&gt;b&lt;/em&gt;ookmark”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x r l&lt;/code&gt; List bookmarks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jumping to a bookmark will do so in the &lt;em&gt;current window&lt;/em&gt;, and will put
you where the point last was in that buffer. If you are already in the
buffer, then it will jump to the point where to bookmark was set.&lt;/p&gt;
&lt;p&gt;Bookmarks persist over a session—I’m not sure where the file is, but
they do get stored in some file.&lt;/p&gt;
&lt;h2 id=&#34;expansion&#34;&gt;
  Expansion
  &lt;a class=&#34;anchor&#34; href=&#34;#expansion&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;M-/&lt;/code&gt; will do “dynamic expansion”—if there is a word in one of the
buffers of the current session that starts with whatever your cursor is
on, it will expand to that word. Multiple consecutive invocations of
this function will cycle through available expansions.&lt;/p&gt;
&lt;p&gt;There’s a way to do manual expansion, but I don’t know it.&lt;/p&gt;
&lt;h2 id=&#34;window-enlargements&#34;&gt;
  Window enlargements
  &lt;a class=&#34;anchor&#34; href=&#34;#window-enlargements&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I’ve defined a few nice functions. Here they are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defun sticky-enlarge-window-horizontally (prefix)
  (interactive &amp;quot;P&amp;quot;)
  (enlarge-window-horizontally (if prefix (car prefix) 1))
  (unless (current-message)
    (message &amp;quot;(Use `[&#39; and `]&#39; to adjust window size)&amp;quot;))
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd &amp;quot;]&amp;quot;) &#39;enlarge-window-horizontally)
    (define-key map (kbd &amp;quot;[&amp;quot;) &#39;shrink-window-horizontally)
    (set-transient-map map t)))

(defun sticky-shrink-window-horizontally (prefix)
  (interactive &amp;quot;P&amp;quot;)
  (shrink-window-horizontally (if prefix (car prefix) 1))
  (unless (current-message)
    (message &amp;quot;(Use `[&#39; and `]&#39; to adjust window size)&amp;quot;))
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd &amp;quot;]&amp;quot;) &#39;enlarge-window-horizontally)
    (define-key map (kbd &amp;quot;[&amp;quot;) &#39;shrink-window-horizontally)
    (set-transient-map map t)))

(define-key global-map (kbd &amp;quot;C-x }&amp;quot;) &#39;sticky-enlarge-window-horizontally)
(define-key global-map (kbd &amp;quot;C-x {&amp;quot;) &#39;sticky-shrink-window-horizontally)
(define-key global-map (kbd &amp;quot;&amp;lt;f7&amp;gt;&amp;quot;) &#39;shrink-window-horizontally)
(define-key global-map (kbd &amp;quot;&amp;lt;f8&amp;gt;&amp;quot;) &#39;balance-windows)
(define-key global-map (kbd &amp;quot;&amp;lt;f9&amp;gt;&amp;quot;) &#39;enlarge-window-horizontally)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;functions&#34;&gt;
  Functions
  &lt;a class=&#34;anchor&#34; href=&#34;#functions&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;toggle-truncate-lines&lt;/code&gt; will toggle how long lines are displayed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-d&lt;/code&gt; is essentially &lt;code&gt;ls&lt;/code&gt; — lists the contents of a directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-u M-|&lt;/code&gt; pipe region to a shell command and replace it with the
output&lt;/p&gt;
&lt;p&gt;You can get sweet &lt;code&gt;sed&lt;/code&gt;-like behavior with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; perl -ne &#39;s/^(\d+)\.(\d+)/&amp;lt;&amp;lt;1 Thes. $1:$2&amp;gt;&amp;gt;/g; print&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;macro-wisdom&#34;&gt;
  Macro wisdom
  &lt;a class=&#34;anchor&#34; href=&#34;#macro-wisdom&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Put cursor where it is supposed to go, begin recording (&lt;code&gt;C-x (&lt;/code&gt;), do
thingy, isearch to next location, and then stop recording. (&lt;code&gt;C-x )&lt;/code&gt;)
This lets you see what is going to be edited next, and hit &lt;code&gt;C-s C-s&lt;/code&gt; if
you want to skip to the next match.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;f3&amp;gt;&lt;/code&gt; Is a very fancy key. Normally, it will begin recording a macro.
Once you are defining a macro, hitting &lt;code&gt;&amp;lt;f3&amp;gt;&lt;/code&gt; again will insert the
current macro counter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;f4&amp;gt;&lt;/code&gt; is its best friend. Hitting &lt;code&gt;&amp;lt;f4&amp;gt;&lt;/code&gt; while defining a macro will
end the macro. Hitting &lt;code&gt;&amp;lt;f4&amp;gt;&lt;/code&gt; otherwise will then run the last defined
keyboard macro. Running &lt;code&gt;C-u &amp;lt;f4&amp;gt;&lt;/code&gt; runs the second macro in macro ring.
Running &lt;code&gt;C-u 4 &amp;lt;f4&amp;gt;&lt;/code&gt; runs the first macro 4 times. (Adjust 4 as you
will.)&lt;/p&gt;
&lt;p&gt;You can use Lisp inside of a macro. For example, to insert incrementing
numbers, do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M-: (setq x 1) RET
C-(
C-u M-: x RET
M-: (setq x (+ x 1))
&amp;lt;whatever else&amp;gt;
C-)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can repeat a macro until an error is signaled with &lt;code&gt;C-u 0 C-x e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also run &lt;code&gt;apply-macro-to-region-lines&lt;/code&gt; (&lt;code&gt;C-x C-k r&lt;/code&gt;) to fire a
macro on every line in the region.&lt;/p&gt;
&lt;p&gt;To prompt a user for input while writing a macro, do: &lt;code&gt;C-u C-x q&lt;/code&gt;. This
is a variant of &lt;code&gt;C-x q&lt;/code&gt; which queries the user.&lt;/p&gt;
&lt;h3 id=&#34;recursive-editing&#34;&gt;
  Recursive editing
  &lt;a class=&#34;anchor&#34; href=&#34;#recursive-editing&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Hitting &lt;code&gt;C-r&lt;/code&gt; will enter a recursive editing level &lt;em&gt;when the macro is
run&lt;/em&gt;, but not while you are recording.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C-x q&lt;/code&gt; enters a query state: &lt;code&gt;y&lt;/code&gt; continues to execute the macro, &lt;code&gt;n&lt;/code&gt;
aborts the &lt;em&gt;current&lt;/em&gt; iteration, and &lt;code&gt;q&lt;/code&gt; aborts all together.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C-u C-x q&lt;/code&gt; lets you enter in some text.&lt;/p&gt;
&lt;p&gt;To finish recursive editing, type &lt;code&gt;C-M-c&lt;/code&gt;. To abort and halt execution,
type &lt;code&gt;C-]&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rectangles&#34;&gt;
  Rectangles
  &lt;a class=&#34;anchor&#34; href=&#34;#rectangles&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;To select text in a rectangle, use &lt;code&gt;C-x SPC&lt;/code&gt;. The region will then
highlight like a rectangle. The kill and yank commands will work like
normal (i.e. hitting &lt;code&gt;C-k&lt;/code&gt; will kill the rectangle.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x r M-w&lt;/code&gt; Copy rectangle as kill. (Think &lt;code&gt;M-w&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x r N&lt;/code&gt; Inserts numbered lines in the rectangle. Accepts a prefix
argument to change at what number the lines start at.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-x string-insert-rectangle&lt;/code&gt; Prompts for a string and inserts it at
the current rectangle. So you can go from this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; one
 two
 three
 four
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; - one
 - two
 - three
 - four
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;by setting the mark on the &lt;code&gt;o&lt;/code&gt; of &lt;code&gt;one&lt;/code&gt;, then moving to the &lt;code&gt;f&lt;/code&gt; in
&lt;code&gt;four&lt;/code&gt;, then running the command.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;misc-keystrokes&#34;&gt;
  Misc. Keystrokes
  &lt;a class=&#34;anchor&#34; href=&#34;#misc-keystrokes&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x &amp;lt;right arrow&amp;gt;&lt;/code&gt; cycle through buffers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-q&lt;/code&gt; toggle read-only mode in current buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-;&lt;/code&gt; to set comment column to cursor’s current column&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-h&lt;/code&gt; Really &lt;code&gt;&amp;lt;any prefix&amp;gt; C-h&lt;/code&gt; shows a listing of all possible
completions after the prefix character.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x 8 RET&lt;/code&gt; Insert arbitary unicode character by name. You can
insert snowmen like this!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x 8 &amp;lt;char&amp;gt;&lt;/code&gt; There are a bunch of characters that you can insert
after this. “&amp;lt;” will insert “«”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x n n&lt;/code&gt; Only displays the region. Good for focusing. Use &lt;code&gt;C-x n w&lt;/code&gt;
to display everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x $&lt;/code&gt; To hide lines in the current buffer, type ‘C-x $’
(‘set-selective-display’) with a numeric argument N. Then lines with
at least N columns of indentation disappear from the screen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-u&lt;/code&gt; Prefix argument. The default is 4. If you want to grow the
current window by, say, 15 lines, do following: &lt;code&gt;C-u 15 C-x ^&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-u &amp;lt;number&amp;gt; &amp;lt;key&amp;gt;&lt;/code&gt; Repeats &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; times. It’s
different for inserting digits. If you wanted to insert &lt;code&gt;5&lt;/code&gt; seven
times, type &lt;code&gt;C-u 7 C-u 5&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-k C-i&lt;/code&gt; Inserts the current value of the keyboard macro
counter and increments it. When &lt;code&gt;C-u&lt;/code&gt; proceeds the command, the
previous value is inserted, and the counter is not updated. A prefix
argument specifies a different increment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-k C-c&lt;/code&gt; Prompts for the initial value of the keyboard macro.
Must be called prior to starting macro definition to be used this
way. It has another behavior if called during macro definition. See
&lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsKeyboardMacroCounter&#34;&gt;this
page&lt;/a&gt; for
help.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-k n&lt;/code&gt; Give the last kbd macro a name, which you can then call&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ESC-^&lt;/code&gt; Join this line to the previous and fix up whitespace at
join. Useful if &lt;code&gt;auto-fill-mode&lt;/code&gt; was turned on and you need to
unwrap a line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;f1&amp;gt;&lt;/code&gt; Run help&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;f2&amp;gt;&lt;/code&gt; Appears to be a prefix command, much like &lt;code&gt;C-x&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;f10&amp;gt;&lt;/code&gt; Opens the menu. As in, the one at the top of the screen that
you never have actually used. With ACTUAL GRAPHICS!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x RET f&lt;/code&gt; Allows you to set the encoding when saving the file.
Useful for stripping bad line endings in DOS files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dired&#34;&gt;
  Dired
  &lt;a class=&#34;anchor&#34; href=&#34;#dired&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-o&lt;/code&gt; In dired, opens the file the cursor is on in the other window.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;occur&#34;&gt;
  Occur
  &lt;a class=&#34;anchor&#34; href=&#34;#occur&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-u M-s o &amp;lt;pattern&amp;gt; RET&lt;/code&gt; Copies all strings mattching &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;
(if you use &lt;code&gt;.*thingy.*&lt;/code&gt; it will copy the whole line with “thingy”
in it) into buffer called &lt;code&gt;*Occur*&lt;/code&gt; ### Regexes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not like Perl. In &lt;code&gt;(?:aaa|bbb)&lt;/code&gt;, the characters &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, and &lt;code&gt;|&lt;/code&gt; all
match themselves. If you want perl-like behavior, escape them:
&lt;code&gt;\(?:aaa\|bbb\)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But when you want to type that in a string literal, use
&lt;code&gt;&amp;quot;\\(?:aaa\\|bbb\\)&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;character-classes&#34;&gt;
  Character Classes
  &lt;a class=&#34;anchor&#34; href=&#34;#character-classes&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Some common character classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; works as expected (any char)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:ascii:]]+&lt;/code&gt; any ascii character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[_A-Za-z0-9]+&lt;/code&gt; letters, digits, underscores&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;\([^&amp;quot;]+\)&amp;quot;&lt;/code&gt; capture text between double quotes (not accounting for
escaped chars)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;regex-search-and-replace&#34;&gt;
  Regex search and replace:
  &lt;a class=&#34;anchor&#34; href=&#34;#regex-search-and-replace&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;M-x replace-regexp
Replace regexp: right\|left
Replace regexp with: \,(if (equal &amp;quot;right&amp;quot; \&amp;amp;amp;) &amp;quot;left&amp;quot; &amp;quot;right&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like the &lt;code&gt;\,(...)&lt;/code&gt; syntax says “evaluate me”. :)&lt;/p&gt;
&lt;h4 id=&#34;regex-search-and-replace-with-captured-bit&#34;&gt;
  Regex search and replace with captured bit
  &lt;a class=&#34;anchor&#34; href=&#34;#regex-search-and-replace-with-captured-bit&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;M-x replace-regexp
Replace regexp: subject(\([A-Za-z]+\))
Replace regexp with: \1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That gets subject(*), and retuns *&lt;/p&gt;
&lt;h2 id=&#34;programming-languages&#34;&gt;
  Programming Languages
  &lt;a class=&#34;anchor&#34; href=&#34;#programming-languages&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;c&#34;&gt;
  C
  &lt;a class=&#34;anchor&#34; href=&#34;#c&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Compile (using &lt;code&gt;make -k&lt;/code&gt;) with &lt;code&gt;M-x compile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Any errors will show up in a special buffer; visit with &lt;kbd&gt;C-x
`&lt;/kbd&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
